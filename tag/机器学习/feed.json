{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sunfish-Blog • All posts by \"机器学习\" tag",
    "description": "",
    "home_page_url": "sunyuzero.top",
    "items": [
        {
            "id": "sunyuzero.top/2020/10/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(%E4%BA%8C)/",
            "url": "sunyuzero.top/2020/10/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(%E4%BA%8C)/",
            "title": "机器学习(二)",
            "date_published": "2020-10-12T12:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 简单线性回归 </font></center>\n\n<p>线性回归是机器学习中训练数据集的重要手段，首先是简单的线性回归，用到的代码和数据集：<a href=\"https://github.com/sunyuzero/cdn/blob/master/csv/studentscores.csv\">数据集</a>,<a href=\"https://github.com/sunyuzero/cdn/blob/master/csv/LR.py\">代码</a><br>数据集图示：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c11.png\" width=200></div>\n## 导入库\n线性回归所使用到的库如下：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pandas as pd</span><br><span class=\"line\">import numpy as np    </span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\">from sklearn.linear_model import LinearRegression</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导入数据集-amp-amp-拆分数据集\"><a href=\"#导入数据集-amp-amp-拆分数据集\" class=\"headerlink\" title=\"导入数据集&amp;&amp;拆分数据集\"></a>导入数据集&amp;&amp;拆分数据集</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 导入数据集</span></span><br><span class=\"line\">dataset = pd.read_csv(<span class=\"string\">&#x27;studentscores.csv&#x27;</span>)</span><br><span class=\"line\">X = dataset.iloc[ : , : <span class=\"number\">1</span> ].values</span><br><span class=\"line\">Y = dataset.iloc[ : , <span class=\"number\">1</span> ].values</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 拆分数据集</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\">X_train , X_test , Y_train , Y_test = train_test_split( X , Y , test_size = <span class=\"number\">1</span>/<span class=\"number\">4</span> , random_state = <span class=\"number\">0</span> )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用简单线性回归模型训练数据集\"><a href=\"#使用简单线性回归模型训练数据集\" class=\"headerlink\" title=\"使用简单线性回归模型训练数据集\"></a>使用简单线性回归模型训练数据集</h2><p>使用LinearRegression中的模型训练数据集</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regressor = LinearRegression()</span><br><span class=\"line\">regressor = regressor.fit( X_train , Y_train )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"预测训练结果\"><a href=\"#预测训练结果\" class=\"headerlink\" title=\"预测训练结果\"></a>预测训练结果</h2><p>使用LinearRegression库的predict函数预测训练结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Y_pred = regressor.predict( X_test )</span><br></pre></td></tr></table></figure>\n<p>预测的结果如下：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c10.png\" width=500></div>\n\n\n<h2 id=\"结果可视化\"><a href=\"#结果可视化\" class=\"headerlink\" title=\"结果可视化\"></a>结果可视化</h2><p>使用matplotlib中的pyplot库可以将训练的数据集转化为图表，使结果可视化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.scatter ( X_train , Y_train , color = <span class=\"string\">&#x27;red&#x27;</span> )</span><br><span class=\"line\">plt.plot ( X_train , regressor.predict(X_train) , color = <span class=\"string\">&#x27;blue&#x27;</span> )</span><br><span class=\"line\">plt.show() </span><br><span class=\"line\"></span><br><span class=\"line\">plt.scatter( X_test , Y_test ,color = <span class=\"string\">&#x27;red&#x27;</span> )</span><br><span class=\"line\">plt.plot( X_test , Y_test , color = <span class=\"string\">&#x27;blue&#x27;</span> )</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>训练集可视化图表为：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c8.png\" width=500 height=300></div>\n测试集可视化图表为：\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c9.png\" width=500 height=300></div>\n\n",
            "tags": [
                "blog",
                "机器学习"
            ]
        },
        {
            "id": "sunyuzero.top/2020/10/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "url": "sunyuzero.top/2020/10/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "title": "机器学习(一)",
            "date_published": "2020-10-05T12:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 数据预处理 </font></center>\n\n<p>数据处理可谓是机器学习的重中之重，接下来我所用到的数据集和代码如下：<a href=\"https://github.com/sunyuzero/cdn/blob/master/csv/Data.csv\">数据集</a>,<a href=\"https://github.com/sunyuzero/cdn/blob/master/csv/Data.py\">代码</a></p>\n<h2 id=\"导入库\"><a href=\"#导入库\" class=\"headerlink\" title=\"导入库\"></a>导入库</h2><p>首先需要导入python库函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##下面两个库都是机器学习最常用的2个库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"comment\">## 以下的库是数据预处理需要的库</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.impute <span class=\"keyword\">import</span> SimpleImputer</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> LabelEncoder, OneHotEncoder</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.compose <span class=\"keyword\">import</span> ColumnTransformer</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> StandardScaler</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导入数据集\"><a href=\"#导入数据集\" class=\"headerlink\" title=\"导入数据集\"></a>导入数据集</h2><p>原本的数据集为：</p>\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c1.png\" width=400></div>\n然后开始经过以下处理：\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataset = pd.read_csv(<span class=\"string\">&#x27;Data.csv&#x27;</span>)     <span class=\"comment\">##导入数据集,注意是相对路径</span></span><br><span class=\"line\">X = dataset.iloc[ : , : <span class=\"number\">-1</span> ].values    <span class=\"comment\">## X一直取数据集的最后一列（除了最后一列）</span></span><br><span class=\"line\">Y = dataset.iloc[ : , <span class=\"number\">3</span> ].values    <span class=\"comment\">## Y取第4列</span></span><br></pre></td></tr></table></figure>\n其中X为：\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c2.png\" width=200></div>\nY为：\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c3.png\" width=200></div>\n\n<h2 id=\"处理丢失数据\"><a href=\"#处理丢失数据\" class=\"headerlink\" title=\"处理丢失数据\"></a>处理丢失数据</h2><p>很多时候，我们得到的数据集中会有数据丢失的部分，通过以下处理，在丢失数据的部分给与平均值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imputer = SimpleImputer(missing_values = np.nan, strategy = <span class=\"string\">&quot;mean&quot;</span>)</span><br><span class=\"line\">imputer = imputer.fit(X[ : , <span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">X[ : , <span class=\"number\">1</span>:<span class=\"number\">3</span>] = imputer.transform(X[ : , <span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n<p>处理后的X如下，我们可以发现空白的部分被填上了平均值：</p>\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c4.png\" width=200></div>\n\n<h2 id=\"数据分类\"><a href=\"#数据分类\" class=\"headerlink\" title=\"数据分类\"></a>数据分类</h2><p>将数据集中的数据进行分类，相同的数字代表同一类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">labelencoder_X = LabelEncoder()</span><br><span class=\"line\">labelencoder_Y = LabelEncoder()</span><br><span class=\"line\"></span><br><span class=\"line\">X[ : , <span class=\"number\">0</span>] = labelencoder_X.fit_transform(X[ : , <span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">ct1 = ColumnTransformer([(<span class=\"string\">&quot;country&quot;</span> , OneHotEncoder() , [<span class=\"number\">1</span>])], <span class=\"string\">&#x27;drop&#x27;</span>)</span><br><span class=\"line\">ct2 = ColumnTransformer([(<span class=\"string\">&quot;country&quot;</span> , OneHotEncoder() , [<span class=\"number\">1</span>])], <span class=\"string\">&#x27;drop&#x27;</span>)</span><br><span class=\"line\">X = ct1.fit_transform(X).toarray()</span><br><span class=\"line\">Y = labelencoder_Y.fit_transform(Y)</span><br><span class=\"line\">```  </span><br><span class=\"line\">处理后的X如下，我们可以发现数据集都变成了数字，其中相同的类别数字相同：</span><br><span class=\"line\">&lt;div aligh=center&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c5.png&quot; width=200&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 拆分数据集</span></span><br><span class=\"line\">用train_test_split拆分数据集，其中test_size表示测试集所占数据集的比例</span><br><span class=\"line\">```python</span><br><span class=\"line\">X_train , X_test , Y_train , Y_test = train_test_split( X , Y , test_size = <span class=\"number\">0.2</span> , random_state = <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>处理后的X_train（训练集）如下，占80%：</p>\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c6.png\" width=200></div>\nX_test（数据集）如下，占20%：\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c7.png\" width=200></div>\n\n<h2 id=\"特征量化\"><a href=\"#特征量化\" class=\"headerlink\" title=\"特征量化\"></a>特征量化</h2><p>用特征标准化或Z值归一化实现特征量化，解决其他模型算法的特征在幅度，单位和范围姿态问题上变化很大的问题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc_X = StandardScaler()</span><br><span class=\"line\">X_train = sc_X.fit_transform(X_train)</span><br><span class=\"line\">X_test = sc_X.transform(X_test)</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "机器学习"
            ]
        }
    ]
}