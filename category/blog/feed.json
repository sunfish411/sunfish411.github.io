{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sunyuzero-Blog • All posts by \"blog\" category",
    "description": "",
    "home_page_url": "sunyuzero.top",
    "items": [
        {
            "id": "sunyuzero.top/2021/10/01/LeetCode%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0%E2%80%94%E2%80%94%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/",
            "url": "sunyuzero.top/2021/10/01/LeetCode%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0%E2%80%94%E2%80%94%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/",
            "title": "LeetCode刷题笔记",
            "date_published": "2021-10-01T10:45:43.000Z",
            "content_html": "<h1 id=\"LeetCode刷题日记——初级算法\"><a href=\"#LeetCode刷题日记——初级算法\" class=\"headerlink\" title=\"LeetCode刷题日记——初级算法\"></a>LeetCode刷题日记——初级算法</h1><h3 id=\"1-买卖股票的最佳时机\"><a href=\"#1-买卖股票的最佳时机\" class=\"headerlink\" title=\"1.买卖股票的最佳时机\"></a>1.买卖股票的最佳时机</h3><blockquote>\n<p><strong>题目大意</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个数组 prices ，其中 prices[i] 是一支给定股票第 i 天的价格。</span><br><span class=\"line\">设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</span><br><span class=\"line\">注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</span><br><span class=\"line\"></span><br><span class=\"line\">示例:</span><br><span class=\"line\">输入: prices &#x3D; [7,1,5,3,6,4]</span><br><span class=\"line\">输出: 7</span><br><span class=\"line\">解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出, 这笔交易所能获得利润 &#x3D; 6-3 &#x3D; 3 。</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>动态规划解题</strong></p>\n</blockquote>\n<p>​    建立一个二维数组，<code>dp[i][0]</code>代表第i天手中没有股票时的现有利润，<code>dp[i][1]</code> 代表第i天手中有股票时的最大利润，则递推公式如下：<code>dp[i][0]=max(dp[i-1][0],dp[i-1][1]+prices[i])</code>,<code>dp[i][1]=max(dp[i-1][0]-prices[i],dp[i-1][1])</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = prices.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len][<span class=\"number\">2</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>]=-prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>],dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>]+prices[i]);</span><br><span class=\"line\">            dp[i][<span class=\"number\">1</span>] = Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>]-prices[i],dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[len-<span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>贪心算法解题</strong></p>\n</blockquote>\n<p>​    贪心算法，即局部最优，只需要在prices数组中从头开始遍历，找到开始上涨的最小值，然后这一上涨阶段的最大值，最小值买入，最大值卖出，就能获得最大利润</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> len = prices.length;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">          ans += Math.max(<span class=\"number\">0</span>,prices[i]-prices[i-<span class=\"number\">1</span>]);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-旋转数组\"><a href=\"#2-旋转数组\" class=\"headerlink\" title=\"2.旋转数组\"></a>2.旋转数组</h3><blockquote>\n<p>题目大意</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</span><br><span class=\"line\"></span><br><span class=\"line\">示例:</span><br><span class=\"line\">输入: nums &#x3D; [1,2,3,4,5,6,7], k &#x3D; 3</span><br><span class=\"line\">输出: [5,6,7,1,2,3,4]</span><br><span class=\"line\">解释:</span><br><span class=\"line\">向右旋转 1 步: [7,1,2,3,4,5,6]</span><br><span class=\"line\">向右旋转 2 步: [6,7,1,2,3,4,5]</span><br><span class=\"line\">向右旋转 3 步: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>题解</p>\n</blockquote>\n<p>以题目示例来说，旋转之后，左边的4个元素整体和右边的3个元素整体将会交换位置，可以先将整体交换，即直接反转元素，然后在每个部分中再反转即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;  </span><br><span class=\"line\">       <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">       k %= len;</span><br><span class=\"line\">       reverse(nums,<span class=\"number\">0</span>,len-<span class=\"number\">1</span>);</span><br><span class=\"line\">       reverse(nums,<span class=\"number\">0</span>,k-<span class=\"number\">1</span>);</span><br><span class=\"line\">       reverse(nums,k,len-<span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">           System.out.println(num);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums,<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (start&lt;end)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> temp = nums[start];</span><br><span class=\"line\">           nums[start++]=nums[end];</span><br><span class=\"line\">           nums[end--]=temp;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-存在重复元素\"><a href=\"#3-存在重复元素\" class=\"headerlink\" title=\"3.存在重复元素\"></a>3.存在重复元素</h3><blockquote>\n<p><strong>题目大意</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个整数数组，判断是否存在重复元素。</span><br><span class=\"line\">如果存在一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 1</span><br><span class=\"line\">输入: [1,2,3,1]</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>解题思路—set</strong></p>\n</blockquote>\n<p>直接暴力求解的话效率非常低，可以使用set的add方法一个特性：当添加的对象在set中已经存在，会add失败返回false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(!set.add(i)) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>解题思路—排序后比较</strong></p>\n</blockquote>\n<p>可以使用java内置的排序函数，先进行排序，在用O（n）的时间复杂度进行比较，最后的时间复杂度为排序的时间复杂度nlogn，使用leetcode发现这一种方法所使用的时间和空间要优于使用set</p>\n<h3 id=\"4-只出现一次的数字\"><a href=\"#4-只出现一次的数字\" class=\"headerlink\" title=\"4.只出现一次的数字\"></a>4.只出现一次的数字</h3><blockquote>\n<p><strong>题目大意</strong></p>\n</blockquote>\n<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>\n<blockquote>\n<p>解题思路—异或</p>\n</blockquote>\n<p>利用位运算符异或，相同的数字异或为0，然后任何数与0异或为本身，所以直接将所有数字进行异或即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            ans=ans^nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>解题思路—set</p>\n</blockquote>\n<p>使用set的add特性，当添加失败时说明其为重复元素，直接将它移除，最后set只剩下一个不重复的元素，这个的效率不如上一种方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">         Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!set.add(nums[i]))&#123;</span><br><span class=\"line\">                set.remove(nums[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)set.toArray()[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-字符串中的第一个唯一字符\"><a href=\"#5-字符串中的第一个唯一字符\" class=\"headerlink\" title=\"5.字符串中的第一个唯一字符\"></a>5.字符串中的第一个唯一字符</h3><blockquote>\n<p>题目大意</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</span><br><span class=\"line\"></span><br><span class=\"line\">示例：</span><br><span class=\"line\">s &#x3D; &quot;leetcode&quot;</span><br><span class=\"line\">返回 0</span><br><span class=\"line\"></span><br><span class=\"line\">s &#x3D; &quot;loveleetcode&quot;</span><br><span class=\"line\">返回 2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>解题思路</p>\n</blockquote>\n<p>关于字符串的问题要善于运用一个一维数组a[26]，来记录每一个字符的出现次数。遍历给定字符串的每一个字符，出现一次便在数组中加一，最后按顺序遍历找出值为一的元素索引返回，不存在即返回-1。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">firstUniqChar</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">           a[s.charAt(i)-<span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(a[s.charAt(i)-<span class=\"string\">&#x27;a&#x27;</span>]==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n",
            "tags": [
                "blog",
                "学习",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2021/09/05/%E5%A5%88%E4%BD%95%E7%BC%98%E6%B5%85/",
            "url": "sunyuzero.top/2021/09/05/%E5%A5%88%E4%BD%95%E7%BC%98%E6%B5%85/",
            "title": "奈何缘浅",
            "date_published": "2021-09-05T10:45:43.000Z",
            "content_html": "<h3 id=\"一场梦，一份荒诞，一份期待，一份破灭。\"><a href=\"#一场梦，一份荒诞，一份期待，一份破灭。\" class=\"headerlink\" title=\"一场梦，一份荒诞，一份期待，一份破灭。\"></a>一场梦，一份荒诞，一份期待，一份破灭。</h3><p>​    男孩独自在操场上寂寥地散着步，脑海中却一直萦绕着女孩的身影，果然，说好的放下还是很难啊。走了很久的男孩准备回去，抬头却发现了女孩正在不远处，于是他便不顾一切地向女孩奔去，牢牢的抓住了女孩，对女孩说，”我带你回去好不好”，女孩点了点头，男孩抑制住心中的狂喜，对女孩说，“在这等我一下，我开车过来接你”，可是，等男孩开车回到原地，却不见了女孩的身影，男孩发了疯似的跑遍校园想找到女孩，却无能为力，拿出了手机想对女孩说一句你在哪时，却发现女孩就在身边，对他说，“你在说什么呢”，男孩激动得留下了眼泪狠狠的抱住了女孩。<br>​    突然，男孩的心猛的抽搐了一下，眼前的场景突然崩塌，映入眼帘的只是熟悉的那个床，熟悉的那个房间，一切是那么的虚幻而又荒诞，可是，眼角未干的泪痕却又显得那么的真实。说好的忘记放下，男孩躺在床上又不禁回忆起以前的点点滴滴，嘴角微微上扬，突然，手机的闹钟想起，响的是这么的不是时候，又是这么的是时候，让男孩回到了现实当中，狠狠地拍了一下自己的脸，男孩坐了起来，呆呆的望着窗外，对自己说道，“没想到都快一个月了还能梦到你，这样下去不行啊，彻底放下可能对你我都好吧”，男孩终于狠下了心，在犹犹豫豫中，删除了女孩的好友，在这场荒诞的梦下，男孩亲手破灭了期待，虽然有很多不甘，有很多放不下。</p>\n<h3 id=\"梦碎之前，必有无边无际的黑暗压迫。\"><a href=\"#梦碎之前，必有无边无际的黑暗压迫。\" class=\"headerlink\" title=\"梦碎之前，必有无边无际的黑暗压迫。\"></a>梦碎之前，必有无边无际的黑暗压迫。</h3><p>   一个慵懒的早晨，男孩早早醒来，摸了摸床边的手机看了看，唔，7点，是时候该起床了，很难想象，往日被叫做睡神的男孩，现在似乎已经和这个称号不沾边了。<br>   毫无拖延，男孩飞快的下了床洗刷，心里却有点起伏。早上8点有一个数学培训，女孩去年去过今年应该也会去吧？会不会遇见她？男孩心里有点逃避却又有一丝难以察觉的期待，就是如此，男孩醒来之后就难以平静下来了。<br>   带着室友去肯德基匆忙地吃了顿早餐赶去教室，却发现教室早就挤满了人，坐着的站着的，已经挤到了教室外面，“诶，他们好积极啊，没办法了只能回去了”，男孩对他的舍友说，心里似乎有点遗憾，这种感觉男孩自己也不清楚，或许是因为没能参加培训，亦或者是没能见到女孩？<br>    就这样回到了寝室，男孩还是有点意难平，所以躺到了床上，看起来了最近比较火的电视剧《我是余欢水》，为什么会想看这个呢，因为男孩觉得他的境遇似乎有点像这个男主。<br>   不得不说，你越担心一件事，这件事情似乎就越可能会发生。男孩看了一会就感觉有点焦躁看不下去了，便打开了QQ刷刷消息，点开了熟悉的群聊，“节哀”，一个不小也不大的词语映入了男孩的整个瞳孔，这是男孩的一个好兄弟对男孩说的。这个或许在别人看来难以理解，但男孩瞬间就能猜到发生了什么，他一下蹦下了床，颤抖着点开了女孩的空间，然后看了看另一个男孩，嗯，情头，很好。这一瞬间，男孩有点崩溃，又有点愤怒，想说些什么却发现什么都说不出口，只是想着，在一起那么久，难道真的一点感情都没有吗，真的能说放下就放下吗。</p>\n<h3 id=\"七月的风，八月的雨，九月的野蛮生长。\"><a href=\"#七月的风，八月的雨，九月的野蛮生长。\" class=\"headerlink\" title=\"七月的风，八月的雨，九月的野蛮生长。\"></a>七月的风，八月的雨，九月的野蛮生长。</h3><p>​    说起来，这应该算是男孩真正意义上的第一次完整的恋爱。<br>​    男孩和女孩相遇于12月，一次偶然的机会，让男孩和女孩独处了一会，那次的相遇男孩只是和女孩闲聊了一会，却埋下了缘分的种子。<br>​    男孩和女孩相知于3月，因为很多的相处机会，那时候男孩和女孩聊天逐渐频变得繁，逐渐熟悉，也逐渐心动。<br>​    男孩和女孩相伴于5月，他们一起牵着手在这座城市留下了一个又一个专属的甜蜜足迹，那时候，男孩傻傻的以为，女孩就是他未来的全部。<br>​    男孩和女孩相别于7月，假期的到来，男孩送女孩坐上了地铁，地铁渐行渐远，而男孩却呆呆的站了几秒钟，那时候，男孩以为这次的分别只是短暂的假期离别，却没想到，这将会是一次永远的离别。<br>​    男孩和女孩相裂于9月，突如其来的冷漠，让男孩不知所措，最后以一场不体面的分手，换来了7月相别后的第一次见面的机会，那一次转身离开，男孩在人群中边哭边跑。<br>​    9月，注定是男孩野蛮生长的一个月，他痛苦了一段时间，期待了一段时间，也崩溃了一段时间。刚分手的男孩茶饭不思，昼夜难眠，尝试过放下却难以做到，也尝试过挽留，每天会忍不住关注女孩的动态，每天都怀着一丝期待渡过。在一切都平静之后，暴风雨却来临了，女孩和别的男生在一起的消息让男孩感觉那么梦幻，欺骗，迷茫，不真实的感觉向男孩涌来，这应该是男孩出生以来受过最重的一次打击，也是让男孩第一次亲身感受到了现实的残酷。可是男孩往往不想把别人往坏里想，也许她的选择有一点原因是为了让我放下吧，感谢时光于流逝中的恩宠，感谢成长与回望，感谢缘分和信仰，聚散自由天注定，不怨天，不怨命。<br>   “你有很多事情放不下？做人要潇洒一点，爱一个人未必一定要跟她一辈子的。我喜欢一朵花，未必一定要把它摘下来，我喜欢风，难道叫风停下来让我闻一闻？我喜欢云难道叫云飘下让它罩着我？”有相遇，就会有离别，虽然离别很痛，但是相遇也很甜，至少，尝过了爱情的滋味，至少，你也为了一个人疯狂过，至少，那时候的我们是最好的。或许，如果能够知道结局，男孩那时候也会奋不顾身吧？<br>​    以此故事，纪念逝去的爱情，留下一个忠告，”世界上的事情，最忌讳的就是个十全十美，你看那天上的月亮，一旦圆满了，马上就要亏厌；树上的果子，一旦熟透了，马上就要坠落。凡事总要稍留欠缺，才能持恒。“</p>\n",
            "tags": [
                "blog",
                "生活"
            ]
        },
        {
            "id": "sunyuzero.top/2021/05/15/YD/",
            "url": "sunyuzero.top/2021/05/15/YD/",
            "title": "你就这样走进了我的生活",
            "date_published": "2021-05-14T16:00:00.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 你就这样走进了我的生活 </font></center>\n<font face=\"楷体\" size=5>下面的是独属于YcYd的故事</font>\n\n<h1 id=\"故事的开始\"><a href=\"#故事的开始\" class=\"headerlink\" title=\"故事的开始\"></a>故事的开始</h1><p><font size=5>芜湖让我想想，我对你第一次心中有了触动，就是那天早上嗷</font><br><font face=\"楷体\" size=4><br>一个不普通的早八，一个让我心绪起伏的早八。你还记得吗，那天周五我不经意在群里说起没吃早餐，然后你呢就一直在关心我，还想着给我送早餐呐。我当时心里真的好感动，第一次有人这么关心我，那天我真的是开心了好久啊。也就是那天，你似乎就开始在我的心中撒下了一颗种子，一颗将会占满我所有心田的一颗种子。</font></p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/cd/1.jpg\" width=400></div>\n\n<h1 id=\"群聊的升温\"><a href=\"#群聊的升温\" class=\"headerlink\" title=\"群聊的升温\"></a>群聊的升温</h1><p><font size=5>芜湖想和你聊天，又不敢私聊，只能在群里期待着聊天啦</font><font face=\"楷体\" size=4><br>后来呢，由于我们那时候还不太熟悉彼此嗷，所以我不敢找你私聊呜呜，还好有一个这样的大群，让我有了机会更多地了解你。那段时间呢，我们一直在群里聊了很多很多，渐渐的，我发现我似乎对你产生了一些不一样的感觉，感觉就很喜欢和你聊天，每次都期待着你能在群里提到我，每次呢见到你都会很开心。但是呢我当时也还是不知道这到底是不是喜欢，所以我索性吧就这样先维持下去吧，慢慢发展xixi，你有没有发现之后，你偷拍我的时候我都不躲力xixi，因为我想留在你手机里鸭，虽然你每次都把我拍的老丑了。<br>芜湖收藏了一些咱们在群里聊天时的一些记录xixi</font></p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/cd/2.jpg\" width=400></div>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/cd/3.jpg\" width=400></div>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/cd/4.jpg\" width=400></div><div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/cd/5.jpg\" width=400></div>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/cd/6.jpg\" width=400></div>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/cd/7.jpg\" width=400></div>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/cd/8.jpg\" width=400></div>\n\n\n<h1 id=\"开始心动啦\"><a href=\"#开始心动啦\" class=\"headerlink\" title=\"开始心动啦\"></a>开始心动啦</h1><p><font size=5>4月12日，是我们火花的第一天，也是我第一次鼓起了勇气主动接近你</font><font face=\"楷体\" size=4><br>&emsp;&emsp;我说出来你不要怪我啊，不要怪我太套路力，不知道那天你还记不记得鸭，那天是mm的告别饭，晚上去双喜吃饭，其实呢前一天我就想好力，晚上骑车车带你一起过去，然后正好那天下午手机又没电力，我就灵光一动xixi，找你借充电宝，然后顺理成章得骑车车带你过去。xixi当时借了超超的车带你去双喜嗷，我老紧张了，开过去的时候是真的好慢嗷，不是因为我和你说的上坡哈哈哈。芜湖双喜那次宇宝老助攻了，把咱们俩给弄到了一起坐着，还给我们拍了好多照片，xixi老开心了( •͈ᴗ⁃͈)ᓂ- - -♡﻿<br>&emsp;&emsp;我还没告诉你嗷，其实，我喜欢你这件事，他们三个都知道啦，一直没告诉你你可别生我的气嗷。<br>&emsp;&emsp;还记得那次一起去看电影吗，多亏了他们的助攻嗷，才有了我们甜甜的一天。那天之前，宇宝二话不说给我收了两张电影票，然后他们疯狂给我打气，陪我演戏，诶嘿，我就顺势鼓起勇气去拉你一起看电影嗷，你答应的时候可把我开心死了，我时刻不在想象着那开心的情景(xixi那天刚见到你的时候真的甜到我力，你真的好可爱漂亮啊)，那天，我们一起看电影，一起放风筝，还帮你拔头发，啊现在想起来我还是感觉好甜啊，我磕死我自己了<br>&emsp;&emsp;之后呐，我感觉我们都越来越放开自己了，开始变得无话不说，而我也喜欢上了这种感觉，越来越依赖你，时时刻刻都不敢离开手机，怕错过了你的信息，而你，已经越来越成为了我生命里不可缺少的一部分同你欢喜，同你悲伤，为你担心，也为你吃醋。<br>&emsp;&emsp;还记得五一的时候，你和闺蜜去光谷玩的那天吗，我真的真的好担心啊，听到晚上你还要和他们一起去的时候，我有点生气伤心，说不出话来，因为我以为你会回来，虽然你是陪你闺蜜吧，但是我真的不想看到你有一点点危险，所以呢，我就急着跑去找你。芜湖还好嗷，一切都好，还和你一起逛了一会光谷，开心！！最主要就是，最开心的就是！！！！那天回来之后我说出了我要追你！！！很庆幸自己当时有这个勇气嗷，因为我至少要说出这句话才能更好的保护你嗷，说出来之后，听到你的默认：“你不就是在追我吗？”啊啊啊我真的是开心死了，那几天看谁都是甜甜的，我只能说，世界很甜，因为有你！<br></font><br><font face=\"楷体\" size=5>芜湖这篇文章到此就结束了，虽然简要，但是概括出了遇见Yd之后，Yc最真实的内心活动，希望Yd看到这篇文章时，YcYd已经在一起啦！</font></p>\n",
            "tags": [
                "blog",
                "YD"
            ]
        },
        {
            "id": "sunyuzero.top/2020/12/10/JAVA%E9%9B%86%E5%90%88/",
            "url": "sunyuzero.top/2020/12/10/JAVA%E9%9B%86%E5%90%88/",
            "title": "java集合",
            "date_published": "2020-12-10T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> JAVA集合 </font></center>\n\n<h1 id=\"collection集合\"><a href=\"#collection集合\" class=\"headerlink\" title=\"collection集合\"></a>collection集合</h1><p>集合是存储数据的框架，只能用来存放对象元素，collection集合是最顶层的父类接口，其有2个子接口List和Set，分别代表着两类不同的集合，List接口实现的集合是有序的集合，有索引，元素可以重复；而Set接口实现的集合没有索引，并且不允许存放相同的元素，关于集合的体系结构如下图所示：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java29.png\" width=600></div>\n- 因为collection集合是接口不能直接使用，所以一般使用多态，将collection集合的对象转变为集合实现类的类型，如下：\n\n<pre><code>colletion &lt;String&gt; coll = new ArrayList&lt;&gt;();</code></pre>\n<ul>\n<li>collection集合定义了一些常用的公共的方法如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;   <span class=\"comment\">//向集合添加数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(E e)</span></span>;      <span class=\"comment\">//删除集合中的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;         <span class=\"comment\">//清空集合</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(E e)</span></span>;    <span class=\"comment\">//判断是否含有某个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;    <span class=\"comment\">//判断集合是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;    <span class=\"comment\">//获取集合的长度</span></span><br><span class=\"line\">Object[] toArray();      <span class=\"comment\">//将集合转换成数组</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"迭代器Iterator\"><a href=\"#迭代器Iterator\" class=\"headerlink\" title=\"迭代器Iterator\"></a>迭代器Iterator</h1><p>因为不同集合存储的数据类型可能不一样，所以对集合的存取元素的操作方法也不一样，为了方便统一，我们可以使用Iterator迭代器，它有着对集合的通用操作方法</p>\n<ul>\n<li><p>因为Iterator是一个接口，我们不能直接使用它，所以我们一般通过多态，先建立一个集合对象，然后通过集合对象来实现Iterator接口，建立一个对集合对象的迭代器：</p>\n<p>  Collection<String> coll = new LinkedList&lt;&gt;();<br>  Iterator<String> it = coll.iterator();</p>\n</li>\n<li><p>Iterator也有泛型，但是它必须和调用它的对象的泛型一致，所以Iterator的泛型可以省略不写，但是写上的话必须和集合对象保持一致</p>\n</li>\n<li><p>Iterator的常用方法<br>  1.boolean hasNext();<br>  这个方法用于判断集合中是否还有元素，有的话就返回true，使用方法如下:</p>\n<p>  Collection<String> coll = new LinkedList&lt;&gt;();<br>  coll.add(“a”);<br>  coll.add(“b”);<br>  Iterator it = coll.iterator();<br>  boolean b = it.hasNext();   //b=true</p>\n</li>\n</ul>\n<p>2.E next();<br>这个方法用于取出集合的第一个元素，使用方法如下：</p>\n<pre><code>Collection&lt;String&gt; coll = new LinkedList&lt;&gt;();\ncoll.add(&quot;a&quot;);\ncoll.add(&quot;b&quot;);\nIterator it = coll.iterator();\nString s = it.next();   //s=&quot;a&quot;</code></pre>\n<p>这两个方法都是重复的，所以我们一般是搭配循环来使用：</p>\n<pre><code>while(it.hasNext())\n&#123;\n    System.out.println(it.next());\n&#125;</code></pre>\n<ul>\n<li>iterator迭代器的原理：其实iterator就像一个指针，当创建集合的迭代器时，iterator指针会指向集合索引的-1位置，hasNext就是判断指针下一位是否存在元素，next方法就是将指针移向下一位，并获取指针指向的元素。所以iterator的操作并不会对集合本身产生影响</li>\n</ul>\n<h1 id=\"增强for循环\"><a href=\"#增强for循环\" class=\"headerlink\" title=\"增强for循环\"></a>增强for循环</h1><p>增强for循环时专门用来遍历数组和集合的，其使用方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//遍历数组</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历集合</span></span><br><span class=\"line\">Collection&lt;String&gt; coll = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">coll.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">coll.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String s : coll) &#123;</span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><p>当我们不知道使用什么数据类型时，就可以使用泛型</p>\n<ul>\n<li>含有泛型的类<br>定义含有泛型的类，可以方便我们不知道类的成员的类型的情况，其结构如下:<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericClass</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    E name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(E name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        GenericClass &lt;String&gt; gc = <span class=\"keyword\">new</span> GenericClass&lt;&gt;();</span><br><span class=\"line\">        gc.setName(<span class=\"string\">&quot;Tonm&quot;</span>);</span><br><span class=\"line\">        System.out.println(gc.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n在创建含有泛型的类的对象时，如果没有对泛型进行定义，那么默认为Object类型</li>\n<li>含有泛型的方法<br>在含有泛型的方法时，调用它时传递的参数是什么类型，泛型就时什么类型，如下所示：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericClass</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    E name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(E name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;M&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">typeOfM</span><span class=\"params\">(M m)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        GenericClass &lt;String&gt; gc = <span class=\"keyword\">new</span> GenericClass&lt;&gt;();</span><br><span class=\"line\">        gc.typeOfM(<span class=\"number\">1</span>);       <span class=\"comment\">//M为Interger类型</span></span><br><span class=\"line\">        gc.typeOfM(<span class=\"string\">&quot;string&quot;</span>);       <span class=\"comment\">//M为String类型</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>含有泛型的接口<br>含有泛型的接口定义有两种方式：</li>\n</ul>\n<p>1.在实现接口的类时定义接口的泛型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//含有泛型的接口定义</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GenericInterface</span> &lt;<span class=\"title\">I</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(I i)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericInterfaceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">GenericInterface</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123;   <span class=\"comment\">//泛型定义为String</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        GenericInterfaceImpl gi = <span class=\"keyword\">new</span> GenericInterfaceImpl();</span><br><span class=\"line\">        gi.method(<span class=\"string\">&quot;string&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>2.在创建泛型实现类的对象时定义泛型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericInterfaceImpl</span>&lt;<span class=\"title\">I</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">GenericInterface</span>&lt;<span class=\"title\">I</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(I i)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        GenericInterfaceImpl &lt;Integer&gt; gi = <span class=\"keyword\">new</span> GenericInterfaceImpl();</span><br><span class=\"line\">        gi.method(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>泛型通配符<br>当使用一个方法时的参数类型不确定时，可以使用泛型通配符？，可以接受任意类型的泛型，如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericClass</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printArray</span><span class=\"params\">(ArrayList&lt;?&gt; array)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        GenericClass &lt;String&gt; gc = <span class=\"keyword\">new</span> GenericClass&lt;&gt;();</span><br><span class=\"line\">        ArrayList &lt;String&gt; array1 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        array1.add(<span class=\"string\">&quot;str1&quot;</span>);</span><br><span class=\"line\">        array1.add(<span class=\"string\">&quot;arr2&quot;</span>);</span><br><span class=\"line\">        ArrayList &lt;Integer&gt; array2 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        array2.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        array2.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">        gc.printArray(array1);</span><br><span class=\"line\">        gc.printArray(array2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n使用类型通配符的好处呢就是，当定义一个方法时需要使用多次，并且每次使用时的类型都不一样，这时候就可以使用类型通配符</li>\n</ul>\n<h1 id=\"LinkedList集合\"><a href=\"#LinkedList集合\" class=\"headerlink\" title=\"LinkedList集合\"></a>LinkedList集合</h1><p>linkedList集合不同于ArrayList集合之处就在于ArrayList集合底层用数组实现，而LinkedList底层是用链表实现的，相比于ArrayList增删快，查找慢。LinkedList不建议使用多态进行创建，因为使用多态子类的特殊方法就无法使用，LinkedList的一些常用的特有方法如下：</p>\n<ul>\n<li>addFirst(E e);  addFirst方法就是在List的最前面插入一个元素，其作用等同于List的push方法</li>\n<li>addLast(E e);   addLast方法就是在List的最后面插入一个元素，其作用等同于add方法</li>\n<li>getFirst()；  getFirst方法就是获取List的最前面的一个元素</li>\n<li>getLast();    getLst方法就是获取List最后面的一个元素</li>\n<li>removeFirst();    removeFirst方法就是删除List最前面的一个元素，等同于pop方法</li>\n<li>removeLast();     removeLst方法就是删除List最后面的一个元素</li>\n</ul>\n<h1 id=\"HashSet集合\"><a href=\"#HashSet集合\" class=\"headerlink\" title=\"HashSet集合\"></a>HashSet集合</h1><p>HashSet集合实现了Set接口，其底层使用哈希表实现，优点是访问速度非常快，它有着和set集合一样的特点如下：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java30.png\" width=600></div>\n- 创建hashSet集合的方法如同List集合，使用多态或者直接创建都可以\n- HashSet集合的存储是无序的，并且不会储存相同的元素，如下所示：\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set &lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">set.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">set.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">set.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">set.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">System.out.println(set);      <span class=\"comment\">//set=[a,b,c]</span></span><br></pre></td></tr></table></figure>\n- set集合没有索引，所以遍历的时候需要使用iterator迭代器或者增强for循环：\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//iterator迭代器遍历</span></span><br><span class=\"line\">Iterator &lt;String&gt; it = set.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">    System.out.println(it.next());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//增强for循环遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (String s : set) &#123;</span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n## 哈希值\n哈希值是1个10进制的整数，是由操作系统给出来的对象的地址值，之歌地址值是逻辑地址值，而不是实际存放的物理地址。\n- 在Object类种，有获取对象哈希值的hashCode方法：private int native hashCode();native修饰词代表的是从操作系统中调用的方法。\n- Object的toString方法返回的最后一部分就是哈希值的16进制形式\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getClass().getName() + <span class=\"string\">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n- 许多类都重写了hashCode方法，如String类，当创建了2个字符串，其内容相等，则他们的哈希值也相同，Integer类也重写了hashCode方法，它的对象返回值就是它的整数大小\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">String s2 = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">System.out.println(s1.hashCode());   <span class=\"comment\">//96354</span></span><br><span class=\"line\">System.out.println(s2.hashCode());   <span class=\"comment\">//96354</span></span><br><span class=\"line\"></span><br><span class=\"line\">Integer s3 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">1</span>);</span><br><span class=\"line\">Integer s4 = <span class=\"keyword\">new</span> Integer(-<span class=\"number\">333</span>);</span><br><span class=\"line\">System.out.println(s3.hashCode());     <span class=\"comment\">//1</span></span><br><span class=\"line\">System.out.println(s4.hashCode());     <span class=\"comment\">// -333</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n## 哈希表\n- 哈希表 = 数组+链表 （老版本）\n- 哈希表 = 数组+红黑树   （新版本）  //红黑树是哈希表访问速度快的重要原因\n哈希表的工作原理就是先用数组存放哈希值，然后数组对应的哈希值之下存放集合数据，如下图所示：\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java31.png\" width=600></div>\n\n<h2 id=\"Set集合不能存放相同数据的原因\"><a href=\"#Set集合不能存放相同数据的原因\" class=\"headerlink\" title=\"Set集合不能存放相同数据的原因\"></a>Set集合不能存放相同数据的原因</h2><p>在Set集合中，调用add方法的同时会调用hashCode方法和equals方法，首先会对将要插入集合的对象调用hashcode方法获取其哈希值，然后调用equals方法将其与集合中的元素依次进行比较，如果都不相同，则将该元素放入集合中，相同则不进行放入操作</p>\n<h1 id=\"Collections工具类\"><a href=\"#Collections工具类\" class=\"headerlink\" title=\"Collections工具类\"></a>Collections工具类</h1><p>Collections工具类是对集合操作的一个工具类，其中具有很多操作集合的方法</p>\n<ul>\n<li>Collections.addAll(list,element…);<br>addAll方法可以一次性向集合中添加多个元素：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList &lt;String&gt; arraylist = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">Collections.addAll(arraylist,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">System.out.println(arraylist);   <span class=\"comment\">//[a,b,c]</span></span><br></pre></td></tr></table></figure></li>\n<li>Collections.shuffle(list);<br>shuffle方法可以将集合中的元素打乱：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList &lt;String&gt; arraylist = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">Collections.addAll(arraylist,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">System.out.println(arraylist);   <span class=\"comment\">//[a,b,c]</span></span><br><span class=\"line\">Collections.shuffle(arraylist);</span><br><span class=\"line\">System.out.println(arraylist);   <span class=\"comment\">//[b,c,a]</span></span><br></pre></td></tr></table></figure></li>\n<li>Collections.sort(list);<br>sort方法可以对集合中的元素进行排序,注意sort方法只可以对实现了comparable接口的类的集合使用：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Integer&gt; list1 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">Collections.addAll(list1,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">System.out.println(list1);     <span class=\"comment\">//[1,3,2,4]</span></span><br><span class=\"line\">Collections.sort(list1);</span><br><span class=\"line\">System.out.println(list1);     <span class=\"comment\">//[1,2,3,4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">ArrayList&lt;String&gt; list2 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">Collections.addAll(list2,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;c&quot;</span>,<span class=\"string\">&quot;d&quot;</span>,<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">System.out.println(list2);        <span class=\"comment\">//[a,c,d,b]</span></span><br><span class=\"line\">Collections.sort(list2);</span><br><span class=\"line\">System.out.println(list2);        <span class=\"comment\">//[a,b,c,d]</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"Map集合\"><a href=\"#Map集合\" class=\"headerlink\" title=\"Map集合\"></a>Map集合</h1><ul>\n<li>map集合在java.util.Map包下，用于保存具有映射关系的数据，是一个双列集合，一个元素包括两个值：key和value.</li>\n</ul>\n<p>1.map集合中的元素key和value的类型可以相同，也可以不同<br>2.map集合中的元素key不可以重复，但是value可以重复<br>3.map集合中的元素key和value一一对应</p>\n<ul>\n<li>HashMap底层以哈希表实现，查询速度快，但是存储的元素无序</li>\n<li>LinkedHashMap底层以哈希表和链表实现，是有序的集合</li>\n</ul>\n<h2 id=\"Map中的一些方法\"><a href=\"#Map中的一些方法\" class=\"headerlink\" title=\"Map中的一些方法\"></a>Map中的一些方法</h2><ul>\n<li>put(k,v);<br>put方法用于向集合中添加元素，输出将会以{k1=v1,k2=v2}的形式输出，同时put方法也有返回值，会返回key的value：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map &lt;String,String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;p1&quot;</span>,<span class=\"string\">&quot;p2&quot;</span>);</span><br><span class=\"line\">String v1 = map.put(<span class=\"string\">&quot;q1&quot;</span>,<span class=\"string\">&quot;q2&quot;</span>);</span><br><span class=\"line\">System.out.println(v1);         <span class=\"comment\">//null</span></span><br><span class=\"line\">System.out.println(map);        <span class=\"comment\">//&#123;q1=q2, p1=p2&#125;</span></span><br><span class=\"line\">String v2 = map.put(<span class=\"string\">&quot;p1&quot;</span>,<span class=\"string\">&quot;p3&quot;</span>);</span><br><span class=\"line\">System.out.println(v2);         <span class=\"comment\">//q2</span></span><br><span class=\"line\">System.out.println(map);        <span class=\"comment\">//&#123;q1=q2, p1=p3&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li>remove(k);<br>remove方法可以删除map集合中key为k的元素，并返回对应的value，如果没有则返回null<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = map.remove(<span class=\"string\">&quot;p1&quot;</span>);</span><br><span class=\"line\">System.out.println(s);       <span class=\"comment\">//p3</span></span><br><span class=\"line\">System.out.println(map);     <span class=\"comment\">//&#123;q1=q2&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li>get(k);<br>get方法用于查找map集合中key为k的value值并返回，没有则返回null<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String v = map.get(<span class=\"string\">&quot;q1&quot;</span>);</span><br><span class=\"line\">System.out.println(v);  <span class=\"comment\">//q3</span></span><br></pre></td></tr></table></figure></li>\n<li>containKey(k);<br>containKey用于查找map集合中是否含有key为k的元素：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean b1 = map.containsKey(<span class=\"string\">&quot;q1&quot;</span>);</span><br><span class=\"line\">Boolean b2 = map.containsKey(<span class=\"string\">&quot;p1&quot;</span>);</span><br><span class=\"line\">System.out.println(b1);    <span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(b2);    <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Map的遍历\"><a href=\"#Map的遍历\" class=\"headerlink\" title=\"Map的遍历\"></a>Map的遍历</h2></li>\n<li>使用KeySet方法将Map的key放置到set集合中，再通过getKey方法获取value<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map &lt;String,String&gt; map1 = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">map1.put(<span class=\"string\">&quot;k1&quot;</span>,<span class=\"string\">&quot;v1&quot;</span>);</span><br><span class=\"line\">map1.put(<span class=\"string\">&quot;k2&quot;</span>,<span class=\"string\">&quot;v2&quot;</span>);</span><br><span class=\"line\">map1.put(<span class=\"string\">&quot;k3&quot;</span>,<span class=\"string\">&quot;v3&quot;</span>);</span><br><span class=\"line\">Set &lt;String&gt; set = map1.keySet();</span><br><span class=\"line\">Iterator&lt;String&gt; it = set.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">String key = it.next();</span><br><span class=\"line\">System.out.println(map1.get(key));       </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//v1,v2,v3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用map获取字符串的字符出现次数\"><a href=\"#使用map获取字符串的字符出现次数\" class=\"headerlink\" title=\"使用map获取字符串的字符出现次数\"></a>使用map获取字符串的字符出现次数</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">numOfCharInString</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        String str = sc.next();</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap &lt;Character,Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> ch : str.toCharArray())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.containsKey(ch))&#123;</span><br><span class=\"line\">                Integer value = map.get(ch);</span><br><span class=\"line\">                value++;</span><br><span class=\"line\">                map.put(ch,value);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                map.put(ch,<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Character c : map.keySet())&#123;</span><br><span class=\"line\">            System.out.println(c+<span class=\"string\">&quot;:&quot;</span>+map.get(c));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "blog",
                "学习",
                "java"
            ]
        },
        {
            "id": "sunyuzero.top/2020/12/10/%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/",
            "url": "sunyuzero.top/2020/12/10/%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/",
            "title": "网络编程",
            "date_published": "2020-12-10T05:45:43.000Z",
            "content_html": "<h2 id=\"关于求解字符串中出现的次数最多的子序列问题\"><a href=\"#关于求解字符串中出现的次数最多的子序列问题\" class=\"headerlink\" title=\"关于求解字符串中出现的次数最多的子序列问题\"></a>关于求解字符串中出现的次数最多的子序列问题</h2><p>关于这类题目有一个简单求解算法，大概思路如下：</p>\n<p>首先来看看一个题目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">【问题描述】</span><br><span class=\"line\"></span><br><span class=\"line\">NOIP 复赛之前，HSD 桑进行了一项研究，发现人某条染色体上的一段 DNA 序列中连续的  个碱基组成的碱基序列与做题的 AC 率有关！于是他想研究一下这种关系。</span><br><span class=\"line\">现在给出一段 DNA 序列，请帮他求出这段 DNA 序列中所有连续  个碱基形成的碱基序列中，出现最多的一种的出现次数。</span><br><span class=\"line\"></span><br><span class=\"line\">【输入形式】</span><br><span class=\"line\"></span><br><span class=\"line\">两行，第一行为一段 DNA 序列，保证 DNA 序列合法，即只含有 A, G, C, T 四种碱基；</span><br><span class=\"line\">第二行为一个正整数 ，意义与题目描述相同。</span><br><span class=\"line\"></span><br><span class=\"line\">【输出形式】</span><br><span class=\"line\"></span><br><span class=\"line\">一行，一个正整数，为题目描述中所求答案。</span><br><span class=\"line\"></span><br><span class=\"line\">【样例输入】</span><br><span class=\"line\"></span><br><span class=\"line\">ACTCACTC</span><br><span class=\"line\">4</span><br><span class=\"line\"></span><br><span class=\"line\">【样例输出】</span><br><span class=\"line\"></span><br><span class=\"line\">2</span><br><span class=\"line\">【样例说明】</span><br><span class=\"line\"></span><br><span class=\"line\">对于这段 DNA 序列，连续的  个碱基组成的碱基序列为：ACTC, CTCA, TCAC 与 CACT。其中 ACTC 出现  次，其余均出现  次，所以出现最多的次数为 ，即为答案。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3>",
            "tags": [
                "blog",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/12/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "url": "sunyuzero.top/2020/12/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "title": "java正则表达式",
            "date_published": "2020-12-10T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> JAVA正则表达式 </font></center>\n\n<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><p>正则表达式，用于字符串的匹配，可以控制输入和输出，实现字符串的验证，查找和替换。</p>\n<h2 id=\"常见的正则表达式\"><a href=\"#常见的正则表达式\" class=\"headerlink\" title=\"常见的正则表达式\"></a>常见的正则表达式</h2><div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java16.png\" width=600></div>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java17.png\" width=600></div>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java18.png\" width=600></div>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java19.png\" width=600></div>\n\n<h2 id=\"对一些正则表达式的理解\"><a href=\"#对一些正则表达式的理解\" class=\"headerlink\" title=\"对一些正则表达式的理解\"></a>对一些正则表达式的理解</h2><ul>\n<li>限定符</li>\n</ul>\n<p>1.在正则表达式的规则中，. 表示 匹配除换行符 \\n 之外的任何单字符，<em>表示零次或多次,所以 .</em> 表示匹配任意字符匹配次或多次。<br>2. .* 可以匹配空字符，即开始和结尾字符中间可以没有字符，而使用 .+ 则必须保证匹配的字符串中间含有非空字符。<br>3.{n}表示出现n次，{n,}表示至少出现n次。</p>\n<ul>\n<li>贪婪匹配和懒惰匹配<br>&emsp;在正则表达式中，以？作为贪婪模式和懒惰模式的区别标志，例如：字符串为abaabc，懒惰模式使用“ a.*?b ”将会匹配从a开始b结束的最短字符，即ab；而贪婪模式“ a.*b ”，将会匹配从a开始b结束的最长字符串，即adaab。</li>\n</ul>\n<h2 id=\"正则表达式的应用\"><a href=\"#正则表达式的应用\" class=\"headerlink\" title=\"正则表达式的应用\"></a>正则表达式的应用</h2><p>1.要使用java的正则表达式，则需要使用到java.util.regex.*包下的Pattern类和Matcher类</p>\n<ul>\n<li>Pattern类：pattern对象就相当于一个模具，是正则表达式的编译表示</li>\n<li>Matcher类：matcher对象将模具和原材料进行匹配，即对输入字符串进行解释和匹配</li>\n</ul>\n<p>2.捕获组<br>捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。<br>捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：((A)(B(C))),(A),(B(C)),(C)</p>\n<h2 id=\"简单示例，判断字符串中是否包含特定字符串\"><a href=\"#简单示例，判断字符串中是否包含特定字符串\" class=\"headerlink\" title=\"简单示例，判断字符串中是否包含特定字符串\"></a>简单示例，判断字符串中是否包含特定字符串</h2><p>使用Pattern.matchs(pattern,string)来比较，返回boolean值,pattern为正则表达式，string为字符串 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String pattern = <span class=\"string\">&quot;.*java.*&quot;</span>;    <span class=\"comment\">//判断字符串中是否含有java</span></span><br><span class=\"line\">        String content = <span class=\"string\">&quot;java learning&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isMatch = Pattern.matches(pattern,content);    <span class=\"comment\">//返回true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"捕获组的应用：从给定字符串查找数字串\"><a href=\"#捕获组的应用：从给定字符串查找数字串\" class=\"headerlink\" title=\"捕获组的应用：从给定字符串查找数字串\"></a>捕获组的应用：从给定字符串查找数字串</h2><p>首先创建Pattern对象，然后通过pattern对象创建matcher对象，再使用matcher的group方法来对字符串分组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String pattern = <span class=\"string\">&quot;(\\\\D*)(\\\\d+)(.*)&quot;</span>;</span><br><span class=\"line\">        String content = <span class=\"string\">&quot;java learning 2020&quot;</span>;</span><br><span class=\"line\">        Pattern p = Pattern.compile(pattern);</span><br><span class=\"line\">        Matcher m = p.matcher(content);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m.find( )) &#123;</span><br><span class=\"line\">            System.out.println(m.group(<span class=\"number\">0</span>) ); <span class=\"comment\">//java learning 2020</span></span><br><span class=\"line\">            System.out.println(m.group(<span class=\"number\">1</span>) );  <span class=\"comment\">//java learning</span></span><br><span class=\"line\">            System.out.println(m.group(<span class=\"number\">2</span>) );  <span class=\"comment\">//2020</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NO MATCH&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对身份证的格式检测并捕获出生日期\"><a href=\"#对身份证的格式检测并捕获出生日期\" class=\"headerlink\" title=\"对身份证的格式检测并捕获出生日期\"></a>对身份证的格式检测并捕获出生日期</h2><p>首先对于身份证格式的验证，目前考虑的是身份证的位数和出生日期，所以使用的正则表达式为：(\\d{6}[2][0][0-1][0-9][0-1][0-9][0-3][0-9]\\d{3}[x])|\\d{6}[2][0][0-1][0-9][0-1][0-9][0-3][0-9]\\d{4}</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        testID_Card();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testID_Card</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String[] ID = &#123;<span class=\"string\">&quot;430422200110200048&quot;</span>,<span class=\"string\">&quot;43042220011025001x&quot;</span>,<span class=\"string\">&quot;1326465123123354222&quot;</span>&#125;;</span><br><span class=\"line\">        String regrex = <span class=\"string\">&quot;(\\\\d&#123;6&#125;[2][0][0-1][0-9][0-1][0-9][0-3][0-9]\\\\d&#123;3&#125;[x])&quot;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&quot;|\\\\d&#123;6&#125;[2][0][0-1][0-9][0-1][0-9][0-3][0-9]\\\\d&#123;4&#125;&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//改进的正则表达式，限定了7-14位的出生日期，添加了身份证最后一位为x的可能</span></span><br><span class=\"line\">        Pattern regular = Pattern.compile(regrex);</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ID.length; i++) &#123;</span><br><span class=\"line\">            Matcher matcher = regular.matcher(ID[i]);</span><br><span class=\"line\">            sb.append(ID[i]);</span><br><span class=\"line\">            sb.append(<span class=\"string\">&quot;  match : &quot;</span>);</span><br><span class=\"line\">            sb.append(matcher.matches());</span><br><span class=\"line\">            System.out.println(sb.toString());</span><br><span class=\"line\">            sb.delete(<span class=\"number\">0</span>, sb.length());</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matcher.matches())&#123;</span><br><span class=\"line\">                GetBirthDay(ID[i]);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;match false,and can not get birthday\\n&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">GetBirthDay</span><span class=\"params\">(String ID)</span> </span>&#123;</span><br><span class=\"line\">        String pattern1 = <span class=\"string\">&quot;(\\\\d&#123;6&#125;)(\\\\d&#123;8&#125;)(.*)&quot;</span>;</span><br><span class=\"line\">        Pattern BirthDayRegular = Pattern.compile(pattern1);</span><br><span class=\"line\">        String pattern2 = <span class=\"string\">&quot;(\\\\d&#123;4&#125;)(\\\\d&#123;2&#125;)(\\\\d&#123;2&#125;)&quot;</span>;</span><br><span class=\"line\">        Pattern YearMonthDayRegular = Pattern.compile(pattern2);</span><br><span class=\"line\">        Matcher matcher1 = BirthDayRegular.matcher(ID);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matcher1.matches()) &#123;</span><br><span class=\"line\">            Matcher matcher2 = YearMonthDayRegular</span><br><span class=\"line\">                    .matcher(matcher1.group(<span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (matcher2.matches()) &#123;</span><br><span class=\"line\">                StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                sb.append(<span class=\"string\">&quot;  出生日期为： &quot;</span>);</span><br><span class=\"line\">                sb.append(matcher2.group(<span class=\"number\">1</span>));</span><br><span class=\"line\">                sb.append(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">                sb.append(matcher2.group(<span class=\"number\">2</span>));</span><br><span class=\"line\">                sb.append(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">                sb.append(matcher2.group(<span class=\"number\">3</span>));</span><br><span class=\"line\">                System.out.println(sb.toString()+<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">                sb.delete(<span class=\"number\">0</span>,sb.length());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "blog",
                "学习",
                "java"
            ]
        },
        {
            "id": "sunyuzero.top/2020/12/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/",
            "url": "sunyuzero.top/2020/12/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/",
            "title": "网络编程",
            "date_published": "2020-12-10T05:45:43.000Z",
            "content_html": "<h1 id=\"网络编程\"><a href=\"#网络编程\" class=\"headerlink\" title=\"网络编程\"></a>网络编程</h1><p>网络编程，就是在一定的协议下，实现两台计算机的通信的程序。网络传输的TCP/IP协议如下：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java43.png\" width=600></div>\n\n<p>在java中，“java.net”包中包含提供低层次的通信细节的类和接口。我们可以直接使用这些类和接口，来专注于网络程序开发，而不用考虑通信的细节。<br>网络编程三要素：</p>\n<ul>\n<li>协议</li>\n</ul>\n<p>1.TCP 协议是一种面向连接的、可靠的协议<br>2.UDP 协议是一个不可靠的、无连接协议，主要使用于不需要对报文进行排序和流量控制的场合</p>\n<ul>\n<li>IP地址：指互联网协议地址，俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。假如我们把“个人电脑”比作“一台电话”的话，那么“IP地址”就相当于“电话号码”。</li>\n<li>端口号：网络的通信，本质上是两个进程（应用程序）的通信，端口号就可以唯一标识设备中的进程。端口号的范围为 0<del>65535，其中 0</del>1023 的端口号一般固定分配给一些服务。1024~65535的端口号供用户自定义服务使用。 </li>\n</ul>\n<h2 id=\"InetAddress类\"><a href=\"#InetAddress类\" class=\"headerlink\" title=\"InetAddress类\"></a>InetAddress类</h2><p>InetAdress类主要是用于对域名和IP地址相关的一些操作，常用的方法有：</p>\n<ul>\n<li>getByName(String s);        //获取Internet上主机的地址</li>\n<li>InetAddress.getLocalHost()；             //获取本地机的地址</li>\n<li>getHostName();                  //获取主机名</li>\n<li>getHostAddress()               //获取主机IP地址</li>\n<li>InetAddress.getByName(String DNS);       //通过域名获取主机对象</li>\n<li>InetAddress.getAllByName(String DNS)；      //通过域名获取主机的所有域名和IP地址<br>示例如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InetAddressTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> UnknownHostException </span>&#123;</span><br><span class=\"line\">        InetAddress localHost = InetAddress.getLocalHost();     <span class=\"comment\">//本地主机</span></span><br><span class=\"line\">        System.out.println(localHost.getHostName());            <span class=\"comment\">//主机名字:LAPTOP-8FII27QD</span></span><br><span class=\"line\">        System.out.println(localHost.getHostAddress());         <span class=\"comment\">//主机IP地址:192.168.137.1</span></span><br><span class=\"line\">        <span class=\"comment\">//通过域名获取主机</span></span><br><span class=\"line\">        InetAddress duHost = InetAddress.getByName(<span class=\"string\">&quot;www.baidu.com&quot;</span>);</span><br><span class=\"line\">        System.out.println(duHost.getHostName());     <span class=\"comment\">//域名：www.baidu.com</span></span><br><span class=\"line\">        System.out.println(duHost.getHostAddress());    <span class=\"comment\">//ip地址：36.152.44.95</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        InetAddress[] duHosts = InetAddress.getAllByName(<span class=\"string\">&quot;www.baidu.com&quot;</span>);</span><br><span class=\"line\">        System.out.println(Arrays.toString(duHosts));      <span class=\"comment\">//[www.baidu.com/36.152.44.95, www.baidu.com/36.152.44.96]</span></span><br><span class=\"line\">        <span class=\"comment\">//直接使用IP地址获取主机</span></span><br><span class=\"line\">        InetAddress remoteHost = InetAddress.getByName(<span class=\"string\">&quot;192.168.1.200&quot;</span>);</span><br><span class=\"line\">        System.out.println(remoteHost.getHostName());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Socket编程\"><a href=\"#Socket编程\" class=\"headerlink\" title=\"Socket编程\"></a>Socket编程</h2><p>在网络通讯中，第一次主动发起通讯的程序被称作客户端(Client)程序，简称客户端，而在第一次通讯中等待连接的程序被称作服务器端(Server)程序，简称服务器。</p>\n<ul>\n<li>Socket类：发送TCP消息。</li>\n<li>ServerSocket类：创建服务器</li>\n</ul>\n<p>套接字是一种进程间的数据交换机制。这些进程既可以在同一机器上，也可以在通过网络连接的不同机器上。 在客户端和服务器中，分别创建独立的Socket，并通过Socket的属性，将两个Socket进行连接，这样，客户端和服务器通过套接字所建立的连接使用输入输出流进行通信。</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java44.png\" width=600></div>\n\n<h3 id=\"Socket类\"><a href=\"#Socket类\" class=\"headerlink\" title=\"Socket类\"></a>Socket类</h3><p>Socket类实现客户端套接字，其构造方法如下：<br><code>Socket(String host, int port)</code> :创建套接字对象并将其连接到指定主机host上的指定端口号port。如果指定的host是null ，则相当于指定地址为回送地址。<br>Socket类的常用方法有：</p>\n<ul>\n<li>InputStream getInputStream()         //返回此套接字的输入流。</li>\n<li>OutputStream getOutputStream()       // 返回此套接字的输出流。</li>\n<li>void close()                         //关闭此套接字。</li>\n<li>void shutdownOutput()                // 禁用此套接字的输出流，任何先前写出的数据将被发送，随后终止输出流 </li>\n</ul>\n<p>注意事项：</p>\n<ul>\n<li>关闭生成的InputStream/OutputStream也将关闭相关的Socket</li>\n<li>如果此Scoket具有相关联的通道，则生成的OutputStream 的所有操作也关联该通道</li>\n<li>一旦一个socket被关闭，它不可再使用</li>\n<li>回送地址(127.0.0.1) 是本机回送地址，主要用于网络软件测试以及本地机进程间通信，无论什么程序，一旦使用回送地址发送数据，立即返回，不进行任何网络传输</li>\n</ul>\n<h3 id=\"ServerSocket类\"><a href=\"#ServerSocket类\" class=\"headerlink\" title=\"ServerSocket类\"></a>ServerSocket类</h3><p>ServerSocket类实现了服务器套接字，其构造方法示例如下：<br><code>ServerSocket server = new ServerSocket(4444)</code>    //参数为客户端端口号<br>ServerSocket用到的方法主要是：</p>\n<ul>\n<li>accept()       //一直阻塞直到建立连接</li>\n</ul>\n<h3 id=\"Socket编程的步骤\"><a href=\"#Socket编程的步骤\" class=\"headerlink\" title=\"Socket编程的步骤\"></a>Socket编程的步骤</h3><p>Socket编程的步骤：</p>\n<ul>\n<li>创建服务器ServerSocket对象，定义ServerSocket的监听端口，即构造方法传递的参数。      </li>\n<li>ServerSocket调用accept()方法，使之处于阻塞状态。      </li>\n<li>创建客户端Socket，并设置服务器的IP及端口。      </li>\n<li>客户端发出连接请求，建立连接。      </li>\n<li>分别取得服务器和客户端Socket的InputStream和OutputStream。      </li>\n<li>利用Socket和ServerSocket进行数据传输。      </li>\n<li>关闭流及Socket。</li>\n</ul>\n<p>TCP通信步骤：</p>\n<ol>\n<li>【服务端】启动,创建ServerSocket对象，定义ServerSocket的监听端口，等待连接。</li>\n<li>【客户端】启动,创建Socket对象，请求连接。</li>\n<li>【服务端】接收连接,调用accept方法，并返回一个Socket对象。</li>\n<li>【客户端】Socket对象，获取OutputStream，向服务端写出数据。</li>\n<li>【服务端】Scoket对象，获取InputStream，读取客户端发送的数据。</li>\n<li>【服务端】Socket对象，获取OutputStream，向客户端回写数据。</li>\n<li>【客户端】Scoket对象，获取InputStream，解析回写数据。</li>\n<li>【客户端】释放资源，断开连接。</li>\n</ol>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li>客户端向服务器发送数据：</li>\n</ul>\n<p>1.创建服务器，定义监听端口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStreamWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerSocketTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务端启动 , 等待连接 .... &quot;</span>);</span><br><span class=\"line\">        ServerSocket ss = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">6666</span>);</span><br><span class=\"line\">        Socket server = ss.accept();</span><br><span class=\"line\">        InputStream is = server.getInputStream();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = is.read(b);</span><br><span class=\"line\">        String msg = <span class=\"keyword\">new</span> String(b, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">        System.out.println(msg);</span><br><span class=\"line\">        is.close();</span><br><span class=\"line\">        server.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>2.创建客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStreamWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">socketTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端 发送数据&quot;</span>);</span><br><span class=\"line\">        Socket client = <span class=\"keyword\">new</span> Socket(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">6666</span>);</span><br><span class=\"line\">        OutputStream os = client.getOutputStream();</span><br><span class=\"line\">        os.write(<span class=\"string\">&quot;客户端向服务器发送的数据&quot;</span>.getBytes());</span><br><span class=\"line\">        os.close();</span><br><span class=\"line\">        client.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下，先创建服务器，然后客户端连接服务器向服务器发送了数据</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java46.png\" width=600></div>\n\n<ul>\n<li>服务器向客户端回写数据</li>\n</ul>\n<p>1.创建服务器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务端启动 , 等待连接 .... &quot;</span>);</span><br><span class=\"line\">        ServerSocket ss = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">4444</span>);</span><br><span class=\"line\">        Socket server = ss.accept();</span><br><span class=\"line\">        InputStream is = server.getInputStream();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = is.read(b);</span><br><span class=\"line\">        String msg = <span class=\"keyword\">new</span> String(b, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">        System.out.println(msg);</span><br><span class=\"line\">        OutputStream os = server.getOutputStream();</span><br><span class=\"line\">        os.write(<span class=\"string\">&quot;服务器向客户端发送的数据&quot;</span>.getBytes());</span><br><span class=\"line\">        <span class=\"comment\">// 7.关闭资源.</span></span><br><span class=\"line\">        os.close();</span><br><span class=\"line\">        is.close();</span><br><span class=\"line\">        server.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.创建客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientTets</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端:发送数据&quot;</span>);</span><br><span class=\"line\">        Socket client = <span class=\"keyword\">new</span> Socket(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">4444</span>);</span><br><span class=\"line\">        OutputStream os = client.getOutputStream();</span><br><span class=\"line\">        os.write(<span class=\"string\">&quot;客户端向服务器发送的数据&quot;</span>.getBytes());</span><br><span class=\"line\">        InputStream is = client.getInputStream();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = is.read(b);</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> String(b, <span class=\"number\">0</span>, len));</span><br><span class=\"line\">        is.close();</span><br><span class=\"line\">        os.close();</span><br><span class=\"line\">        client.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下，首先创建了服务器，然后创建客户端连接服务器，客户端先向服务器发送数据，然后服务器再回写客户端数据</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java45.png\" width=600></div>\n",
            "tags": [
                "blog",
                "学习",
                "java"
            ]
        },
        {
            "id": "sunyuzero.top/2020/12/10/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C&IO%E6%B5%81/",
            "url": "sunyuzero.top/2020/12/10/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C&IO%E6%B5%81/",
            "title": "java上课笔记",
            "date_published": "2020-12-10T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> JAVA文件操作&IO流 </font></center>\n\n\n<h1 id=\"java文件操作\"><a href=\"#java文件操作\" class=\"headerlink\" title=\"java文件操作\"></a>java文件操作</h1><h2 id=\"File类\"><a href=\"#File类\" class=\"headerlink\" title=\"File类\"></a>File类</h2><p>File类是对文件和文件夹操作的一个类，它有以下几个功能：</p>\n<ul>\n<li>创建文件/文件夹</li>\n<li>删除文件/文件夹</li>\n<li>查找文件/文件夹（判断是否存在）</li>\n<li>获取文件/文件夹</li>\n<li>遍历文件夹</li>\n<li>获取文件大小<br>由于不同操作系统的分隔符可能不同，所以File类有以下成员变量用于表示分隔符：</li>\n<li>默认名称分隔符：File.separatorr，即”&quot;</li>\n<li>默认路径分隔符：File.pathSeparator，即”;”</li>\n</ul>\n<h3 id=\"File类的创建\"><a href=\"#File类的创建\" class=\"headerlink\" title=\"File类的创建\"></a>File类的创建</h3><p>File的构造方法有三种：<br>一个参数：其参数是文件的路径，创建File的对象，其参数表示的文件可以不存在；<br>两个参数：前者表示父路径，后者表示子路径，组合起来表示文件路径；<br>两个参数：前者表示父类文件，后者表示子类文件；<br>当我们直接打印File对象时，将会打印出file的路径，即传递的参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file1 = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/IDEA/FileMode/1.txt&quot;</span>);</span><br><span class=\"line\">System.out.println(file1);       <span class=\"comment\">//D:\\IDEA\\FileMode\\1.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">File file2 = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/IDEA/FileMode/&quot;</span>，<span class=\"string\">&quot;1.txt&quot;</span>);</span><br><span class=\"line\">System.out.println(file2);       <span class=\"comment\">//D:\\IDEA\\FileMode\\1.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">File file3 = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/IDEA/FileMode/&quot;</span>);</span><br><span class=\"line\">File file4 = <span class=\"keyword\">new</span> File(file1,<span class=\"string\">&quot;1.txt&quot;</span>);</span><br><span class=\"line\">System.out.println(file4);       <span class=\"comment\">//D:\\IDEA\\FileMode\\1.txt </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"File类的方法\"><a href=\"#File类的方法\" class=\"headerlink\" title=\"File类的方法\"></a>File类的方法</h3><p>1.获取文件路径，名称，大小</p>\n<ul>\n<li>String getPath();          //获取文件路径</li>\n<li>String getName();          //获取文件名</li>\n<li>long length();             //获取文件大小<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/IDEA/FileMode/1.txt&quot;</span>);</span><br><span class=\"line\">System.out.println(file.getAbsolutePath());           <span class=\"comment\">//D:\\IDEA\\FileMode\\1.txt</span></span><br><span class=\"line\">System.out.println(file.getName());                  <span class=\"comment\">//1.txt</span></span><br><span class=\"line\">System.out.println(file.getAbsoluteFile());           <span class=\"comment\">//D:\\IDEA\\FileMode\\1.txt</span></span><br><span class=\"line\">System.out.println(file.getPath());                    <span class=\"comment\">//D:\\IDEA\\FileMode\\1.txt</span></span><br><span class=\"line\">System.out.println(file.length());                  <span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>2.判断文件类型及是否存在</p>\n<ul>\n<li>boolean exists();        //判断文件是否存在</li>\n<li>boolean isFile();        //判断文件是否位文件</li>\n<li>boolean isDirectory();        //判断文件是否为文件夹<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/IDEA/FileMode/1.txt&quot;</span>);</span><br><span class=\"line\">System.out.println(file.exists());              <span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(file.isFile());              <span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(file.isDirectory());         <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>3.创建，删除文件/文件夹（路径中的后缀无效，默认为名称）</p>\n<ul>\n<li>boolean createNewFile();        //创建新文件</li>\n<li>boolean delete();               //删除文件/文件夹</li>\n<li>boolean mkdir();                //创建单级目录</li>\n<li>boolean mkdirs();               //创建单级目录或多级目录<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file1 = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile/temp1.txt&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//创建文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!file1.exists()) file1.createNewFile();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;文件创建失败&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建单级文件夹</span></span><br><span class=\"line\">File file2 = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile/temp2&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!file2.exists()) file2.mkdirs();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (NullPointerException e) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;创建目录失败&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建多级文件夹</span></span><br><span class=\"line\">File file3 = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile/temp3/temp3_1/temp3_2&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!file3.exists()) file3.mkdirs();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (NullPointerException e) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;创建目录失败&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除文件和文件夹</span></span><br><span class=\"line\">file1.delete();</span><br><span class=\"line\">file2.delete();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>4.获取文件夹下所有文件及文件夹（路径必须为文件夹路径）</p>\n<ul>\n<li>String[] list();            //获取文件夹下所有文件和文件夹,返回字符串数组</li>\n<li>File[] listFiles();         //获取文件夹下所有文件和文件夹，返回文件数组<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile&quot;</span>);</span><br><span class=\"line\">String list[] = file.list();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(String s : list)&#123;</span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">File files[] = file.listFiles();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(File f : files)&#123;</span><br><span class=\"line\">    System.out.println(f.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"遍历多级目录查找目标文件\"><a href=\"#遍历多级目录查找目标文件\" class=\"headerlink\" title=\"遍历多级目录查找目标文件\"></a>遍历多级目录查找目标文件</h3><p>使用递归遍历目录即可，下面的代码演示了查找javaTestFile目录下的所有txt文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileTest_3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NullPointerException</span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile&quot;</span>);</span><br><span class=\"line\">        searchFile(file);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">searchFile</span><span class=\"params\">(File file)</span></span>&#123;</span><br><span class=\"line\">        File lists[] = file.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(File f : lists) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                searchFile(f);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.getName().endsWith(<span class=\"string\">&quot;txt&quot;</span>)) &#123;</span><br><span class=\"line\">                System.out.println(f.getPath());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"FileFilter——文件过滤器\"><a href=\"#FileFilter——文件过滤器\" class=\"headerlink\" title=\"FileFilter——文件过滤器\"></a>FileFilter——文件过滤器</h2><p>FileFilter，即文件过滤器，是java库中的一个接口，用于筛选文件，文件过滤器使用原理如下图所示：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java36.png\" width=600></div>\n使用方法为：\n- 创建子类实现FileFilter，重写accept方法定义过滤规则，然后将子类对象传递进listFile(FileFilterImpl ff)方法的参数中，示例如下：\n1.实现FileFilter，重写accept的规则为查找txt文件\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileFilterImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">FileFilter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File f)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f.isDirectory() || f.getName().endsWith(<span class=\"string\">&quot;txt&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n2.创建过滤器过滤文件\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FilenameFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileTest_3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NullPointerException</span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile&quot;</span>);</span><br><span class=\"line\">        searchFile(file);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">searchFile</span><span class=\"params\">(File file)</span></span>&#123;</span><br><span class=\"line\">        File lists[] = file.listFiles(<span class=\"keyword\">new</span> FileFilterImpl());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(File f : lists) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                searchFile(f);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.getName().endsWith(<span class=\"string\">&quot;txt&quot;</span>)) &#123;</span><br><span class=\"line\">                System.out.println(f.getPath());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n- 或者使用匿名内部类，下面以FileNameFilter，另一个文件过滤器(效果同FileFilter)示例：\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FilenameFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileTest_3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NullPointerException</span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile&quot;</span>);</span><br><span class=\"line\">        searchFile(file);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">searchFile</span><span class=\"params\">(File file)</span></span>&#123;</span><br><span class=\"line\">       File lists[] = file.listFiles(<span class=\"keyword\">new</span> FilenameFilter() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File dir, String name)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> File(dir,name).isDirectory() || name.endsWith(<span class=\"string\">&quot;txt&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(File f : lists) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                searchFile(f);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.getName().endsWith(<span class=\"string\">&quot;txt&quot;</span>)) &#123;</span><br><span class=\"line\">                System.out.println(f.getPath());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RandomAccessFile——随机读写文件\"><a href=\"#RandomAccessFile——随机读写文件\" class=\"headerlink\" title=\"RandomAccessFile——随机读写文件\"></a>RandomAccessFile——随机读写文件</h2><p>RandomAccessFile即可以读取文件内容，也可以向文件中写入内容，它包含了一个记录指针，用以标记当前读写处的位置，它的每次操作都是在指针所在处，所以它可以直接跳到文件的任意位置来读写数据。</p>\n<h3 id=\"RandomAccessFile的创建\"><a href=\"#RandomAccessFile的创建\" class=\"headerlink\" title=\"RandomAccessFile的创建\"></a>RandomAccessFile的创建</h3><p>&emsp;RandomAccessFile的构造方法有两个参数，第一个是文件，第二个是权限管理：“r” 只读；“rw” 可读可写；“rws” 可读可写，并要求对文件内容或元数据的每个更新都同步写入到底层设备；“rwd” 可读可写，并要求对文件内容每个更新都同步写入到底层设备。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">RandomAccessFile raf = <span class=\"keyword\">new</span> RandomAccessFile(file,<span class=\"string\">&quot;rw&quot;</span>);   <span class=\"comment\">//可读可写</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RandomAccessFile的方法及注意事项\"><a href=\"#RandomAccessFile的方法及注意事项\" class=\"headerlink\" title=\"RandomAccessFile的方法及注意事项\"></a>RandomAccessFile的方法及注意事项</h3><p>RandomAccessFile常用的方法如下：</p>\n<ul>\n<li>RandomAccessFile的read()和write()方法，同其他文件操作类</li>\n<li>long getFilePointer();      //返回文件记录指针的当前位置</li>\n<li>void seek(long pos);        //将文件记录指针定位到pos位置<br>注意事项：</li>\n<li>在seek方法中指针是从0~n-1的，所以当指针指向length，读取的值是-1</li>\n<li>用了RandomAccessFile的read方法后，指针会往后移动一个字符，而readline后会移动到下一行的开头，也就是再read就是下一行的开头第一字符。</li>\n</ul>\n<h3 id=\"RandomAccessFile实现在任意位置写文件和读文件\"><a href=\"#RandomAccessFile实现在任意位置写文件和读文件\" class=\"headerlink\" title=\"RandomAccessFile实现在任意位置写文件和读文件\"></a>RandomAccessFile实现在任意位置写文件和读文件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.RandomAccessFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RamdomAccessFileTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建readme.txt</span></span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile/Readme.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!file.exists()) &#123;</span><br><span class=\"line\">                file.createNewFile();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//创建RamdomAccess对象</span></span><br><span class=\"line\">            RandomAccessFile raf = <span class=\"keyword\">new</span> RandomAccessFile(file, <span class=\"string\">&quot;rw&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//写第一行和第二行</span></span><br><span class=\"line\">            String line1 = <span class=\"string\">&quot;line1&quot;</span>;</span><br><span class=\"line\">            String line2 = <span class=\"string\">&quot;line2&quot;</span>;</span><br><span class=\"line\">            raf.write(line1.getBytes());</span><br><span class=\"line\">            raf.write(<span class=\"string\">&quot;\\n&quot;</span>.getBytes());</span><br><span class=\"line\">            raf.write(line2.getBytes());</span><br><span class=\"line\">            <span class=\"comment\">//将指针移至第二行开始处</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(pos++ &lt; raf.length())&#123;</span><br><span class=\"line\">                raf.seek(pos);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(raf.read() == <span class=\"string\">&#x27;\\n&#x27;</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                pos++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            raf.seek(++pos);</span><br><span class=\"line\">            <span class=\"comment\">//读第二行内容</span></span><br><span class=\"line\">            String l2 = raf.readLine().toString();</span><br><span class=\"line\">            System.out.println(l2);</span><br><span class=\"line\">            <span class=\"comment\">//指针移至文件末尾</span></span><br><span class=\"line\">            String line3 = <span class=\"string\">&quot;line3&quot;</span>;</span><br><span class=\"line\">            raf.seek(raf.length());</span><br><span class=\"line\">            <span class=\"comment\">//追加内容写第三行</span></span><br><span class=\"line\">            raf.write(<span class=\"string\">&quot;\\n&quot;</span>.getBytes());</span><br><span class=\"line\">            raf.write(line3.getBytes());</span><br><span class=\"line\">            raf.close();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;读写异常&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"IO流\"><a href=\"#IO流\" class=\"headerlink\" title=\"IO流\"></a>IO流</h1><p>IO流，即输入输出流，表示数据在内存和硬盘之间的传输，Input输入流就是从硬盘读取数据到内存，output输出流就是从内存将数据存储到硬盘中</p>\n<ul>\n<li>输入流：即读取源中的数据，输出流：传送数据到目的地<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java35.png\" width=600></div></li>\n<li>字节输入流：InputStream抽象类的子类创建的流对象<br>InputStream类提供的read方法以字节为单位顺序地读取源中的数据，直到源的末尾或输入流被关闭</li>\n<li>字节输出流：OutputStream抽象类的子类创建的流对象<br>OutputStream的write方法以字节为单位顺序地写文件，直到流被关闭</li>\n<li>字符输入流：Reader抽象类的子类创建的流对象</li>\n<li>字符输出流：Writer抽象类的子类创建的流对象</li>\n</ul>\n<h2 id=\"OutputStream字节输出流\"><a href=\"#OutputStream字节输出流\" class=\"headerlink\" title=\"OutputStream字节输出流\"></a>OutputStream字节输出流</h2><p>OutputStream是所有输出流的超类，有以下方法供所有输出流使用：</p>\n<ul>\n<li>void close();          //关闭流</li>\n<li>void flush();          //刷新流，写出所有缓冲字节</li>\n<li>void write(byte b[]);             //以字节数组写入</li>\n<li>void write(byte b[],int offset,int len);         //写入b[offset]~b[len]的字节</li>\n<li>void write(int b)             //写入字节b</li>\n</ul>\n<h2 id=\"FileOutputStream——文件字节输出流\"><a href=\"#FileOutputStream——文件字节输出流\" class=\"headerlink\" title=\"FileOutputStream——文件字节输出流\"></a>FileOutputStream——文件字节输出流</h2><p>FileOutputStream是文件字节输出流，用于把内存数据写入到硬盘中</p>\n<h3 id=\"FileOutputStream的创建\"><a href=\"#FileOutputStream的创建\" class=\"headerlink\" title=\"FileOutputStream的创建\"></a>FileOutputStream的创建</h3><p>FileOutputStream有构造方法有3种形式，都需要抛出FileNotFoundException：</p>\n<ol>\n<li>FileOutputStream(File file);             //创建文件输出流以写入由指定的 File对象表示的文件。 </li>\n<li>FileOutputStream(String name);           //创建文件输出流以路径写入文件。  </li>\n<li>FileOutputStream(File file,boolean append)；     //同上，第二个参数有true和false两种形式，若为true，则表示将字节将写入文件的末尾而不是开头，为false则表示写入文件开头，即覆盖原内容<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> IOlearining;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileOutputStreamTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        File file1 = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile/1.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            FileOutputStream fos1 = <span class=\"keyword\">new</span> FileOutputStream(file1);</span><br><span class=\"line\">            FileOutputStream fos2 = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;D:/javaTestFile/2.txt&quot;</span>);</span><br><span class=\"line\">            FileOutputStream fos3 = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;D:/javaTestFile/3.txt&quot;</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (FileNotFoundException e)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;文件未找到&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"FileOutputStream的使用\"><a href=\"#FileOutputStream的使用\" class=\"headerlink\" title=\"FileOutputStream的使用\"></a>FileOutputStream的使用</h3></li>\n</ol>\n<ul>\n<li>写数据，write方法演示：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile/1.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        FileOutputStream fos =<span class=\"keyword\">new</span> FileOutputStream(file,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        fos.write(<span class=\"number\">46</span>);                      <span class=\"comment\">//ASCII编码，46对应“.&quot;</span></span><br><span class=\"line\">        fos.write(<span class=\"string\">&quot;\\n&quot;</span>.getBytes());           <span class=\"comment\">//换行  </span></span><br><span class=\"line\">        fos.write(<span class=\"string\">&quot;abc&quot;</span>.getBytes());           <span class=\"comment\">//写入abc</span></span><br><span class=\"line\">         fos.write(<span class=\"string\">&quot;\\n&quot;</span>.getBytes());          <span class=\"comment\">//换行</span></span><br><span class=\"line\">        fos.write(<span class=\"string\">&quot;defg&quot;</span>.getBytes(),<span class=\"number\">1</span>,<span class=\"number\">2</span>);         <span class=\"comment\">//写入ef</span></span><br><span class=\"line\">        fos.close();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (FileNotFoundException e)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;文件未找到&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;写文件异常&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li>注意FileOutputStream是字节流，将文本按字节写入文件，而一个汉字是两个字节，无法一次写入，直接写入中文就会出现乱码，可以使用OutputStreamWriter将字节流转换为字符流写入：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileOutputStream fos =<span class=\"keyword\">new</span> FileOutputStream(file,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">OutputStreamWriter osw = <span class=\"keyword\">new</span> OutputStreamWriter(fos,<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">osw.append(<span class=\"string\">&quot;中文输入&quot;</span>);            <span class=\"comment\">//写入成功，没有乱码</span></span><br><span class=\"line\">osw.close();</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"ByteArrayOutputStream——字节数组输出流\"><a href=\"#ByteArrayOutputStream——字节数组输出流\" class=\"headerlink\" title=\"ByteArrayOutputStream——字节数组输出流\"></a>ByteArrayOutputStream——字节数组输出流</h2><p>ByteArrayOutputStream在内存中创建一个字节数组缓冲区，所有发送到输出流的数据保存在该字节数组缓冲区中，写入到文件等其他outputStream</p>\n<h3 id=\"ByteArrayOutputStream的创建\"><a href=\"#ByteArrayOutputStream的创建\" class=\"headerlink\" title=\"ByteArrayOutputStream的创建\"></a>ByteArrayOutputStream的创建</h3><p>ByteArrayOutputStream有2个构造方法：</p>\n<ul>\n<li>ByteArrayOutputStream bops = new ByteArrayOutputStream();   //无参数默认缓冲大小为32</li>\n<li>ByteArrayOutputStream bops = new ByteArrayOutputStream(int size);   //设置缓冲大小为size</li>\n</ul>\n<h3 id=\"ByteArrayOutputStream的使用\"><a href=\"#ByteArrayOutputStream的使用\" class=\"headerlink\" title=\"ByteArrayOutputStream的使用\"></a>ByteArrayOutputStream的使用</h3><p>ByteArrayOutputStream的方法如下：</p>\n<ul>\n<li>3个继承于OutputStream的write方法，使用相同</li>\n<li>writeTo(OutputStream os);    //将此字节数组输出流的全部内容写入到指定的输出流参数中。</li>\n<li>toString();      //将缓冲区的内容转换为字符串</li>\n<li>toByteArray();      //复制输出流的字节数组内容</li>\n<li>size();            //返回缓冲区大小</li>\n<li>reset();         //重置字节输出流，清除存储的数据</li>\n</ul>\n<p>示例：获取字符串，将除空格以外的数据写入流中并输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test_02;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SkipWhiteSpaceOutputStream</span> <span class=\"keyword\">extends</span> <span class=\"title\">ByteArrayOutputStream</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">putSkipWhitespaceString</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span> b[] = str.getBytes();</span><br><span class=\"line\">            ByteArrayOutputStream bops = <span class=\"keyword\">new</span> ByteArrayOutputStream(<span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; b.length ; i++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((<span class=\"keyword\">char</span>)b[i] != <span class=\"string\">&#x27; &#x27;</span>) bops.write(b[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String out = bops.toString();</span><br><span class=\"line\">            System.out.println(out);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        String str;</span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        str = sc.nextLine();</span><br><span class=\"line\">        SkipWhiteSpaceOutputStream swops = <span class=\"keyword\">new</span> SkipWhiteSpaceOutputStream();</span><br><span class=\"line\">        swops.putSkipWhitespaceString(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java37.png\" width=600></div>\n\n<h2 id=\"BufferedOutputStream——字节缓冲输出流\"><a href=\"#BufferedOutputStream——字节缓冲输出流\" class=\"headerlink\" title=\"BufferedOutputStream——字节缓冲输出流\"></a>BufferedOutputStream——字节缓冲输出流</h2><p>BufferedOutputStream字节缓冲输出流，使用缓存流将数据写入文件,使用BufferedOutputStream的好处就是能够提高效率：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java38.png\" width=600></div>\n\n<h3 id=\"BufferedOutputStream的构造\"><a href=\"#BufferedOutputStream的构造\" class=\"headerlink\" title=\"BufferedOutputStream的构造\"></a>BufferedOutputStream的构造</h3><p>BufferedOutputStream有2种构造方法：</p>\n<ul>\n<li>BufferedOutputStream(OutputStream os);           //构造一个字节缓冲输出流对象</li>\n<li>BufferedOutputStream(OutputStream os，int size);        //指定size缓冲区大小构造缓冲输出流对象</li>\n</ul>\n<h3 id=\"BufferedOutputStream的使用\"><a href=\"#BufferedOutputStream的使用\" class=\"headerlink\" title=\"BufferedOutputStream的使用\"></a>BufferedOutputStream的使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> IOlearining;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BufferdTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;D:/javaTestFile/1.txt&quot;</span>);</span><br><span class=\"line\">        BufferedOutputStream bos = <span class=\"keyword\">new</span> BufferedOutputStream(fos);</span><br><span class=\"line\">        bos.write(<span class=\"number\">97</span>);</span><br><span class=\"line\">        bos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Inputstream字节输入流\"><a href=\"#Inputstream字节输入流\" class=\"headerlink\" title=\"Inputstream字节输入流\"></a>Inputstream字节输入流</h2><p>InputStream是所有输入流的超类，有以下方法供所有输入流使用：</p>\n<ul>\n<li>void close();          //关闭流</li>\n<li>void read();             //读取数据的下一个字节</li>\n<li>void read(byte b[]);         //读取数据，大小为b的大小</li>\n</ul>\n<h2 id=\"FileInputStream——文件输入流\"><a href=\"#FileInputStream——文件输入流\" class=\"headerlink\" title=\"FileInputStream——文件输入流\"></a>FileInputStream——文件输入流</h2><p>FileInputStream类是文件输入流，从文件中读取字节。</p>\n<h3 id=\"FileInputStream的构建\"><a href=\"#FileInputStream的构建\" class=\"headerlink\" title=\"FileInputStream的构建\"></a>FileInputStream的构建</h3><p>类似于FileOutputStream，FileInputStream也有2种构造方法，且需要抛出FileNotFoundException异常：</p>\n<ul>\n<li>FileInputStream(File file)： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的file命名。</li>\n<li>FileInputStream(String name)： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名命名。  </li>\n</ul>\n<h3 id=\"FileInputStream的使用\"><a href=\"#FileInputStream的使用\" class=\"headerlink\" title=\"FileInputStream的使用\"></a>FileInputStream的使用</h3><ul>\n<li>读取字节数据read()方法,需要抛出IOException异常：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> IOlearining;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileInputStreamTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException,FileNotFoundException </span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile/1.txt&quot;</span>);</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((i=fis.read())!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            System.out.print((<span class=\"keyword\">char</span>)i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>read(byte[] b)方法，需要抛出IOException异常,注意需要注意有效位，因为是将数据传入byte数组并覆盖，若数据位数不足，会导致byte数组没有被替换完全，如下所示：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> IOlearining;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileInputStreamTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">&quot;D:/javaTestFile/1.txt&quot;</span>); <span class=\"comment\">// 文件中为abcde</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len ;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((len= fis.read(b))!=-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"keyword\">new</span> String(b));   <span class=\"comment\">//错误，最后一次会输出de，因为最后一次只有1个数据，所以byte数组中的数据d没有被替换</span></span><br><span class=\"line\">            System.out.println(<span class=\"keyword\">new</span> String(b,<span class=\"number\">0</span>,len));   <span class=\"comment\">//  正确写法，len 每次读取的有效字节个数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>同样的，FileInputStream的read方法只能读取一个字节，不能读取汉字，否则会乱码，可以使用InputStreamWriter将字节流转换为字符流写入：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> IOlearining;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileInputStreamTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException,FileNotFoundException </span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile/1.txt&quot;</span>);</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">        InputStreamReader isr = <span class=\"keyword\">new</span> InputStreamReader(fis,<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((i=isr.read())!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            System.out.print((<span class=\"keyword\">char</span>)i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        isr.close();</span><br><span class=\"line\">        fis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"直接采用文件输入输出流复制文件\"><a href=\"#直接采用文件输入输出流复制文件\" class=\"headerlink\" title=\"直接采用文件输入输出流复制文件\"></a>直接采用文件输入输出流复制文件</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> IOlearining;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CopyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">&quot;C:\\\\Users\\\\zycjj\\\\Pictures\\\\1.jpg&quot;</span>);</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;D:/javaTestFile/1.jpg&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span> b[] = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((len=fis.read())!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            fos.write(b,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fis.close();</span><br><span class=\"line\">        fos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"字符流\"><a href=\"#字符流\" class=\"headerlink\" title=\"字符流\"></a>字符流</h2><p>字符流不同于字节流的地方就是，流中的数据是以字符形式传递，所以流数据是中文也不会乱码</p>\n<h3 id=\"Reader——字符输入流\"><a href=\"#Reader——字符输入流\" class=\"headerlink\" title=\"Reader——字符输入流\"></a>Reader——字符输入流</h3><p>Reader是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法：</p>\n<ul>\n<li>void close()；           ///关闭此流并释放与此流相关联的任何系统资源。    </li>\n<li>int read()；            //从输入流读取一个字符。 </li>\n<li>int read(char[] c)；         //从输入流中读取一些字符，并将它们存储到字符数组中 。<br>字符输入流Reader的使用完全类似于字节输入流，如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReaderTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">           FileReader fr = <span class=\"keyword\">new</span> FileReader(<span class=\"string\">&quot;D:/javaTestFile/1.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len ；</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] c= <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((len = fr.read(c))!=-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"keyword\">new</span> String(c,<span class=\"number\">0</span>,len));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fr.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Writer——字符输出流\"><a href=\"#Writer——字符输出流\" class=\"headerlink\" title=\"Writer——字符输出流\"></a>Writer——字符输出流</h3><p>Writer是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法：</p>\n<ul>\n<li>void write(int c)          // 写入单个字符。</li>\n<li>void write(char[] c)        //写入字符数组。 </li>\n<li>void write(char[] c, int off, int len)       //写入字符数组的某一部分,off数组的开始索引,len写的字符个数。 </li>\n<li>void write(String str)        //写入字符串。 </li>\n<li>void write(String str, int off, int len)           //写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li>\n<li>void flush()          //刷新该流的缓冲。  </li>\n<li>void close()          //关闭此流，但要先刷新它。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> IOlearining;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileWriterTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class=\"line\">        FileWriter fw =<span class=\"keyword\">new</span> FileWriter(<span class=\"string\">&quot;D:/javaTestFile/1.txt&quot;</span>);</span><br><span class=\"line\">        fw.write(<span class=\"string\">&quot;字符串&quot;</span>);       <span class=\"comment\">//写字符串</span></span><br><span class=\"line\">        fw.write(<span class=\"string\">&quot;\\n&quot;</span>);           <span class=\"comment\">//写字符串</span></span><br><span class=\"line\">        fw.write(<span class=\"string\">&#x27;c&#x27;</span>);           <span class=\"comment\">//写字符</span></span><br><span class=\"line\">        fw.write(<span class=\"string\">&#x27;\\n&#x27;</span>);          <span class=\"comment\">//写字符</span></span><br><span class=\"line\">        fw.write(<span class=\"number\">97</span>);            <span class=\"comment\">//写字节</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> c[] = <span class=\"string\">&quot;字符数组&quot;</span>.toCharArray();</span><br><span class=\"line\">        fw.write(c);                <span class=\"comment\">//写字符数组</span></span><br><span class=\"line\">        fw.close();            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"采用缓存输入输出流，使用Writer和reader复制文件\"><a href=\"#采用缓存输入输出流，使用Writer和reader复制文件\" class=\"headerlink\" title=\"采用缓存输入输出流，使用Writer和reader复制文件\"></a>采用缓存输入输出流，使用Writer和reader复制文件</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test_03;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取目录下的所有文件</span></span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile&quot;</span>);</span><br><span class=\"line\">        File files[] = file.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建新文件夹</span></span><br><span class=\"line\">            File newDir = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/tmp&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!newDir.exists()) &#123;</span><br><span class=\"line\">            newDir.mkdir();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (files[i].isFile() &amp;&amp; files[i].getName().endsWith(<span class=\"string\">&quot;txt&quot;</span>)) &#123;  <span class=\"comment\">//筛选txt文件</span></span><br><span class=\"line\">                System.out.println(files[i].getName());</span><br><span class=\"line\">                <span class=\"comment\">//复制txt文件</span></span><br><span class=\"line\">                File objFile = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/tmp&quot;</span>,files[i].getName());</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!objFile.exists()) &#123;</span><br><span class=\"line\">                    objFile.createNewFile();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//读取源文件内容</span></span><br><span class=\"line\">                Reader fr = <span class=\"keyword\">new</span> FileReader(files[i]);</span><br><span class=\"line\">                BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(fr);</span><br><span class=\"line\">                String str;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//复制源文件内容</span></span><br><span class=\"line\">                FileWriter fw = <span class=\"keyword\">new</span> FileWriter(objFile);</span><br><span class=\"line\">                BufferedWriter bw = <span class=\"keyword\">new</span> BufferedWriter(fw);</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((str = br.readLine()) != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        bw.write(str);</span><br><span class=\"line\">                        bw.newLine();</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;写文件失败&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                bw.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;文件未找到&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;读写错误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Properties类\"><a href=\"#Properties类\" class=\"headerlink\" title=\"Properties类\"></a>Properties类</h2><p>Properties类，主要用于配置读取Java的配置文，原理类似于Map，是以键值对的形式进行参数配置的。<br>它有几个常用方法：</p>\n<ul>\n<li>getProperty ( String key)          //用指定的键在此属性列表中搜索属性</li>\n<li>list(PrintStream out)              //将此属性列表打印到指定的输出流</li>\n<li>load ( InputStream inStream)       //从输入流中读取属性列表（键和元素对）</li>\n<li>setProperty ( String key, String value)       //同put方法</li>\n<li>store ( OutputStream out, String comments)    //将此 Properties 表中的属性列表（键和元素对）写入输出流</li>\n<li>Set<String> stringPropertyNames() ` ：所有键的名称的集合。</li>\n<li>void clear ()         // 清除所有装载的 键 - 值对。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> IOlearining;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProportyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile/1.proporties&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//配置</span></span><br><span class=\"line\">        Properties pro = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        pro.setProperty(<span class=\"string\">&quot;font-size&quot;</span>,<span class=\"string\">&quot;15px&quot;</span>);</span><br><span class=\"line\">        pro.setProperty(<span class=\"string\">&quot;font-color&quot;</span>,<span class=\"string\">&quot;black&quot;</span>);</span><br><span class=\"line\">        System.out.println(pro.getProperty(<span class=\"string\">&quot;font-size&quot;</span>));        <span class=\"comment\">//15px</span></span><br><span class=\"line\">        System.out.println(pro.getProperty(<span class=\"string\">&quot;font-color&quot;</span>));       <span class=\"comment\">//black</span></span><br><span class=\"line\">        Set&lt;String&gt; setPro = pro.stringPropertyNames();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String key : setPro)&#123;</span><br><span class=\"line\">            System.out.println(key + <span class=\"string\">&quot; : &quot;</span> + pro.getProperty(key));</span><br><span class=\"line\">            <span class=\"comment\">//依次输出：font-color : black      font-size : 15px</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将配置存储到文件中</span></span><br><span class=\"line\">        pro.store(<span class=\"keyword\">new</span> FileOutputStream(file),<span class=\"string\">&quot;文件注释&quot;</span>);</span><br><span class=\"line\">        pro.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "学习",
                "java"
            ]
        },
        {
            "id": "sunyuzero.top/2020/12/08/java%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/",
            "url": "sunyuzero.top/2020/12/08/java%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/",
            "title": "java上课笔记",
            "date_published": "2020-12-08T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> java课程笔记 </font></center>\n\n<h1 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h1><p>异常就是程序运行时发生的不正常情况，如打开一个不存在的文件，与错误不同（代码错误），异常一般分为两大类：</p>\n<ul>\n<li>Error:由于java虚拟机的限制而产生的程序错误，一般无法解决。如：JVM系统内部错误、资源耗尽等严重情况。</li>\n<li>Exception: 其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理<br>Error和Exception包含如下：<div align=center> <img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java34.png\" width=600></div>\n## 异常处理</li>\n<li>Java采用抓抛模型catch-throw异常处理机制，将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简洁，易于维护。</li>\n<li>异常对象的生成两种方式</li>\n</ul>\n<p>1.由虚拟机自动生成：程序运行过程中，虚拟机检测到程序发生了问题，如果在当前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例对象并抛出——自动抛出<br>2.由开发人员手动创建：创建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样</p>\n<ul>\n<li>捕获异常<br>当一个方法抛出异常时，如果没有实现异常处理，会一直向上寻找异常解决方法，如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。</li>\n<li>选择处理异常<br>如果这些异常是运行时异常，则方法的调用者有3种选择：<br>（1）不理会这些声明，编译可以通过；<br>（2）使用try…catch处理异常；<br>（3）使用throws继续延迟处理<br>如果是非运行时异常，方法调用者有两种选择：<br>（1）使用try…catch处理异常；<br>（2）使用throws继续延迟处理，让编译先通过。</li>\n</ul>\n<h2 id=\"try——catch捕获异常\"><a href=\"#try——catch捕获异常\" class=\"headerlink\" title=\"try——catch捕获异常\"></a>try——catch捕获异常</h2><ul>\n<li>try-catch语句<br>在try语句块中，放置可能出现异常的代码。在catch语句块中是对异常对象进行处理的代码。当try中的保护代码块发生异常时，如果catch块中声明了该异常，异常将会被传递到catch块中。</li>\n<li>每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。</li>\n<li>如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可以用其父类作为catch的参数，但是参数不能是与已知异常无关的异常类，否则将不会执行</li>\n<li>try-catch-finally语句<br>try-catch-finally语句就是在try-catch语句的基础上，加上finally代码块，finally代码块是无论是否发生异常都会被执行</li>\n</ul>\n<h2 id=\"throw和throws\"><a href=\"#throw和throws\" class=\"headerlink\" title=\"throw和throws\"></a>throw和throws</h2><p>当程序没有使用try-catch语句捕获异常时，就需要用到throw和throws关键字</p>\n<ul>\n<li>throws关键字<br>&emsp;throws关键字（必须在定义方法的时候使用），用于声明该方法可能会抛出的异常类型，一般用于不知道该怎么处理异常时，放任其不管，当有异常抛出时会中断该方法，而异常被抛到这个方法的调用者那里。<br>&emsp;使用throws关键字明确指出了该方法可能抛出的异常。throws后面如果声明多个异常类型，之间可用“,”分隔</li>\n<li>throw关键字<br>当创建一个异常对象之后，可以使用throw关键字抛出异常对象。throw必须在方法体中使用。<br>手动抛出异常但是有时候有些错误在jvm看来不是错误，所以我们需要自己手动引发异常，这就是throw的作用，例如：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(age&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">         Exception e = <span class=\"keyword\">new</span> ArithmeticException(“年龄不能为负”)；</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>注意重写方法不能抛出比被重写方法范围更大的异常类型：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">methodA</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">      ……</span><br><span class=\"line\">&#125;  &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B1</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">methodA</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> FileNotFoundException </span>&#123;</span><br><span class=\"line\">      ……</span><br><span class=\"line\">&#125;  &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B2</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">methodA</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;   <span class=\"comment\">//报错,抛出的异常类型比父类异常类型大</span></span><br><span class=\"line\">        ……</span><br><span class=\"line\">&#125;  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"人工抛出异常\"><a href=\"#人工抛出异常\" class=\"headerlink\" title=\"人工抛出异常\"></a>人工抛出异常</h2>Java异常类对象除在程序执行过程中出现异常时由系统自动生成并抛出，也可根据需要人工创建并抛出。</li>\n<li>人工抛出异常，首先要生成异常类对象，然后通过throw语句实现抛出操作，注意，可抛出的异常必须是Throwable或其子类的实例。</li>\n<li>自定义异常类<br>自定义异常类是包括人工抛出异常的自定义类：</li>\n</ul>\n<p>1.一般地，用户自定义异常类都是RuntimeException的子类。<br>2.自定义异常类通常需要编写几个重载的构造器。<br>3.自定义的异常类对象通过throw抛出。<br>4.自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。<br>5.用户自己的异常类必须继承现有的异常类</p>\n<h1 id=\"java文件操作\"><a href=\"#java文件操作\" class=\"headerlink\" title=\"java文件操作\"></a>java文件操作</h1><h2 id=\"流\"><a href=\"#流\" class=\"headerlink\" title=\"流\"></a>流</h2><ul>\n<li>输入流：即读取源中的数据，输出流：传送数据到目的地<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java35.png\" width=600></div></li>\n<li>字节输入流：InputStream抽象类的子类创建的流对象<br>InputStream类提供的read方法以字节为单位顺序地读取源中的数据，直到源的末尾或输入流被关闭</li>\n<li>字节输出流：OutputStream抽象类的子类创建的流对象<br>OutputStream的write方法以字节为单位顺序地写文件，直到流被关闭</li>\n<li>字符输入流：Reader抽象类的子类创建的流对象</li>\n<li>字符输出流：Writer抽象类的子类创建的流对象</li>\n</ul>\n<h2 id=\"File类\"><a href=\"#File类\" class=\"headerlink\" title=\"File类\"></a>File类</h2><p>File类是对文件和文件夹操作的一个类，它有以下几个功能：</p>\n<ul>\n<li>创建文件/文件夹</li>\n<li>删除文件/文件夹</li>\n<li>查找文件/文件夹（判断是否存在）</li>\n<li>获取文件/文件夹</li>\n<li>遍历文件夹</li>\n<li>获取文件大小<br>由于不同操作系统的分隔符可能不同，所以File类有以下成员变量用于表示分隔符：</li>\n<li>默认名称分隔符：File.separatorr，即”&quot;</li>\n<li>默认路径分隔符：File.pathSeparator，即”;”</li>\n</ul>\n<h3 id=\"File类的创建\"><a href=\"#File类的创建\" class=\"headerlink\" title=\"File类的创建\"></a>File类的创建</h3><p>File的构造方法有三种：<br>一个参数：其参数是文件的路径，创建File的对象，其参数表示的文件可以不存在；<br>两个参数：前者表示父路径，后者表示子路径，组合起来表示文件路径；<br>两个参数：前者表示父类文件，后者表示子类文件；<br>当我们直接打印File对象时，将会打印出file的路径，即传递的参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file1 = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/IDEA/FileMode/1.txt&quot;</span>);</span><br><span class=\"line\">System.out.println(file1);       <span class=\"comment\">//D:\\IDEA\\FileMode\\1.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">File file2 = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/IDEA/FileMode/&quot;</span>，<span class=\"string\">&quot;1.txt&quot;</span>);</span><br><span class=\"line\">System.out.println(file2);       <span class=\"comment\">//D:\\IDEA\\FileMode\\1.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">File file3 = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/IDEA/FileMode/&quot;</span>);</span><br><span class=\"line\">File file4 = <span class=\"keyword\">new</span> File(file1,<span class=\"string\">&quot;1.txt&quot;</span>);</span><br><span class=\"line\">System.out.println(file4);       <span class=\"comment\">//D:\\IDEA\\FileMode\\1.txt </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"File类的方法\"><a href=\"#File类的方法\" class=\"headerlink\" title=\"File类的方法\"></a>File类的方法</h3><p>1.获取文件路径，名称，大小</p>\n<ul>\n<li>String getPath();          //获取文件路径</li>\n<li>String getName();          //获取文件名</li>\n<li>long length();             //获取文件大小<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/IDEA/FileMode/1.txt&quot;</span>);</span><br><span class=\"line\">System.out.println(file.getAbsolutePath());           <span class=\"comment\">//D:\\IDEA\\FileMode\\1.txt</span></span><br><span class=\"line\">System.out.println(file.getName());                  <span class=\"comment\">//1.txt</span></span><br><span class=\"line\">System.out.println(file.getAbsoluteFile());           <span class=\"comment\">//D:\\IDEA\\FileMode\\1.txt</span></span><br><span class=\"line\">System.out.println(file.getPath());                    <span class=\"comment\">//D:\\IDEA\\FileMode\\1.txt</span></span><br><span class=\"line\">System.out.println(file.length());                  <span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>2.判断文件类型及是否存在</p>\n<ul>\n<li>boolean exists();        //判断文件是否存在</li>\n<li>boolean isFile();        //判断文件是否位文件</li>\n<li>boolean isDirectory();        //判断文件是否为文件夹<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/IDEA/FileMode/1.txt&quot;</span>);</span><br><span class=\"line\">System.out.println(file.exists());              <span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(file.isFile());              <span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(file.isDirectory());         <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>3.创建，删除文件/文件夹（路径中的后缀无效，默认为名称）</p>\n<ul>\n<li>boolean createNewFile();        //创建新文件</li>\n<li>boolean delete();               //删除文件/文件夹</li>\n<li>boolean mkdir();                //创建单级目录</li>\n<li>boolean mkdirs();               //创建单级目录或多级目录<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file1 = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile/temp1.txt&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//创建文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!file1.exists()) file1.createNewFile();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;文件创建失败&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建单级文件夹</span></span><br><span class=\"line\">File file2 = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile/temp2&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!file2.exists()) file2.mkdirs();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (NullPointerException e) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;创建目录失败&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建多级文件夹</span></span><br><span class=\"line\">File file3 = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile/temp3/temp3_1/temp3_2&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!file3.exists()) file3.mkdirs();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (NullPointerException e) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;创建目录失败&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除文件和文件夹</span></span><br><span class=\"line\">file1.delete();</span><br><span class=\"line\">file2.delete();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>4.获取文件夹下所有文件及文件夹（路径必须为文件夹路径）</p>\n<ul>\n<li>String[] list();            //获取文件夹下所有文件和文件夹,返回字符串数组</li>\n<li>File[] listFiles();         //获取文件夹下所有文件和文件夹，返回文件数组<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile&quot;</span>);</span><br><span class=\"line\">String list[] = file.list();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(String s : list)&#123;</span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">File files[] = file.listFiles();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(File f : files)&#123;</span><br><span class=\"line\">    System.out.println(f.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"遍历多级目录查找目标文件\"><a href=\"#遍历多级目录查找目标文件\" class=\"headerlink\" title=\"遍历多级目录查找目标文件\"></a>遍历多级目录查找目标文件</h3><p>使用递归遍历目录即可，下面的代码演示了查找javaTestFile目录下的所有txt文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileTest_3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NullPointerException</span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile&quot;</span>);</span><br><span class=\"line\">        searchFile(file);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">searchFile</span><span class=\"params\">(File file)</span></span>&#123;</span><br><span class=\"line\">        File lists[] = file.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(File f : lists) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                searchFile(f);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.getName().endsWith(<span class=\"string\">&quot;txt&quot;</span>)) &#123;</span><br><span class=\"line\">                System.out.println(f.getPath());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"FileFilter——文件过滤器\"><a href=\"#FileFilter——文件过滤器\" class=\"headerlink\" title=\"FileFilter——文件过滤器\"></a>FileFilter——文件过滤器</h2><p>FileFilter，即文件过滤器，是java库中的一个接口，用于筛选文件，文件过滤器使用原理如下图所示：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java36.png\" width=600></div>\n使用方法为：\n- 创建子类实现FileFilter，重写accept方法定义过滤规则，然后将子类对象传递进listFile(FileFilterImpl ff)方法的参数中，示例如下：\n1.实现FileFilter，重写accept的规则为查找txt文件\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileFilterImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">FileFilter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File f)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f.isDirectory() || f.getName().endsWith(<span class=\"string\">&quot;txt&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n2.创建过滤器过滤文件\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FilenameFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileTest_3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NullPointerException</span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile&quot;</span>);</span><br><span class=\"line\">        searchFile(file);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">searchFile</span><span class=\"params\">(File file)</span></span>&#123;</span><br><span class=\"line\">        File lists[] = file.listFiles(<span class=\"keyword\">new</span> FileFilterImpl());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(File f : lists) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                searchFile(f);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.getName().endsWith(<span class=\"string\">&quot;txt&quot;</span>)) &#123;</span><br><span class=\"line\">                System.out.println(f.getPath());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n- 或者使用匿名内部类，下面以FileNameFilter，另一个文件过滤器(效果同FileFilter)示例：\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FilenameFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileTest_3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NullPointerException</span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile&quot;</span>);</span><br><span class=\"line\">        searchFile(file);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">searchFile</span><span class=\"params\">(File file)</span></span>&#123;</span><br><span class=\"line\">       File lists[] = file.listFiles(<span class=\"keyword\">new</span> FilenameFilter() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File dir, String name)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> File(dir,name).isDirectory() || name.endsWith(<span class=\"string\">&quot;txt&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(File f : lists) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                searchFile(f);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.getName().endsWith(<span class=\"string\">&quot;txt&quot;</span>)) &#123;</span><br><span class=\"line\">                System.out.println(f.getPath());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RandomAccessFile——随机读写文件\"><a href=\"#RandomAccessFile——随机读写文件\" class=\"headerlink\" title=\"RandomAccessFile——随机读写文件\"></a>RandomAccessFile——随机读写文件</h2><p>RandomAccessFile即可以读取文件内容，也可以向文件中写入内容，它包含了一个记录指针，用以标记当前读写处的位置，它的每次操作都是在指针所在处，所以它可以直接跳到文件的任意位置来读写数据。</p>\n<h3 id=\"RandomAccessFile的创建\"><a href=\"#RandomAccessFile的创建\" class=\"headerlink\" title=\"RandomAccessFile的创建\"></a>RandomAccessFile的创建</h3><p>&emsp;RandomAccessFile的构造方法有两个参数，第一个是文件，第二个是权限管理：“r” 只读；“rw” 可读可写；“rws” 可读可写，并要求对文件内容或元数据的每个更新都同步写入到底层设备；“rwd” 可读可写，并要求对文件内容每个更新都同步写入到底层设备。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">RandomAccessFile raf = <span class=\"keyword\">new</span> RandomAccessFile(file,<span class=\"string\">&quot;rw&quot;</span>);   <span class=\"comment\">//可读可写</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RandomAccessFile的方法及注意事项\"><a href=\"#RandomAccessFile的方法及注意事项\" class=\"headerlink\" title=\"RandomAccessFile的方法及注意事项\"></a>RandomAccessFile的方法及注意事项</h3><p>RandomAccessFile常用的方法如下：</p>\n<ul>\n<li>RandomAccessFile的read()和write()方法，同其他文件操作类</li>\n<li>long getFilePointer();      //返回文件记录指针的当前位置</li>\n<li>void seek(long pos);        //将文件记录指针定位到pos位置<br>注意事项：</li>\n<li>在seek方法中指针是从0~n-1的，所以当指针指向length，读取的值是-1</li>\n<li>用了RandomAccessFile的read方法后，指针会往后移动一个字符，而readline后会移动到下一行的开头，也就是再read就是下一行的开头第一字符。</li>\n<li></li>\n</ul>\n<h3 id=\"RandomAccessFile实现在任意位置写文件和读文件\"><a href=\"#RandomAccessFile实现在任意位置写文件和读文件\" class=\"headerlink\" title=\"RandomAccessFile实现在任意位置写文件和读文件\"></a>RandomAccessFile实现在任意位置写文件和读文件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.RandomAccessFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RamdomAccessFileTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建readme.txt</span></span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:/javaTestFile/Readme.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!file.exists()) &#123;</span><br><span class=\"line\">                file.createNewFile();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//创建RamdomAccess对象</span></span><br><span class=\"line\">            RandomAccessFile raf = <span class=\"keyword\">new</span> RandomAccessFile(file, <span class=\"string\">&quot;rw&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//写第一行和第二行</span></span><br><span class=\"line\">            String line1 = <span class=\"string\">&quot;line1&quot;</span>;</span><br><span class=\"line\">            String line2 = <span class=\"string\">&quot;line2&quot;</span>;</span><br><span class=\"line\">            raf.write(line1.getBytes());</span><br><span class=\"line\">            raf.write(<span class=\"string\">&quot;\\n&quot;</span>.getBytes());</span><br><span class=\"line\">            raf.write(line2.getBytes());</span><br><span class=\"line\">            <span class=\"comment\">//将指针移至第二行开始处</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(pos++ &lt; raf.length())&#123;</span><br><span class=\"line\">                raf.seek(pos);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(raf.read() == <span class=\"string\">&#x27;\\n&#x27;</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                pos++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            raf.seek(++pos);</span><br><span class=\"line\">            <span class=\"comment\">//读第二行内容</span></span><br><span class=\"line\">            String l2 = raf.readLine().toString();</span><br><span class=\"line\">            System.out.println(l2);</span><br><span class=\"line\">            <span class=\"comment\">//指针移至文件末尾</span></span><br><span class=\"line\">            String line3 = <span class=\"string\">&quot;line3&quot;</span>;</span><br><span class=\"line\">            raf.seek(raf.length());</span><br><span class=\"line\">            <span class=\"comment\">//追加内容写第三行</span></span><br><span class=\"line\">            raf.write(<span class=\"string\">&quot;\\n&quot;</span>.getBytes());</span><br><span class=\"line\">            raf.write(line3.getBytes());</span><br><span class=\"line\">            raf.close();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;读写异常&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"IO流\"><a href=\"#IO流\" class=\"headerlink\" title=\"IO流\"></a>IO流</h1>",
            "tags": [
                "blog",
                "学习",
                "java"
            ]
        },
        {
            "id": "sunyuzero.top/2020/10/18/%E7%BA%BF%E7%A8%8B/",
            "url": "sunyuzero.top/2020/10/18/%E7%BA%BF%E7%A8%8B/",
            "title": "java学线程",
            "date_published": "2020-10-18T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> java线程 </font></center>\n\n<h1 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h1><h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><ul>\n<li>进程就是内存中运行的程序<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java32.png\" width=600></div></li>\n<li>并发：并发就是同一时间段cpu执行多个进程，执行完一个在执行下一个</li>\n<li>并行：并行就是同一时刻cpu执行多个进程</li>\n</ul>\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><p>线程是进程的一部分，是程序进入cpu的一条路径，一个进程中可以并发多个线程，每条线程并行执行不同的任务，多线程值得就是就是在同一时刻能够执行多个线程，单线程指的是同一时刻只能执行一个线程，线程示例如下：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java33.png\" width=600></div>-\n- 守护线程\n守护线程就是一类类似于垃圾回收机制的线程，因为进程会在所有线程结束后才消失，但是垃圾回收机制线程不会结束就会导致进程也不会结束，所以需要将它们标志了守护线程，Java 虚拟机会在所有非守护线程终止后结束进程。守护线程地创建如下：\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread thread = <span class=\"keyword\">new</span> WatchingThread();</span><br><span class=\"line\">thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">thread.start();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程调度和线程状态\"><a href=\"#线程调度和线程状态\" class=\"headerlink\" title=\"线程调度和线程状态\"></a>线程调度和线程状态</h2><p>线程调度值的是cpu执行线程的实际情况，有以下两种：</p>\n<ul>\n<li>分时调度<br>分时调度是线程轮流平均使用cpu，每个线程占用cpu时间相同</li>\n<li>抢占式调度<br>抢占式调度是按照线程的优先级，来决定cpu先执行哪个进程，如果优先级相同则会随机选择，即线程随机性</li>\n</ul>\n<p>线程状态<br>每个Java程序都有一个缺省的主线程，Application的主线程是main()方法的执行过程；Applet的主线程是通过浏览器加载并执行java小程序。Java使用Thread类及其子类表示线程5中状态：<br>新建(Newborn)-&gt;就绪(Runnable)-&gt;运行(Running)-&gt;阻塞(Blocked)-&gt;死亡(Dead)</p>\n<h2 id=\"线程实现\"><a href=\"#线程实现\" class=\"headerlink\" title=\"线程实现\"></a>线程实现</h2><h3 id=\"通过继承Thread类来创建并启动多线程：\"><a href=\"#通过继承Thread类来创建并启动多线程：\" class=\"headerlink\" title=\"通过继承Thread类来创建并启动多线程：\"></a>通过继承Thread类来创建并启动多线程：</h3><ul>\n<li>定义Thread类的子类并重载线程运行体run() 方法，run()方法中定义线程需要完成的任务。</li>\n<li>创建 Thread 子类的实例，即创建了线程对象。</li>\n<li>使用线程对象的 start() 方法来启动该线程。<br>e.g.示例，该示例将会不停地输出两个线程地名字：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承Thread类重写run方法</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> TreadTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) System.out.println(currentThread().getName()+<span class=\"string\">&quot;运行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建多线程</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> TreadTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreadTets</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyThread myThread1 = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        myThread1.setName(<span class=\"string\">&quot;thread_1&quot;</span>);</span><br><span class=\"line\">        MyThread myThread2 = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        myThread2.setName(<span class=\"string\">&quot;thread_2&quot;</span>);</span><br><span class=\"line\">        myThread1.start();</span><br><span class=\"line\">        myThread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用多线程复制文件\"><a href=\"#使用多线程复制文件\" class=\"headerlink\" title=\"使用多线程复制文件\"></a>使用多线程复制文件</h3>在Thread子类重写run方法，在其中定义复制文件即可<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Thread子类</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> TreadTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread</span><span class=\"params\">(String source,String target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.souce = source;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String souce;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(souce);</span><br><span class=\"line\">            FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(target);</span><br><span class=\"line\">            <span class=\"keyword\">byte</span> b[] = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = fis.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                fos.write(b, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fis.close();</span><br><span class=\"line\">            fos.close();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;复制失败&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建多线程</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> TreadTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CopyThreadTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">            String source = <span class=\"string\">&quot;D:/javaTestFile/&quot;</span>+ i + <span class=\"string\">&quot;.txt&quot;</span>;</span><br><span class=\"line\">            String target = <span class=\"string\">&quot;D:/javaTestFile/&quot;</span>+ i + <span class=\"string\">&quot;(&quot;</span> + i + <span class=\"string\">&quot;)&quot;</span> + <span class=\"string\">&quot;.txt&quot;</span>;</span><br><span class=\"line\">            MyThread myThread = <span class=\"keyword\">new</span> MyThread(source,target);</span><br><span class=\"line\">            myThread.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">``` </span><br><span class=\"line\">结果如下，多线程创建成功</span><br><span class=\"line\">&lt;div align=center&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java39.png&quot; width=600&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">### 通过实现Runable接口实现多线程</span><br><span class=\"line\">这种方法与与继承Thread类差不多，编写一个类实现 Runnable 接口，并实现该接口中的 run() 方法。然后创建 Runable 实现类的实例，并以此实例作为 Thread 的 target 来创建 Thread 对象，示例如下：</span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"comment\">//实现runable接口</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> TreadTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread_1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程:&quot;</span>+ Thread.currentThread().getName()+<span class=\"string\">&quot;运行!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建多线程</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> TreadTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test_1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyThread_1 target = <span class=\"keyword\">new</span> MyThread_1();</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(target);</span><br><span class=\"line\">        thread1.setName(<span class=\"string\">&quot;线程——1&quot;</span>);</span><br><span class=\"line\">        Thread thread2 = <span class=\"keyword\">new</span> Thread(target);</span><br><span class=\"line\">        thread1.setName(<span class=\"string\">&quot;线程——2&quot;</span>);</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"两种创建多线程方式比较\"><a href=\"#两种创建多线程方式比较\" class=\"headerlink\" title=\"两种创建多线程方式比较\"></a>两种创建多线程方式比较</h3>相比来说，实现Runanle接口更好：</li>\n<li>适合多个相同程序代码的线程去处理同一资源的情况，把线程同程序代码、数据分离较好地体现了面向对象的设计思想。</li>\n<li>可以避免由于 Java 的单继承特性带来的局限。</li>\n<li>有利于程序的健壮性，代码能够被多个线程共享。</li>\n</ul>\n<h2 id=\"同步synchronized\"><a href=\"#同步synchronized\" class=\"headerlink\" title=\"同步synchronized\"></a>同步synchronized</h2><p>为了解决某些因为数据同步调用而产生地线程不安全问题，我们需要使用监视器实现线程同步，线程的同步是为了防止多个线程访问一个数据对象时，对数据造成的破坏。监视器的原理如下：：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java40.png\" width=600></div>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java41.png\" width=600></div>\nSynchronized能够实现同步的原因是：\n- 当程序运行到非静态的synchronized同步方法上时，自动获得与正在执行代码类的当前实例有关的锁。\n- 当程序运行到synchronized同步方法或代码块时才该对象锁才起作用。\n- 一个对象只有一个锁。所以，如果一个线程获得该锁，就没有其他线程可以获得锁，直到第一个线程释放（或返回）锁。这也意味着任何其他线程都不能进入该对象上的synchronized方法或代码块，直到该锁被释放，即该线程退出了synchronized同步方法或代码块。\n\n<p>Synchronized与static类似，Synchronized代码块和Synchronized方法作用相同，形式不同，作用范围不同：<br>e.g.示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Synchronized代码块</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> TreadTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;Thread.sleep(<span class=\"number\">1000</span>);&#125;</span><br><span class=\"line\">                    <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()</span><br><span class=\"line\">                            +<span class=\"string\">&quot;窗口卖出了第&quot;</span>+count--+<span class=\"string\">&quot;张票&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;票已经售完了!&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Synchronized方法</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> TreadTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;Thread.sleep(<span class=\"number\">1000</span>);&#125;</span><br><span class=\"line\">                    <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()</span><br><span class=\"line\">                            +<span class=\"string\">&quot;窗口卖出了第&quot;</span>+count--+<span class=\"string\">&quot;张票&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;票已经售完了!&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h2><p>java提供了Timer计时器类，可以方便我们在指定时间执行任务，常用的用法如下：</p>\n<ul>\n<li>timer.schedule(TimerTaskImpl tti,long ms)                   //延时ms毫秒执行任务</li>\n<li>timer.schedule(TimerTaskImpl tti,long ms1，long ms2)    //延时ms1毫秒后每隔ms2毫秒执行任务</li>\n<li>timer.schedule(TimerTaskImpl tti,new Date()，long ms2)     //每隔ms2毫秒后执行任务<br>一般我们需要继承TimerTask并重写run方法，在通过Timer定时器调用，示例如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承TimerTask并重写run方法</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> TreadTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Timer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TimerTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">TimerTask</span></span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现定时器</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> TreadTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Timer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Timer timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">        <span class=\"comment\">//延时定时器</span></span><br><span class=\"line\">        timer.schedule(<span class=\"keyword\">new</span> TimeTask()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;延时5s&quot;</span>);;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"number\">2000</span>);</span><br><span class=\"line\">        <span class=\"comment\">//延时后定期执行定时器</span></span><br><span class=\"line\">        timer.schedule(<span class=\"keyword\">new</span> TimeTask()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;一秒后执行任务，之后每隔一秒执行一次&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"number\">2000</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"comment\">//定期执行定时器</span></span><br><span class=\"line\">        timer.schedule(<span class=\"keyword\">new</span> TimeTask()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;每隔3s执行一次&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"keyword\">new</span> Date(),<span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n部分运行结果如下：<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java42.png\" width=600></div></li>\n</ul>\n",
            "tags": [
                "blog",
                "学习",
                "java"
            ]
        },
        {
            "id": "sunyuzero.top/2020/10/18/java%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "url": "sunyuzero.top/2020/10/18/java%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "title": "java学习笔记（二）",
            "date_published": "2020-10-18T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> java学习笔记 </font></center>\n\n<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p>java单继承性原因：避免继承的多个类中有相同定义的方法名称导致二义性。<br>接口的存在是为了多实现，克服java单继承的缺点。而接口与类的区别如下：</p>\n<ul>\n<li>类中成员可分为public，private和proteced，而接口默认全为public</li>\n<li>类中的方法可以声明并定义，而接口的方法只能声明，注意，接口的静态方法也可以直接声明定义</li>\n<li>类中可以定义变量而接口只能定义常量</li>\n</ul>\n<h2 id=\"2-接口的声明与实现\"><a href=\"#2-接口的声明与实现\" class=\"headerlink\" title=\"2.接口的声明与实现\"></a>2.接口的声明与实现</h2><h3 id=\"1-接口的声明只需interface-示例如下：\"><a href=\"#1-接口的声明只需interface-示例如下：\" class=\"headerlink\" title=\"1.接口的声明只需interface,示例如下：\"></a>1.接口的声明只需interface,示例如下：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span>  <span class=\"title\">Printable</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX=<span class=\"number\">100</span>; <span class=\"comment\">//public final int</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span></span>;    <span class=\"comment\">//public abstract void add</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">float</span> x ,<span class=\"keyword\">float</span> y)</span></span>;<span class=\"comment\">//public abstract float.. </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-实现接口用implements关键字，一个类支持实现多接口，不同的类也可以实现一个接口，示例如下：\"><a href=\"#2-实现接口用implements关键字，一个类支持实现多接口，不同的类也可以实现一个接口，示例如下：\" class=\"headerlink\" title=\"2.实现接口用implements关键字，一个类支持实现多接口，不同的类也可以实现一个接口，示例如下：\"></a>2.实现接口用implements关键字，一个类支持实现多接口，不同的类也可以实现一个接口，示例如下：</h3><pre><code>class A implements interfaceA,interfaceB  //一个类多实现接口\nclass C implements interfaceA   //多个类实现同一个接口</code></pre>\n<h3 id=\"3-接口变量做参数回调\"><a href=\"#3-接口变量做参数回调\" class=\"headerlink\" title=\"3.接口变量做参数回调\"></a>3.接口变量做参数回调</h3><p>1.首先声明接口，一个文件只能定义一个与文件名相同的接口：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java10.png\" width=600></div>\n2.类实现接口：\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java11.png\" width=600></div>\n\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java12.png\" width=600></div>\n3.以接口对象作为参数\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java13.png\" width=600></div>\n\n<p>4.接口回调<br>形参为接口对象，实参为类实例，将类实例赋值给接口对象，通过回调实现函数的调用：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java14.png\" width=600></div>\n\n<h3 id=\"接口的默认方法\"><a href=\"#接口的默认方法\" class=\"headerlink\" title=\"接口的默认方法\"></a>接口的默认方法</h3><p>接口里可以声明默认方法，该方法可以在接口里直接实现，实现接口的类不需要对它进行重写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"title\">methodDefault</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        system.out.println(<span class=\"string\">&quot;这是默认方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"接口的私有方法\"><a href=\"#接口的私有方法\" class=\"headerlink\" title=\"接口的私有方法\"></a>接口的私有方法</h3><p>接口的私有方法</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java21.png\" width=600></div>\n\n<h2 id=\"3-接口的一些注意事项\"><a href=\"#3-接口的一些注意事项\" class=\"headerlink\" title=\"3.接口的一些注意事项\"></a>3.接口的一些注意事项</h2><ul>\n<li>接口中定义的静态方法不能通过实现接口的类的对象调用，而只能通过接口名直接调用</li>\n<li><div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java15.jpg\" width=600></div>\n\n\n\n</li>\n</ul>\n<h1 id=\"对象的一些注意事项\"><a href=\"#对象的一些注意事项\" class=\"headerlink\" title=\"对象的一些注意事项\"></a>对象的一些注意事项</h1><p>1.在创建一个对象，使用构造函数new一个对象时，先在堆区分配内存放置对象的成员变量，和成员方法的地址，在方法区放置方法的声明，当调用方法或者定义方法时，在栈区开辟内存存放。</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java19.png\" width=600></div>\n2.当2个对象使用同一个方法时，不会相互干扰，因为使用了new创建新空间，但是当一个对象直接赋值给另一个对象，那么这2个对象共用一个内存空间，本质上是一样的。\n3.java支持匿名对象，即可以直接使用new Object().method；直接调用对象的方法，但是匿名对象只能使用一次，使用完了就找不到匿名对象的地址了。所以匿名对象一般被用于作为方法的实参。\n\n<h2 id=\"对象数组\"><a href=\"#对象数组\" class=\"headerlink\" title=\"对象数组\"></a>对象数组</h2><p>对象数组，就是为对象类型的数组，数组元素存放的是对象的地址值，使用方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person[] array = <span class=\"keyword\">new</span> Person[<span class=\"number\">3</span>];</span><br><span class=\"line\">array[<span class=\"number\">0</span>]=<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Tom&quot;</span>);       <span class=\"comment\">//地址</span></span><br><span class=\"line\">array[<span class=\"number\">1</span>]=<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Jack&quot;</span>);      <span class=\"comment\">//地址</span></span><br><span class=\"line\">array[<span class=\"number\">2</span>]=<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;marial&quot;</span>);    <span class=\"comment\">//地址</span></span><br><span class=\"line\">System.out.println(array[<span class=\"number\">0</span>].getName());  <span class=\"comment\">//将会打印Tom</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h1><p>ArrayList类似于动态数组，是java的一个封装类，可以实现长度的随意变化。</p>\n<h2 id=\"ArrayList的使用\"><a href=\"#ArrayList的使用\" class=\"headerlink\" title=\"ArrayList的使用\"></a>ArrayList的使用</h2><p>1.声明ArrayList对象<br>首先要导入java.util.ArrayList的包</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList &lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();  <span class=\"comment\">//尖括号内是list的数据类型，要求为泛型</span></span><br></pre></td></tr></table></figure>\n<p>2.ArrayList的增加和删除数据，查找数据<br>使用ArrayList类的add，remove和get方法可以实现数据的增删，查找</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//增加数据</span></span><br><span class=\"line\">list.add(<span class=\"string\">&quot;Tom&quot;</span>);</span><br><span class=\"line\">System.out.println(list);   <span class=\"comment\">//输出[Tom]</span></span><br><span class=\"line\">list.add(<span class=\"string\">&quot;jack&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;james&quot;</span>);</span><br><span class=\"line\">System.out.println(list);   <span class=\"comment\">//输出[Tom,jack,james]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查找数据</span></span><br><span class=\"line\">String name = list.get(<span class=\"number\">2</span>);    <span class=\"comment\">//索引从0开始，name为james</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除数据</span></span><br><span class=\"line\">list.remove(<span class=\"number\">2</span>);    <span class=\"comment\">//将会删除第三个元素，即删除james</span></span><br><span class=\"line\">System.out.println(list)   <span class=\"comment\">//打印[Tom,jack]</span></span><br></pre></td></tr></table></figure>\n<p>3.获取ArrayList的长度<br>使用size()方法可以返回List的长度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> size = list.size(); <span class=\"comment\">//size为2，因为前面删除了一个元素</span></span><br></pre></td></tr></table></figure>\n<p>4.ArrayList的对象类型<br>ArrayList的泛型也支持自己写的类,假如我已经写好了Student类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList &lt;Student&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">Student one = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;stu1&quot;</span>);</span><br><span class=\"line\">Student two = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;stu2&quot;</span>);</span><br><span class=\"line\">list.add(one);</span><br><span class=\"line\">list.add(two);</span><br><span class=\"line\"><span class=\"comment\">//使用list当中的对象</span></span><br><span class=\"line\">Student s1 = list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">String name = s1.getName();  <span class=\"comment\">//name为stu1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"ArrayList的注意事项\"><a href=\"#ArrayList的注意事项\" class=\"headerlink\" title=\"ArrayList的注意事项\"></a>ArrayList的注意事项</h2><ul>\n<li>声明ArrayList时尖括号内必须为泛型，泛型只能为引用类型，而不能是基本数据类型如int之类的，所以想使用基本数据类型，必须使用基本数据类型对应的包装类<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java20.png\" width=600></div></li>\n<li>直接输出ArrayList的对象将会输出ArrayList的内容，并有着中括号[]括起来，如果ArrayList为空，会直接输出[]</li>\n<li>list.add()方法有布尔返回值，添加成功返回true，失败返回false</li>\n<li>list.remove()方法也有返回值，将会返回被删除的元素的值</li>\n</ul>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"字符串的3种创建方法\"><a href=\"#字符串的3种创建方法\" class=\"headerlink\" title=\"字符串的3种创建方法\"></a>字符串的3种创建方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>直接创建</span><br><span class=\"line\">String str1 = <span class=\"string\">&quot;Tom&quot;</span>;</span><br><span class=\"line\"><span class=\"number\">2.</span>根据字符数组创建</span><br><span class=\"line\"><span class=\"keyword\">char</span> ch[]=&#123;<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>&#125;;</span><br><span class=\"line\">String str2 = <span class=\"keyword\">new</span> String(ch);   <span class=\"comment\">//str2=&quot;ABC&quot;</span></span><br><span class=\"line\"><span class=\"number\">3.</span>根据字节数组创建</span><br><span class=\"line\"><span class=\"keyword\">byte</span> by[] = &#123;<span class=\"number\">97</span>,<span class=\"number\">98</span>,<span class=\"number\">99</span>&#125;;</span><br><span class=\"line\">String str3 = <span class=\"keyword\">new</span> String(by);   <span class=\"comment\">//str3=&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"number\">4.</span>不赋值将创建空字符串</span><br><span class=\"line\">String str4 = <span class=\"keyword\">new</span> String();   <span class=\"comment\">//str4为空字符串</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的一些方法\"><a href=\"#字符串的一些方法\" class=\"headerlink\" title=\"字符串的一些方法\"></a>字符串的一些方法</h2><p>1.equals(String str)方法<br>使用equals方法将会比较字符串的内容，不会比较地址</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1=<span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ch[]=&#123;<span class=\"string\">&#x27;h&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;l&#x27;</span>,<span class=\"string\">&#x27;l&#x27;</span>,<span class=\"string\">&#x27;o&#x27;</span>&#125;;</span><br><span class=\"line\">String str2=<span class=\"keyword\">new</span> String(ch);</span><br><span class=\"line\">str1.equals(str2);   <span class=\"comment\">//将会返回true</span></span><br><span class=\"line\">str1.equals(<span class=\"string\">&quot;hello&quot;</span>);   <span class=\"comment\">//返回true</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span>.equals(str2);   <span class=\"comment\">//返回true</span></span><br></pre></td></tr></table></figure>\n<p>2.equalsIgnoreCase(String str)方法<br>使用这个方法将会忽略字符串的大小写进行比较</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1=<span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ch[]=&#123;<span class=\"string\">&#x27;h&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;l&#x27;</span>,<span class=\"string\">&#x27;l&#x27;</span>,<span class=\"string\">&#x27;o&#x27;</span>&#125;;</span><br><span class=\"line\">String str2=<span class=\"keyword\">new</span> String(ch);</span><br><span class=\"line\">str1.equals(str2);   <span class=\"comment\">//将会返回false</span></span><br><span class=\"line\">str1.equalsIgnoreCase(str2)  <span class=\"comment\">//返回true</span></span><br></pre></td></tr></table></figure>\n<p>3.concat(String str)方法<br>使用concat方法可以拼接2个字符串，原字符串不变</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1=<span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">String str2=<span class=\"string\">&quot;world&quot;</span>;</span><br><span class=\"line\">String str3=str1.concat(str2);    <span class=\"comment\">//str3为helloworld</span></span><br></pre></td></tr></table></figure>\n<p>3.charAt(int index)方法<br>charAt方法可以找出字符串任何位置的字符，如果索引不合法将会出现异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1=<span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ch = str1.charAt(<span class=\"number\">1</span>);  <span class=\"comment\">//ch为e</span></span><br></pre></td></tr></table></figure>\n<p>4.indexOf(String str)方法<br>indexOf方法可以返回str在字符串中出现的第一个位置，没有将会返回-1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str &#x3D; &quot;helloworld&quot;;</span><br><span class=\"line\">int index&#x3D;str.indexOf(&quot;llo&quot;);   &#x2F;&#x2F;index为2</span><br></pre></td></tr></table></figure>\n<p>5.subString(int index1,int index2)方法<br>subString方法可以获取原字符串从index1到index2-1的字串，如果只有一个参数，将默认index2为字符串的length</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = <span class=\"string\">&quot;helloworld&quot;</span>;</span><br><span class=\"line\">String str1=str.subString(<span class=\"number\">5</span>);  <span class=\"comment\">//str1为world</span></span><br><span class=\"line\">String str2=str.subString(<span class=\"number\">4</span>,<span class=\"number\">7</span>);  <span class=\"comment\">//str2为owo</span></span><br></pre></td></tr></table></figure>\n<p>6.toCharArray()方法<br>toCharArray方法可以将字符串变成字符数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str=<span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ch[]=str.toCharArray();  <span class=\"comment\">//ch[]=&#123;&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>7.replace(String str1,String str2)方法<br>replace方法可以将字符串里值为str1的字符串替换成str2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str=<span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">String str1=str.replace(<span class=\"string\">&quot;l&quot;</span>,<span class=\"string\">&quot;#&quot;</span>);   <span class=\"comment\">//str1为he##o</span></span><br><span class=\"line\">String str2=str.replace(<span class=\"string\">&quot;el&quot;</span>,<span class=\"string\">&quot;&quot;</span>ss<span class=\"string\">&quot;);   //str2为hsslo</span></span><br></pre></td></tr></table></figure>\n<p>8.split(char ch)方法<br>split方法将会将字符串在ch处切割开成String数组,支持ch为空格</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str=<span class=\"string\">&quot;aaa,bbb,ccc&quot;</span>;</span><br><span class=\"line\">String s[]=str.split(<span class=\"string\">&quot;,&quot;</span>);   <span class=\"comment\">//s[]=&#123;&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的注意事项\"><a href=\"#字符串的注意事项\" class=\"headerlink\" title=\"字符串的注意事项\"></a>字符串的注意事项</h2><ul>\n<li>字符串是常量</li>\n<li>字符串相当于char[]数组，但是在计算机底层是用byte[]数组实现的，因为字符使用ascii编码，在计算机底层翻译成数字储存在字节数组中</li>\n<li>当使用String直接赋值创建多个值相同的字符串时，实际上这几个字符串共用字符串常量池，即共用1个地址</li>\n<li>new出来的String字符串不在常量池中，所以new出来的字符串即使只相同地址也不同</li>\n<li>使用==比较时，基本数据类型比较的是值，而其他的比较的是地址<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java21.png\" width=600></div></li>\n<li>使用equals方法比较时，str.equals(str1)中，str不能为空字符串，否则会出现空指针异常</li>\n<li>字符串无论经过什么操作其都不会发生改变，给字符串赋其他值实际上是改变了字符串指向的地址</li>\n<li>split方法中的参数是正则表达式参数，如要使用.作为分隔符，必须要写出//.才行，否则不会进行切割</li>\n</ul>\n<h1 id=\"关于static\"><a href=\"#关于static\" class=\"headerlink\" title=\"关于static\"></a>关于static</h1><ul>\n<li><p>static是修饰类静态成员的关键字，而静态成员是直接属于类的，即使用类名可以直接调用静态成员，同时，它属于类的成员，也可以使用对象进行调用</p>\n</li>\n<li><p>静态成员可以不创建对象而直接通过类调用</p>\n</li>\n<li><p>在类的内部，静态成员可以直接使用省略前面的类名或者对象名</p>\n</li>\n<li><p>静态方法不可以调用非静态成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        StaticDemo sd = <span class=\"keyword\">new</span> StaticDemo();</span><br><span class=\"line\">        StaticDemo.staticMethod();</span><br><span class=\"line\">        System.out.println(StaticDemo.count);</span><br><span class=\"line\">        System.out.println(sd.count);</span><br><span class=\"line\">        method1();</span><br><span class=\"line\">     <span class=\"comment\">//   method2();    //会报错</span></span><br><span class=\"line\">        System.out.println((staticNum));</span><br><span class=\"line\">        Test t=<span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">        System.out.println((t.num));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> staticNum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;method1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;method2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>静态方法的执行优先于非静态方法</p>\n</li>\n<li><p>静态代码块用于对静态成员的一次性赋值，静态代码块只执行一次，无论创建多少个对象都只执行一次，用法为：</p>\n<pre><code>  static&#123;\n      //静态代码块\n  &#125;</code></pre>\n</li>\n</ul>\n<h1 id=\"Arrays类\"><a href=\"#Arrays类\" class=\"headerlink\" title=\"Arrays类\"></a>Arrays类</h1><p>Arrays类在java.util.Arrays包中，是对数组的辅助工具类<br>1.Arrays.toString()<br>toString方法可以将数组变成字符串形式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr1=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">String StrArr1=Arrays.toString(arr1);        </span><br><span class=\"line\">System.out.println(Array.toString(strArr1));   <span class=\"comment\">//输出[1,2,3]</span></span><br></pre></td></tr></table></figure>\n<p>2.Arrays.sort()<br>sort方法可以对数组进行升序排序，如果是数字则从小到大排列，如果是字母则按首字母字典序顺序排列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] strArr=&#123;<span class=\"string\">&quot;aaa&quot;</span>,<span class=\"string\">&quot;ccc&quot;</span>,<span class=\"string\">&quot;dd&quot;</span>,<span class=\"string\">&quot;bbb&quot;</span>&#125;;</span><br><span class=\"line\">Arrays.sort(strArr);</span><br><span class=\"line\">System.out.println(Arrays.toString(strArr));    <span class=\"comment\">//输出[aaa,bbb,ccc,dd]</span></span><br></pre></td></tr></table></figure>\n<p>3.toCharArray()<br>toCharArray方法可以将字符串转变为字符数组,用法为：Char []chStr=字符串名.toCharArray();</p>\n<h1 id=\"math类\"><a href=\"#math类\" class=\"headerlink\" title=\"math类\"></a>math类</h1><p>math类在java.util.Math包中，提供了许多有数学运算相关的方法<br>1.abs()方法<br>使用Math.abs(double num)可以获得num的绝对值，但是num本身不变<br>2.ceil()方法<br>Math.ceil(double num)可以获取num的向上取整的浮点数，如num是3.1，则Math.ceil(3.1)为4.0<br>3.floor()方法<br>Math.floor(double num)方法为向下取整<br>4.round()方法<br>Math.round(double num)方法可以对num进行四舍五入取整</p>\n<h1 id=\"关于java的继承\"><a href=\"#关于java的继承\" class=\"headerlink\" title=\"关于java的继承\"></a>关于java的继承</h1><ul>\n<li><p>子类可以直接访问父类所有的public成员，</p>\n</li>\n<li><p>当子类和父类有重名成员变量或方法时，通过对象调用该同名变量或方法，则先在该对象所在的类中寻找，若找不到则再向父类中寻找，这就是java的重写，可以通过在方法前加上@override检测是否合法重写</p>\n</li>\n<li><p>当子类和父类有成员方法用到了同名成员变量时，则调用该方法时，优先在该方法的类中寻找变量，没有再向父类寻找</p>\n</li>\n<li><p>关于类中的方法局部变量，成员变量和父类成员变量三者同名的调用：局部变量通过覆盖规则可以直接使用，本类成员变量则用this.变量名调用，父类变量用super.变量名调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//father类定义了num=10</span></span><br><span class=\"line\"><span class=\"comment\">//son类如下：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">son</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printNum</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num=<span class=\"number\">30</span>;</span><br><span class=\"line\">        system.out.println(num);   <span class=\"comment\">//30</span></span><br><span class=\"line\">        system.out.println(<span class=\"keyword\">this</span>.num);    <span class=\"comment\">//20</span></span><br><span class=\"line\">        system.out.println(<span class=\"keyword\">super</span>.num);       <span class=\"comment\">//10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关于重写，只是方法的重写，而变量不能重写，</p>\n</li>\n<li><p>必须要求方法名称，参数列表相同，并且子类的返回类型小于或者等于父类的返回值类型，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父类方法为public object method();</span></span><br><span class=\"line\"><span class=\"comment\">//子类：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> string <span class=\"title\">method</span><span class=\"params\">()</span></span>;   <span class=\"comment\">//符合重写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//父类方法为public string method();  </span></span><br><span class=\"line\"><span class=\"comment\">//子类：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> object <span class=\"title\">method</span><span class=\"params\">()</span></span>;   <span class=\"comment\">//不符合重写</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重写的目的：在应用中，主要是在产品的更新换代中，每一个子类代表一代新产品，而子类直接继承功能不变的函数，而对需要升级的函数进行重写覆盖</p>\n</li>\n<li><p>对于构造方法：子类调用构造方法时必须调用父类的构造方法，且如果父类构造方法中有参数时，必须使用super关键字为父类构造方法传递实参</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">father</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">father</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;默认父类构造方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">father</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;重载子类构造方法&quot;</span>+num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">son</span> <span class=\"keyword\">extends</span> <span class=\"title\">father</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">son</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;默认子类构造方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">son</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(num);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;重载子类构造方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\">son son1=<span class=\"keyword\">new</span> son();      <span class=\"comment\">//输出：默认父类构造方法  默认子类构造方法</span></span><br><span class=\"line\">son son2=<span class=\"keyword\">new</span> son(<span class=\"number\">1</span>);      <span class=\"comment\">//输出：重载子类构造方法1   重载子类构造方法</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造方法之间可以相互调用，通过this()即可，但是构造方法中不能同时存在super()和this()</p>\n</li>\n<li><p>每次调用方法时，都是将方法区中的方法进栈</p>\n</li>\n</ul>\n<h1 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h1><ul>\n<li>使用父类对象创建子类引用时，是将子类当成父类使用，如把猫当成动物看，所以调用方法时优先调用子类的，若子类没有则向上寻找父类的</li>\n<li>使用父类对象创建子类引用时，对象无法调用子类的变量<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">father</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showNum</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">son</span> <span class=\"keyword\">extends</span> <span class=\"title\">father</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age=<span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showNum</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      father obj =<span class=\"keyword\">new</span> son();</span><br><span class=\"line\">        System.out.println(obj.num);   <span class=\"comment\">//父类变量10</span></span><br><span class=\"line\">       <span class=\"comment\">// System.out.println(obj.age);   //会报错</span></span><br><span class=\"line\">        obj.showNum();       <span class=\"comment\">//优先调用子类方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"final关键字\"><a href=\"#final关键字\" class=\"headerlink\" title=\"final关键字\"></a>final关键字</h1><ul>\n<li>使用final关键字修饰类时，该类不可以被继承，并且该类的成员不可以被重写覆盖，但是该类可以重写覆盖他的父类方法</li>\n<li>final关键字修饰的方法不能被覆盖重写</li>\n<li>abstract和final不能同时修饰一个方法</li>\n<li>用final关键字修饰的变量不可以被改变，但是只声明用final修饰的变量，依然可以后续为该变量赋值，但赋值后就不可更改了</li>\n<li>用final关键字修饰的对象其地址值不可改变，所以对该对象使用new方法重新分配内存空间会报错<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java23.png\" width=600></div></li>\n<li>用final修饰的成员变量，要么直接赋值，要么在构造方法里赋值并且两者不能同时赋值，注意所有构造方法的重载形式中都要包含对final修饰的成员变量赋值<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">son</span> <span class=\"keyword\">extends</span> <span class=\"title\">father</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">son</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        age=<span class=\"number\">10</span>;     <span class=\"comment\">//若是默认构造方法中没有对age赋值将会报错</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">son</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"访问权限\"><a href=\"#访问权限\" class=\"headerlink\" title=\"访问权限\"></a>访问权限</h1><p>对于不同权限修饰符，不同的类，不同的包中访问权限有所差异：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java24.png\" width=600></div>\n\n<h1 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h1><p>(一）类中的内部类<br>在java中，类中可以定义另一个类，称为内部类，关于内部类有2种使用方法<br>1.在外部类的方法中调用内部类的方法成员，然后在main函数中调用该外部类方法间接调用内部类方法<br>2.直接调用： 外部类名称.内部类名称 对象名 = new 外部类().new 内部类();该对象可以直接调用内部类方法<br>(二)局部内部类，即方法里的内部类<br>在方法里定义的内部类，要想使用它，只能在局部方法里声明对象并对局部内部类的方法进行调用</p>\n<h2 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h2><p>如果接口的实现类只需要使用唯一的一次，那么这种情况下就可以省略该实现类的定义，而改用使用匿名内部类，其定义格式为：<br>接口名称 对象名 = new 接口名称(){<br>    //覆盖重写抽象方法<br>}；</p>\n<ul>\n<li>匿名内部类只能创建一个对象，因为它省略了【实现类/子类名称】，无法通过构造方法再次创建对象</li>\n<li>匿名对象只能调用一次，一个方法，因为他省略了【对象名称】，无法再次通过对象名调用方法</li>\n</ul>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>内部类可以使用外部类中的所有成员，包括private修饰的成员</li>\n<li>在内部类中和外部类中有同名变量时，在内部类中，使用this指的是内部类对象，要使用外部类的成员变量，则需要使用外部类名.this.变量名<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java25.png\" width=600></div></li>\n<li>关于内部类和外部类的权限修饰问题<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java26.png\" width=600></div></li>\n<li>在局部内部类中，要想访问局部变量，该变量必须是有效final的，有效指的是在局部方法中，该变量没有二次赋值<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> outer&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num=<span class=\"number\">10</span>;    <span class=\"comment\">//等效final，因为没有改变</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> num1=<span class=\"number\">20</span>;   </span><br><span class=\"line\">        num1=<span class=\"number\">30</span>;       <span class=\"comment\">//发生了改变，不等效final</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">inner</span></span>&#123;    </span><br><span class=\"line\">            System.out.println(num);   <span class=\"comment\">//正确，输出10</span></span><br><span class=\"line\">            System.out.println(num1);    <span class=\"comment\">//将会报错</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>匿名内部类的对象可以作为方法的参数，匿名内部类的匿名对象也可以直接作为方法的参数：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 定义了接口为Skill</span><br><span class=\"line\">&#x2F;&#x2F; 定义了一个类Hero，Hero有一个方法为setSkill（Skill skill）&#123;&#125;</span><br><span class=\"line\">&#x2F;&#x2F;使用匿名内部类的匿名对象</span><br><span class=\"line\">Hero hero &#x3D; new Hero();</span><br><span class=\"line\">hero.setSkill(new Skill()&#123;</span><br><span class=\"line\">    @override</span><br><span class=\"line\">    public void use()&#123;</span><br><span class=\"line\">        System.out.println(&quot;use skill&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"Object的一些方法\"><a href=\"#Object的一些方法\" class=\"headerlink\" title=\"Object的一些方法\"></a>Object的一些方法</h1><h2 id=\"toString-方法\"><a href=\"#toString-方法\" class=\"headerlink\" title=\"toString()方法\"></a>toString()方法</h2><p>toString方法是Object类中的一个方法，返回值为字符串，而Object类是所有类的父类，所以toString方法可以供所有对象调用，一般来说，是在类中重写toString方法方便一些操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name = <span class=\"string\">&quot;tom&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> married = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;test&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, married=&quot;</span> + married +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        test t =<span class=\"keyword\">new</span> test();</span><br><span class=\"line\">        System.out.println(t); </span><br><span class=\"line\">        <span class=\"comment\">//输出结果为：test&#123;name:&#x27;tom&#x27;,age:&#x27;10&#x27;,married:&#x27;false&#x27;&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>一般来说，没有重写toString方法的类，其对象调用toString方法会返回对象的地址值，否则，该类中一定重写了toString方法</li>\n<li>只有对象能调用toString方法，而其他比如说int等基本类型不能</li>\n<li>字符串的toString为原字符串，ArrayList的toString为[…]，它们都对toString进行了重写</li>\n</ul>\n<h2 id=\"equals-方法\"><a href=\"#equals-方法\" class=\"headerlink\" title=\"equals()方法\"></a>equals()方法</h2><p>equals方法也是Object类的一个方法，返回值为bool类型，基本格式为：<br>1.obj1.equals(obj2);   //比较obj1和obj2的地址值<br>2.Object.equals(obj1,obj2);   //另一种形式</p>\n<ul>\n<li>同样的，一般我们使用equals()都要对其进行重写，例如String就对equals方法进行了重写，所以String字符串使用equals方法比较的是字符串内容而不是地址值</li>\n<li>null是不能调用方法的，所以使用null.equals(obj)方法将会出现空指针异常，所以我们对字符串使用equals方法时，最好使用第二种形式，防止字符串为空调用方法而抛出空指针异常</li>\n</ul>\n<h1 id=\"Date类\"><a href=\"#Date类\" class=\"headerlink\" title=\"Date类\"></a>Date类</h1><ul>\n<li><p>Date类位于java.util.Date包下，是与时间相关的一个工具类，Date的构造方法的常见重载形式有2种：<br>  1.无参数的构造方法<br>  无参数的Date构造方法将会获取当前的系统时间</p>\n<p>  Date date = new Date();   //获取系统的当前时间</p>\n</li>\n</ul>\n<p>2.有参数的构造方法<br>有参数的Data构造方法中，其参数应为long类型的数，代表毫秒值，获取从初始时间后的多少毫秒之后的时间</p>\n<pre><code>Date date = new Date(long num);   //获取从1970年1月1日0分0秒之后的num毫秒的时间</code></pre>\n<ul>\n<li>getTime函数<br>getTime（）函数用于返回调用的Data对象距离初始时间1970年的时间，返回值是毫秒值<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"><span class=\"keyword\">long</span> time = date.getTime();   <span class=\"comment\">//time=1605524769466</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Date的格式化和格式化的日期转换\"><a href=\"#Date的格式化和格式化的日期转换\" class=\"headerlink\" title=\"Date的格式化和格式化的日期转换\"></a>Date的格式化和格式化的日期转换</h2><p>DateFormat类是一个抽象类，我们不能直接使用，而SimpleDateFormat类是DateFormat类的一个实现子类，我们可以直接使用来对日期进行格式化，simpleDateFormat类的构造方法使用了类似于正则表达式的模式匹配，用不同的模式来构造出不同的日期格式，具体如下图所示：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java27.png\" width=600></div>\n- format方法：对日期进行格式化\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">SimpleDateFormat sdf1 = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">SimpleDateFormat sdf2 = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy年MM月dd日 HH时mm分ss秒&quot;</span>);</span><br><span class=\"line\">String text1 = sdf1.format(date);</span><br><span class=\"line\">String text2 = sdf2.format(date);</span><br><span class=\"line\">System.out.println(date);      <span class=\"comment\">//Mon Nov 16 19:28:06 CST 2020</span></span><br><span class=\"line\">System.out.println(text1);      <span class=\"comment\">//2020-11-16 19:28:06</span></span><br><span class=\"line\">System.out.println(text);       <span class=\"comment\">//2020年11月16日 19时31分56秒</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>parse方法，还原格式化的日期<br>parse方法将格式化的日期文本还原为日期形式，它声明了一个异常ParseException，当模式与日期文本不匹配时抛出异常，所以在使用时一定要声明异常或者使用try，catch自己解决异常<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parseDemo</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ParseException</span>&#123;</span><br><span class=\"line\">    SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy年MM月dd日 HH时mm分ss秒&quot;</span>);</span><br><span class=\"line\">    Date date = <span class=\"keyword\">new</span> Date();         <span class=\"comment\">//Mon Nov 16 19:47:37 CST 2020</span></span><br><span class=\"line\">    String text = sdf.format(date);     <span class=\"comment\">//2020年11月16日 19时47分37秒</span></span><br><span class=\"line\">    Date date1 = sdf.parse(text);</span><br><span class=\"line\">    System.out.println(date1);     <span class=\"comment\">//Mon Nov 16 19:47:37 CST 2020</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"StringBuilder类\"><a href=\"#StringBuilder类\" class=\"headerlink\" title=\"StringBuilder类\"></a>StringBuilder类</h1><p>StringBuilder类是对字符串进行操作的一个工具类，使用StringBuilder类的好处是方便，节省空间：因为String类的底层是final修饰的字符数组，所以导致了字符串的不可改变，而StringBuilder类的底层是没有final修饰的字符数组，所以它可变。</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java28.png\" width=600></div>\n- StringBuilder的构造方法\n1.无参构造方法,将会创建一个空字符串\nStringBuilder SB = new StringBuilder();\n2.有参构造方法，将会将StringBuilder对象的内容初始化为传递的参数\nStringBuilder sb = new StringBuilder(\"abc\");\n- append()方法\nappend方法用于向StringBuilder对象的后面加上一个字符串,返回值为this，即调用该方法的对象：    \n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBUilder();</span><br><span class=\"line\">String sb1 = sb.append(<span class=\"string\">&quot;abc&quot;</span>);   <span class=\"comment\">//此时sb=sb1=&quot;abc&quot;</span></span><br></pre></td></tr></table></figure>\n- delete(int start,int end)方法\ndelete方法用于删除StringBuilder对象的从start到end-1之间的内容，返回值也是this：\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">sb.apend(<span class=\"string\">&quot;abc&quot;</span>);     <span class=\"comment\">//sb=&quot;abc&quot;</span></span><br><span class=\"line\">sb.delete(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">System.out.println(sb);    <span class=\"comment\">//sb=&quot;ac&quot;</span></span><br></pre></td></tr></table></figure>\n- reverse()方法\nreverse方法可以将StringBuilder对象的内容反转\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">sb.reverse();    <span class=\"comment\">//sb=cba</span></span><br></pre></td></tr></table></figure>\n- toString()方法\ntoString方法可以将StringBuilder对象转换为String对象：\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">String str = sb.toString();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h1><p>包装类就是把8种基本的数据类型封装到类中进行操作，下面以Interger为例说明：</p>\n<h2 id=\"装箱与拆箱\"><a href=\"#装箱与拆箱\" class=\"headerlink\" title=\"装箱与拆箱\"></a>装箱与拆箱</h2><ul>\n<li>装箱：装修就是把基本数据类型转换为包装类的对象<br>Inter类就是对int数据类型的封装，其构造方法如下：</li>\n</ul>\n<p>1.Interger in1 = new Interger(1);   //参数为int类型<br>2.Interger in2 = new Interger(“1”);   //参数为字符串类型，字符串类型的内容必须为int类型<br>在使用IDEA时用Interger的构造方法时，会发现Interger上会有一条横线，这代表这这个方法已经过时，不建议使用，所以相比于构造方法，还有2个静态方法生成Interger对象,效果等同于构造方法：<br>1.Interger in3 = Interger.valueOf(1);<br>2.Interger in4 = Interger.valueOf(“1”);     </p>\n<ul>\n<li>拆箱：拆箱就是把包装类的对象转换为基本数据类型<br>interger in1 = new Interger(1);    //装箱<br>int i = in1.intValue();         //拆箱</li>\n</ul>\n<h2 id=\"自动装箱与拆箱\"><a href=\"#自动装箱与拆箱\" class=\"headerlink\" title=\"自动装箱与拆箱\"></a>自动装箱与拆箱</h2><p>自动装箱与拆箱就是自动将包装类对象和基本数据类型进行转换，Interger类的构造方法过时的原因就是jdk的新特性：自动装箱与拆箱</p>\n<ul>\n<li>自动装箱<br>自动装箱就是省略了构造方法来将基本数据类型转为包装类对象,eg：<br>Interger in = 1;</li>\n<li>自动拆箱<br>自动拆箱就是将包装类对象转为基本数据类型,eg：<br>Interger in = 1;<br>in = in + 1;</li>\n</ul>\n<h2 id=\"字符串转变为其他基本数据类型\"><a href=\"#字符串转变为其他基本数据类型\" class=\"headerlink\" title=\"字符串转变为其他基本数据类型\"></a>字符串转变为其他基本数据类型</h2><p>将其他类型转变为字符串有toString方法和valueOf方法，而将字符串转变为其他数据类型有parseInt，parseDouble等方法，使用方法为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = <span class=\"string\">&quot;100&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = Interger.parseInt(str);  <span class=\"comment\">//i=100</span></span><br></pre></td></tr></table></figure>\n<p>注意事项：</p>\n<ul>\n<li>转变为其他数据类型的字符串的内容必须和转变的基本数据类型相同</li>\n<li>使用parseInt只能由Interger调用，并且只能赋值给int变量，其他数据类型同理</li>\n</ul>\n<h1 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h1><p>异常就是程序运行时发生的不正常情况，如打开一个不存在的文件，与错误不同（代码错误），异常一般分为两大类：</p>\n<ul>\n<li>Error:由于java虚拟机的限制而产生的程序错误，一般无法解决。如：JVM系统内部错误、资源耗尽等严重情况。</li>\n<li>Exception: 其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理<br>Error和Exception包含如下：<div align=center> <img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java34.png\" width=600></div>\n## 异常处理</li>\n<li>Java采用抓抛模型catch-throw异常处理机制，将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简洁，易于维护。</li>\n<li>异常对象的生成两种方式</li>\n</ul>\n<p>1.由虚拟机自动生成：程序运行过程中，虚拟机检测到程序发生了问题，如果在当前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例对象并抛出——自动抛出<br>2.由开发人员手动创建：创建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样</p>\n<ul>\n<li>捕获异常<br>当一个方法抛出异常时，如果没有实现异常处理，会一直向上寻找异常解决方法，如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。</li>\n<li>选择处理异常<br>如果这些异常是运行时异常，则方法的调用者有3种选择：<br>（1）不理会这些声明，编译可以通过；<br>（2）使用try…catch处理异常；<br>（3）使用throws继续延迟处理<br>如果是非运行时异常，方法调用者有两种选择：<br>（1）使用try…catch处理异常；<br>（2）使用throws继续延迟处理，让编译先通过。</li>\n</ul>\n<h2 id=\"try——catch捕获异常\"><a href=\"#try——catch捕获异常\" class=\"headerlink\" title=\"try——catch捕获异常\"></a>try——catch捕获异常</h2><ul>\n<li>try-catch语句<br>在try语句块中，放置可能出现异常的代码。在catch语句块中是对异常对象进行处理的代码。当try中的保护代码块发生异常时，如果catch块中声明了该异常，异常将会被传递到catch块中。</li>\n<li>每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。</li>\n<li>如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可以用其父类作为catch的参数，但是参数不能是与已知异常无关的异常类，否则将不会执行</li>\n<li>try-catch-finally语句<br>try-catch-finally语句就是在try-catch语句的基础上，加上finally代码块，finally代码块是无论是否发生异常都会被执行</li>\n</ul>\n<h2 id=\"throw和throws\"><a href=\"#throw和throws\" class=\"headerlink\" title=\"throw和throws\"></a>throw和throws</h2><p>当程序没有使用try-catch语句捕获异常时，就需要用到throw和throws关键字</p>\n<ul>\n<li>throws关键字<br>&emsp;throws关键字（必须在定义方法的时候使用），用于声明该方法可能会抛出的异常类型，一般用于不知道该怎么处理异常时，放任其不管，当有异常抛出时会中断该方法，而异常被抛到这个方法的调用者那里。<br>&emsp;使用throws关键字明确指出了该方法可能抛出的异常。throws后面如果声明多个异常类型，之间可用“,”分隔</li>\n<li>throw关键字<br>当创建一个异常对象之后，可以使用throw关键字抛出异常对象。throw必须在方法体中使用。<br>手动抛出异常但是有时候有些错误在jvm看来不是错误，所以我们需要自己手动引发异常，这就是throw的作用，例如：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(age&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">         Exception e = <span class=\"keyword\">new</span> ArithmeticException(“年龄不能为负”)；</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>注意重写方法不能抛出比被重写方法范围更大的异常类型：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">methodA</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">      ……</span><br><span class=\"line\">&#125;  &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B1</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">methodA</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> FileNotFoundException </span>&#123;</span><br><span class=\"line\">      ……</span><br><span class=\"line\">&#125;  &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B2</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">methodA</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;   <span class=\"comment\">//报错,抛出的异常类型比父类异常类型大</span></span><br><span class=\"line\">        ……</span><br><span class=\"line\">&#125;  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"人工抛出异常\"><a href=\"#人工抛出异常\" class=\"headerlink\" title=\"人工抛出异常\"></a>人工抛出异常</h2>Java异常类对象除在程序执行过程中出现异常时由系统自动生成并抛出，也可根据需要人工创建并抛出。</li>\n<li>人工抛出异常，首先要生成异常类对象，然后通过throw语句实现抛出操作，注意，可抛出的异常必须是Throwable或其子类的实例。</li>\n<li>自定义异常类<br>自定义异常类是包括人工抛出异常的自定义类：</li>\n</ul>\n<p>1.一般地，用户自定义异常类都是RuntimeException的子类。<br>2.自定义异常类通常需要编写几个重载的构造器。<br>3.自定义的异常类对象通过throw抛出。<br>4.自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。<br>5.用户自己的异常类必须继承现有的异常类</p>\n",
            "tags": [
                "blog",
                "学习",
                "java"
            ]
        },
        {
            "id": "sunyuzero.top/2020/10/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(%E4%BA%8C)/",
            "url": "sunyuzero.top/2020/10/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(%E4%BA%8C)/",
            "title": "机器学习(二)",
            "date_published": "2020-10-12T12:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 简单线性回归 </font></center>\n\n<p>线性回归是机器学习中训练数据集的重要手段，首先是简单的线性回归，用到的代码和数据集：<a href=\"https://github.com/sunyuzero/cdn/blob/master/csv/studentscores.csv\">数据集</a>,<a href=\"https://github.com/sunyuzero/cdn/blob/master/csv/LR.py\">代码</a><br>数据集图示：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c11.png\" width=200></div>\n## 导入库\n线性回归所使用到的库如下：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pandas as pd</span><br><span class=\"line\">import numpy as np    </span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\">from sklearn.linear_model import LinearRegression</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导入数据集-amp-amp-拆分数据集\"><a href=\"#导入数据集-amp-amp-拆分数据集\" class=\"headerlink\" title=\"导入数据集&amp;&amp;拆分数据集\"></a>导入数据集&amp;&amp;拆分数据集</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 导入数据集</span></span><br><span class=\"line\">dataset = pd.read_csv(<span class=\"string\">&#x27;studentscores.csv&#x27;</span>)</span><br><span class=\"line\">X = dataset.iloc[ : , : <span class=\"number\">1</span> ].values</span><br><span class=\"line\">Y = dataset.iloc[ : , <span class=\"number\">1</span> ].values</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 拆分数据集</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\">X_train , X_test , Y_train , Y_test = train_test_split( X , Y , test_size = <span class=\"number\">1</span>/<span class=\"number\">4</span> , random_state = <span class=\"number\">0</span> )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用简单线性回归模型训练数据集\"><a href=\"#使用简单线性回归模型训练数据集\" class=\"headerlink\" title=\"使用简单线性回归模型训练数据集\"></a>使用简单线性回归模型训练数据集</h2><p>使用LinearRegression中的模型训练数据集</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regressor = LinearRegression()</span><br><span class=\"line\">regressor = regressor.fit( X_train , Y_train )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"预测训练结果\"><a href=\"#预测训练结果\" class=\"headerlink\" title=\"预测训练结果\"></a>预测训练结果</h2><p>使用LinearRegression库的predict函数预测训练结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Y_pred = regressor.predict( X_test )</span><br></pre></td></tr></table></figure>\n<p>预测的结果如下：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c10.png\" width=500></div>\n\n\n<h2 id=\"结果可视化\"><a href=\"#结果可视化\" class=\"headerlink\" title=\"结果可视化\"></a>结果可视化</h2><p>使用matplotlib中的pyplot库可以将训练的数据集转化为图表，使结果可视化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.scatter ( X_train , Y_train , color = <span class=\"string\">&#x27;red&#x27;</span> )</span><br><span class=\"line\">plt.plot ( X_train , regressor.predict(X_train) , color = <span class=\"string\">&#x27;blue&#x27;</span> )</span><br><span class=\"line\">plt.show() </span><br><span class=\"line\"></span><br><span class=\"line\">plt.scatter( X_test , Y_test ,color = <span class=\"string\">&#x27;red&#x27;</span> )</span><br><span class=\"line\">plt.plot( X_test , Y_test , color = <span class=\"string\">&#x27;blue&#x27;</span> )</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>训练集可视化图表为：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c8.png\" width=500 height=300></div>\n测试集可视化图表为：\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c9.png\" width=500 height=300></div>\n\n",
            "tags": [
                "blog",
                "机器学习"
            ]
        },
        {
            "id": "sunyuzero.top/2020/10/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "url": "sunyuzero.top/2020/10/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "title": "机器学习(一)",
            "date_published": "2020-10-05T12:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 数据预处理 </font></center>\n\n<p>数据处理可谓是机器学习的重中之重，接下来我所用到的数据集和代码如下：<a href=\"https://github.com/sunyuzero/cdn/blob/master/csv/Data.csv\">数据集</a>,<a href=\"https://github.com/sunyuzero/cdn/blob/master/csv/Data.py\">代码</a></p>\n<h2 id=\"导入库\"><a href=\"#导入库\" class=\"headerlink\" title=\"导入库\"></a>导入库</h2><p>首先需要导入python库函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##下面两个库都是机器学习最常用的2个库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"comment\">## 以下的库是数据预处理需要的库</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.impute <span class=\"keyword\">import</span> SimpleImputer</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> LabelEncoder, OneHotEncoder</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.compose <span class=\"keyword\">import</span> ColumnTransformer</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> StandardScaler</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导入数据集\"><a href=\"#导入数据集\" class=\"headerlink\" title=\"导入数据集\"></a>导入数据集</h2><p>原本的数据集为：</p>\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c1.png\" width=400></div>\n然后开始经过以下处理：\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataset = pd.read_csv(<span class=\"string\">&#x27;Data.csv&#x27;</span>)     <span class=\"comment\">##导入数据集,注意是相对路径</span></span><br><span class=\"line\">X = dataset.iloc[ : , : <span class=\"number\">-1</span> ].values    <span class=\"comment\">## X一直取数据集的最后一列（除了最后一列）</span></span><br><span class=\"line\">Y = dataset.iloc[ : , <span class=\"number\">3</span> ].values    <span class=\"comment\">## Y取第4列</span></span><br></pre></td></tr></table></figure>\n其中X为：\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c2.png\" width=200></div>\nY为：\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c3.png\" width=200></div>\n\n<h2 id=\"处理丢失数据\"><a href=\"#处理丢失数据\" class=\"headerlink\" title=\"处理丢失数据\"></a>处理丢失数据</h2><p>很多时候，我们得到的数据集中会有数据丢失的部分，通过以下处理，在丢失数据的部分给与平均值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imputer = SimpleImputer(missing_values = np.nan, strategy = <span class=\"string\">&quot;mean&quot;</span>)</span><br><span class=\"line\">imputer = imputer.fit(X[ : , <span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">X[ : , <span class=\"number\">1</span>:<span class=\"number\">3</span>] = imputer.transform(X[ : , <span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n<p>处理后的X如下，我们可以发现空白的部分被填上了平均值：</p>\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c4.png\" width=200></div>\n\n<h2 id=\"数据分类\"><a href=\"#数据分类\" class=\"headerlink\" title=\"数据分类\"></a>数据分类</h2><p>将数据集中的数据进行分类，相同的数字代表同一类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">labelencoder_X = LabelEncoder()</span><br><span class=\"line\">labelencoder_Y = LabelEncoder()</span><br><span class=\"line\"></span><br><span class=\"line\">X[ : , <span class=\"number\">0</span>] = labelencoder_X.fit_transform(X[ : , <span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">ct1 = ColumnTransformer([(<span class=\"string\">&quot;country&quot;</span> , OneHotEncoder() , [<span class=\"number\">1</span>])], <span class=\"string\">&#x27;drop&#x27;</span>)</span><br><span class=\"line\">ct2 = ColumnTransformer([(<span class=\"string\">&quot;country&quot;</span> , OneHotEncoder() , [<span class=\"number\">1</span>])], <span class=\"string\">&#x27;drop&#x27;</span>)</span><br><span class=\"line\">X = ct1.fit_transform(X).toarray()</span><br><span class=\"line\">Y = labelencoder_Y.fit_transform(Y)</span><br><span class=\"line\">```  </span><br><span class=\"line\">处理后的X如下，我们可以发现数据集都变成了数字，其中相同的类别数字相同：</span><br><span class=\"line\">&lt;div aligh=center&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c5.png&quot; width=200&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 拆分数据集</span></span><br><span class=\"line\">用train_test_split拆分数据集，其中test_size表示测试集所占数据集的比例</span><br><span class=\"line\">```python</span><br><span class=\"line\">X_train , X_test , Y_train , Y_test = train_test_split( X , Y , test_size = <span class=\"number\">0.2</span> , random_state = <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>处理后的X_train（训练集）如下，占80%：</p>\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c6.png\" width=200></div>\nX_test（数据集）如下，占20%：\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c7.png\" width=200></div>\n\n<h2 id=\"特征量化\"><a href=\"#特征量化\" class=\"headerlink\" title=\"特征量化\"></a>特征量化</h2><p>用特征标准化或Z值归一化实现特征量化，解决其他模型算法的特征在幅度，单位和范围姿态问题上变化很大的问题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc_X = StandardScaler()</span><br><span class=\"line\">X_train = sc_X.fit_transform(X_train)</span><br><span class=\"line\">X_test = sc_X.transform(X_test)</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "机器学习"
            ]
        },
        {
            "id": "sunyuzero.top/2020/10/01/java%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "sunyuzero.top/2020/10/01/java%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "java学习笔记（一）",
            "date_published": "2020-10-01T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> java基本概念 </font></center>\n\n<h1 id=\"JVM-JRE与JDK\"><a href=\"#JVM-JRE与JDK\" class=\"headerlink\" title=\"JVM,JRE与JDK\"></a>JVM,JRE与JDK</h1><p>java语言有一个非常显著的特征就是跨平台性，无论在什么操作系统上，java程序都能够运行，这就得益于java的JVM。</p>\n<ul>\n<li>JVM<br>&emsp;java虚拟机，简称JVM(java virtual machine），是运行java程序的假想计算机，是java程序的运行环境，我们编写的java代码，都运行在JVM上。<br>&emsp;JVM为什么能使java具有跨平台性呢？原因就在于每个操作系统都具有一个不同的JVM，这些JVM充当了java程序与操作系统之间的中介，java程序直接运行在JVM中，形成的字节码在转运到操作系统，使得java程序在不同平台不需要重新编译，具有跨平台性。<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java1.png\" width=600></div></li>\n<li>JRE与JDK<br>&emsp;JRE(Java Runtime Environment），是java程序运行时所需的环境，包括JVM和运行时所需要的核心类库，如果只需要运行java程序的话，那么只需要JRE即可。<br>&emsp;JDK(Java Development Kit），是java程序开发的工具包，包括JRE和开发人员使用的工具，如果需要开发java程序，那么就需要安装JDK了。<br>&emsp;这三者的关系是JDK&gt;JRE&gt;JVM，如下图所示<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java2.png\" width=600></div>\n\n</li>\n</ul>\n<h1 id=\"用cmd运行java程序\"><a href=\"#用cmd运行java程序\" class=\"headerlink\" title=\"用cmd运行java程序\"></a>用cmd运行java程序</h1><p>首先将cmd定位在java程序所在的文件夹中，然后依次使用javac命令和java命令，javac是对java程序进行编译成class字节码，java命令则是运行编译好的class文件，具体操作如下图所示，其中Test.java是我已经编写好的程序</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java3.png\" width=600></div>\n\n<h1 id=\"java程序的注释\"><a href=\"#java程序的注释\" class=\"headerlink\" title=\"java程序的注释\"></a>java程序的注释</h1><p>java程序的注释与c++类似，有2种注释方法：单行注释和多行注释<br>单行注释：//注释内容，//之后的内容将被计算机忽略<br>多行注释：/* 注释内容，/* */之间的内容将被计算机忽略，可以跨行 */ </p>\n<h1 id=\"java关键字和标识符的命名规范\"><a href=\"#java关键字和标识符的命名规范\" class=\"headerlink\" title=\"java关键字和标识符的命名规范\"></a>java关键字和标识符的命名规范</h1><p>&emsp;和c++语言类似，java也有预先定义的关键字，这些关键字都是全小写，都有特定含义，变量名和类名等都不能与关键字相同。java区分大小写，所以，命名时可以使用标识符的大写，但不建议。<br>&emsp;标识符就是我们自己定义的内容的名称，标识符可以包含英文字母，数字，美元符号$和下划线_,但标识符不能以数字开头<br>建议标识符的命名规范：</p>\n<ul>\n<li>类名规范：首字母大写，后面每个单词的首字母大写（大驼峰式）</li>\n<li>变量名规范：首字母小写，后面每个单词首字母大写（小驼峰式）</li>\n<li>方法名规范：同变量名</li>\n</ul>\n<h1 id=\"常量与变量\"><a href=\"#常量与变量\" class=\"headerlink\" title=\"常量与变量\"></a>常量与变量</h1><ul>\n<li><font face=\"黑体\" size=5>1.常量分为字符串常量，整数常量，浮点数常量，字符常量，布尔常量，空常量，用const修饰</font><br>字符串常量：String，以’\\0’结束，如”abc”,”123”,占n+1个字节，其中n为组成字符串的字符个数。<br>整数常量：short（2字节），int（4字节），long（8字节）<br>浮点数常量：float（4字节），double（8字节）<br>字符常量：char（1字节）<br>布尔常量：bool（1字节）<br>空常量：null（0字节）</li>\n<li><font face=\"黑体\" size=5>2.变量，即可以改变的常量，没有const修饰的常量，其类型与常量相同</font><br>变量的使用注意事项：</li>\n<li>如果创建多个变量，变量名不可以重复</li>\n<li>对于float和long类型，字母后缀的F和L不要去掉</li>\n<li>如果使用byte和short类型的变量，右侧的数据值不要超过左侧类型的范围</li>\n<li>一定要对变量赋值后才能使用</li>\n<li>变量使用不能超过作用域</li>\n</ul>\n<h1 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h1><ul>\n<li>自动类型转换，数据类型从小到大，将会自动发生类型转换。</li>\n<li>强制类型转换，当数据类型从大到小，则需要强制转换，不能自动完成,可能会发生精度损失<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自动转换</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> b=a;  <span class=\"comment\">//从int到long，自动转换</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> c=<span class=\"number\">0.1</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> d=c;  <span class=\"comment\">//从float到double，自动转换</span></span><br><span class=\"line\"><span class=\"comment\">//强制转换</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">100L</span>; <span class=\"comment\">//会报错，int无法自动转换为long</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num = (<span class=\"keyword\">int</span>)<span class=\"number\">100L</span>;  <span class=\"comment\">//正确，实现了强制转换</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> s=<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">a=(<span class=\"keyword\">int</span>)s;   <span class=\"comment\">//正确，将字符串强制转化成int整数,将会输出a的ASCII码</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"ASCII码表\"><a href=\"#ASCII码表\" class=\"headerlink\" title=\"ASCII码表\"></a>ASCII码表</h1><p>ASCII是使用7位二进制数（剩下的1位二进制为0）来表示所有的大写和小写字母，数字0 到9、标点符号，基本上所有的计算机语言都会用到ASCII码进行编码，JAVA也是如此，只不过java也是使用了Unicode编码，把ASCII码表放在这里便于查看</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java4.jpg\" width=600></div>\n\n<h1 id=\"java编译器的一些优化\"><a href=\"#java编译器的一些优化\" class=\"headerlink\" title=\"java编译器的一些优化\"></a>java编译器的一些优化</h1><ul>\n<li>对于byte，short，char三种类型，如果右侧赋值的数据大小没有超过范围，那么java编译器会自动加上（byte），（short），（char），例如：<br>byte a = 30 &lt;==&gt; byte a = (byte) 30</li>\n<li>但是，当右侧赋值的数据大小超过范围后，java编译器则会直接报错</li>\n<li>java中的加法默认将加数当作int数据类型，所以使用2个short类型的变量相加赋予另一个short类型时，编译器会报错，但是当short类型的右边赋予的是两个常量相加，那么编译器不会报错，而是会直接先将常量相加直接赋予short：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">short</span> a=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">short</span> b=<span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">short</span> c=a+b;   <span class=\"comment\">//会报错</span></span><br><span class=\"line\"><span class=\"keyword\">short</span> c=<span class=\"number\">10</span>+<span class=\"number\">20</span>;  <span class=\"comment\">//正确</span></span><br></pre></td></tr></table></figure>\n报错原因：<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java5.png\" width=600></div>\n\n\n</li>\n</ul>\n<h1 id=\"jshell的使用\"><a href=\"#jshell的使用\" class=\"headerlink\" title=\"jshell的使用\"></a>jshell的使用</h1><p>jshell是java的交互式运行环境，类似于python的命令行的交互式运行环境，直接在命令提示符中输入jshell进入Java交互环境，之后直接输入一条java语句，便能直接输出语句结果，注意jshell中的语句不用以分号结尾。</p>\n<h1 id=\"选择结构\"><a href=\"#选择结构\" class=\"headerlink\" title=\"选择结构\"></a>选择结构</h1><p>1.if语句<br>在Java程序中，如果要根据条件来决定是否执行某一段代码，就需要if语句。根据if的计算结果（true还是false），JVM决定是否执行if语句块（即花括号{}包含的所有语句）。</p>\n<p>2.除了if语句外，还有一种条件判断，是根据某个表达式的结果，分别去执行不同的分支。switch语句根据switch (表达式)计算的结果，跳转到匹配的case结果，然后继续执行后续语句，直到遇到break结束执行。switch语句的基本语法是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (option) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\">// option=1时执行语句</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"comment\">// option=2时执行语句</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"comment\">// option=3时执行语句</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"comment\">// option都不符合时执行语句</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h1><p>循环语句就是让计算机根据条件做循环计算，在条件满足时继续循环，条件不满足时退出循环。<br>除了for，while外，Java还提供了一种for each循环，它可以更简单地遍历数组，和for循环相比，for each循环的变量n不再是计数器，而是直接对应到数组的每个元素。但是，for each循环无法指定遍历顺序，也无法获取数组的索引。它的用法如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] ns = &#123; <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n : ns) &#123;</span><br><span class=\"line\">   System.out.println(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"break和continue\"><a href=\"#break和continue\" class=\"headerlink\" title=\"break和continue\"></a>break和continue</h2><h2 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h2><p>在循环过程中，可以使用break语句跳出当前循环，break会跳出当前循环，当有多个嵌套的循环时，break只能跳出最内层的循环，然后剩下的循环都不会执行了。</p>\n<h2 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a>continue</h2><p>continue是提前结束本次循环，直接继续执行下次循环,在多层嵌套的循环中，continue语句同样是结束本次自己所在的循环。比如算从1-100的奇数的和时用continue就会很方便：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    sum+=i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><h2 id=\"方法的注意事项\"><a href=\"#方法的注意事项\" class=\"headerlink\" title=\"方法的注意事项\"></a>方法的注意事项</h2><ul>\n<li>方法必须定义在类中，且不能在方法中再定义方法</li>\n<li>方法定义的前后顺序无所谓</li>\n<li>如果方法有返回值，那么必须加上return返回值，不能没有</li>\n<li>对于void方法，不能return加返回值，只能直接return；</li>\n<li>一个方法可以有多个return语句，但是必须保证能执行的只有一个 </li>\n</ul>\n<h2 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h2><p>在一个类中，我们可以定义多个方法。如果有一系列方法，它们的功能都是类似的，只有参数有所不同，那么，可以把这一组方法名做成同名方法，这种方法名相同，但各自的参数不同，称为方法重载（Overload），方法重载的目的是，功能类似的方法使用同一名字，更容易记住，因此，调用起来更简单。<br>例如，String类提供了多个重载方法indexOf()，可以查找子串：</p>\n<ul>\n<li>int indexOf(int ch)：根据字符的Unicode码查找；</li>\n<li>int indexOf(String str)：根据字符串查找；</li>\n<li>int indexOf(int ch, int fromIndex)：根据字符查找，但指定起始位置；</li>\n<li>int indexOf(String str, int fromIndex)根据字符串查找，但指定起始位置。</li>\n</ul>\n<h2 id=\"重载的注意事项\"><a href=\"#重载的注意事项\" class=\"headerlink\" title=\"重载的注意事项\"></a>重载的注意事项</h2><p>1.方法的重载与下列因素相关：</p>\n<ul>\n<li>参数的个数不同</li>\n<li>参数的类型不同</li>\n<li>参数的多类型顺序不同</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> z)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">double</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\">puclic <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//以上正确，都能构成重载</span></span><br></pre></td></tr></table></figure>\n\n<p>2.方法的重载与下列因素无关：</p>\n<ul>\n<li>与参数的名称无关</li>\n<li>与方法的返回值类型无关</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sun</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//以上不能构成重载会报错，因为与方法参数的名称无关</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//以上也不能构成重载会报错，因为与方法的返回类型无关</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p>定义一个数组类型的变量，使用数组类型“类型[]”，有以下几种创建方法:</p>\n<ul>\n<li>int[] a={1,2,3,4,5};    //根据{}之间的元素个数自动创建</li>\n<li>int[] a=new int{1,2,3,4,5}  //同上</li>\n<li>int[] a=new int[5];a={1,2,3,4,5};    //先创建容量为5的数组，再赋值</li>\n</ul>\n<h2 id=\"数组的内存\"><a href=\"#数组的内存\" class=\"headerlink\" title=\"数组的内存\"></a>数组的内存</h2><p>1.当动态创建一个数组时，系统将会在栈区先写入数组名称，然后在堆区开辟空间存放数组元素，其中数组的索引也是存放在栈区的，当你要修改数组元素的值时，你首先将访问栈区的索引，然后这个索引再指向堆区对应的内存，如下图所示:</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java7.png\" width=600></div>\n\n<p>2.当一个数组赋值给另一个数组时：int[] arrayB = arrayA;这时候是将arrayA的地址直接赋值给arrayB了，此时arrayA和arrayB共用一个内存，本质上时同一个数组，其内存分配如下所示：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java8.png\" width=600></div>\n\n<h2 id=\"数组注意事项：\"><a href=\"#数组注意事项：\" class=\"headerlink\" title=\"数组注意事项：\"></a>数组注意事项：</h2><ul>\n<li>数组所有元素初始化为默认值，整型都是0，浮点型是0.0，布尔型是false；</li>\n<li>要访问数组中的某一个元素，需要使用索引。数组索引从0开始</li>\n<li>可以修改数组中的某一个元素，使用赋值语句</li>\n<li>可以用数组变量.length获取数组大小</li>\n<li>数组是引用类型，在使用索引访问数组元素时，如果索引超出范围，运行时将报错</li>\n<li>直接输出数组名称将会得到数组的首地址</li>\n<li>数组的2个异常：超出数组索引(ArrayIndexOutOfBoundsException),空指针异常(NullPointerException):创建一个空数组时访问数组元素将会出现空指针异常</li>\n</ul>\n<h2 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h2><p>1.简单遍历输出<br>由于java提供了获取数组长度的方法（array.length），所以对于数组的遍历非常方便：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] array=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;array.length;i++) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(array[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.查找数组最大值<br>以最大值为例，只需要用一个变量记录首元素，在遍历数组时，每次比较得出最大值更新这个变量即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] array=&#123;<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> max=array[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;array.length;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(max&lt;array[i]) max=array[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;最大值为：&quot;</span>+max);</span><br></pre></td></tr></table></figure>\n<p>3.数组的排序<br>对数组的排序中，常用的排序算法有冒泡排序、插入排序和快速排序等。以冒泡排序为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ns.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; ns.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ns[j] &gt; ns[j+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = ns[j];</span><br><span class=\"line\">        ns[j] = ns[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">        ns[j+<span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在java中，其标准库内已经内置了排序功能，我们也可以对它直接进行调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ns = &#123; <span class=\"number\">28</span>, <span class=\"number\">12</span>, <span class=\"number\">89</span>, <span class=\"number\">73</span>, <span class=\"number\">65</span>, <span class=\"number\">18</span>, <span class=\"number\">96</span>, <span class=\"number\">50</span>, <span class=\"number\">8</span>, <span class=\"number\">36</span> &#125;;</span><br><span class=\"line\">        Arrays.sort(ns);</span><br><span class=\"line\">        System.out.println(Arrays.toString(ns));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h1><p>二维数组可以理解为在一个数组中再定义数组，例如：</p>\n<pre><code>int[][] ns = &#123;\n        &#123; 1, 2, 3, 4 &#125;,\n        &#123; 5, 6, 7, 8 &#125;,\n        &#123; 9, 10, 11, 12 &#125;\n    &#125;;</code></pre>\n<p>因为ns包含3个数组，所以ns的长度为3</p>\n<h2 id=\"二维数组的内存\"><a href=\"#二维数组的内存\" class=\"headerlink\" title=\"二维数组的内存\"></a>二维数组的内存</h2><p>二维数组在系统中的内存占用如下：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java9.png\" width=500></div>\n\n<h2 id=\"打印二维数组\"><a href=\"#打印二维数组\" class=\"headerlink\" title=\"打印二维数组\"></a>打印二维数组</h2><p>打印二维数组可以用两层嵌套循环：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] arr : ns) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n : arr) &#123;</span><br><span class=\"line\">        System.out.print(n);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&#x27;, &#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>也可以直接使用Java标准库的Arrays.deepToString()直接打印二维数组。</p>\n",
            "tags": [
                "blog",
                "学习",
                "java"
            ]
        },
        {
            "id": "sunyuzero.top/2020/09/23/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/",
            "url": "sunyuzero.top/2020/09/23/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/",
            "title": "算法学习",
            "date_published": "2020-09-23T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 算法学习 </font></center>\n\n<h1 id=\"getchar和putchar\"><a href=\"#getchar和putchar\" class=\"headerlink\" title=\"getchar和putchar\"></a>getchar和putchar</h1><p>getchar用于输入单个字符，putchar用于输出单个字符</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> c;</span><br><span class=\"line\">c=getchar();</span><br><span class=\"line\"><span class=\"built_in\">putchar</span>(c);</span><br></pre></td></tr></table></figure>\n<h1 id=\"常见的math函数\"><a href=\"#常见的math函数\" class=\"headerlink\" title=\"常见的math函数\"></a>常见的math函数</h1><p>使用math内置函数需要添加头文件<cmath></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">fabs</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//取x的绝对值</span></span><br><span class=\"line\"><span class=\"built_in\">floor</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//向上取整</span></span><br><span class=\"line\"><span class=\"built_in\">ceil</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//向下取整</span></span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"keyword\">double</span> r,<span class=\"keyword\">double</span> p) <span class=\"comment\">//返回r的p次方</span></span><br><span class=\"line\"><span class=\"built_in\">sqrt</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//返回x的算术平方根</span></span><br><span class=\"line\"><span class=\"built_in\">log</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//返回ln(x)</span></span><br><span class=\"line\"><span class=\"built_in\">sin</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//返回正弦值，要求x为弧度制</span></span><br><span class=\"line\"><span class=\"built_in\">acos</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//返回反余弦值，pi=acos(-1);</span></span><br><span class=\"line\">round(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//对x进行四舍五入取整</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"memset函数\"><a href=\"#memset函数\" class=\"headerlink\" title=\"memset函数\"></a>memset函数</h1><p>memset用于对数组中的每一个元素赋予相同的值（0或-1）,下面的这个函数即是对数组a的元素全部赋予0的操作<br>memset(a,0,sizeof(a));</p>\n<h1 id=\"对字符数组的输入输出\"><a href=\"#对字符数组的输入输出\" class=\"headerlink\" title=\"对字符数组的输入输出\"></a>对字符数组的输入输出</h1><h2 id=\"scanf和printf\"><a href=\"#scanf和printf\" class=\"headerlink\" title=\"scanf和printf\"></a>scanf和printf</h2><p>scanf(“%c”,&amp;c)用于输入单个字符,scanf(“%s”,s)用于输入字符数组，%s识别空格作为字符串的结尾</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,str);   <span class=\"comment\">//输入TAT TAT</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,str);  <span class=\"comment\">//输出TAT</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"gets和puts\"><a href=\"#gets和puts\" class=\"headerlink\" title=\"gets和puts\"></a>gets和puts</h2><p>gets用于输入一行字符串，以’\\n’作为识别结尾,puts用于输出一行字符串并自动换行</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">10</span>];</span><br><span class=\"line\">gets(str);</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(str);</span><br></pre></td></tr></table></figure>\n<h1 id=\"cstring的使用\"><a href=\"#cstring的使用\" class=\"headerlink\" title=\"cstring的使用\"></a>cstring的使用</h1><p>使用string类的内置函数需要包含头文件<cstring></p>\n<h2 id=\"strlen\"><a href=\"#strlen\" class=\"headerlink\" title=\"strlen()\"></a>strlen()</h2><p>strlen()函数用于获取字符串的长度</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">10</span>];</span><br><span class=\"line\">gets(str)</span><br><span class=\"line\"><span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(str);  <span class=\"comment\">//获取字符串的长度</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"strcmp\"><a href=\"#strcmp\" class=\"headerlink\" title=\"strcmp()\"></a>strcmp()</h2><p>strcmp(str1,str2)函数用于比较2个字符串的大小（按照字典序），返回一个整数，若str1&gt;str2，则返回一个正整数，若str1&lt;str2，则返回一个负整数,若str1=str2,则返回0。示例如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str1[<span class=\"number\">10</span>],str2[<span class=\"number\">10</span>];</span><br><span class=\"line\">gets(str1);    <span class=\"comment\">//Dear</span></span><br><span class=\"line\">gets(str2);       <span class=\"comment\">//Cat</span></span><br><span class=\"line\"><span class=\"built_in\">strcmp</span>(str1,str2)  <span class=\"comment\">//返回一个正整数</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"strcpy\"><a href=\"#strcpy\" class=\"headerlink\" title=\"strcpy()\"></a>strcpy()</h2><p>strcpy(str1,str2)函数可以把str2复制给str1</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str1[<span class=\"number\">50</span>],str2[<span class=\"number\">50</span>];</span><br><span class=\"line\">gets(str1);   <span class=\"comment\">//Hello</span></span><br><span class=\"line\">gets(str2);   <span class=\"comment\">//World</span></span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str1,str2);</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(str1);   <span class=\"comment\">//World</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"strcat\"><a href=\"#strcat\" class=\"headerlink\" title=\"strcat()\"></a>strcat()</h2><p>strcat(str1,str2)函数可以将str2接到str1后面</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str1[<span class=\"number\">50</span>],str2[<span class=\"number\">50</span>];</span><br><span class=\"line\">gets(str1);   <span class=\"comment\">//Hello</span></span><br><span class=\"line\">gets(str2);   <span class=\"comment\">//World</span></span><br><span class=\"line\"><span class=\"built_in\">strcat</span>(str1,str2);</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(str1);   <span class=\"comment\">//HelloWorld</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"sscanf和sprintf\"><a href=\"#sscanf和sprintf\" class=\"headerlink\" title=\"sscanf和sprintf\"></a>sscanf和sprintf</h1><p>sscanf和sprintf是处理字符串的利器，可以理解为string+scanf(printf),其基本格式为：sscanf(str,”%d”,&amp;n);sprinf(str,”%d”,n);</p>\n<h2 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h2><p>sscanf的用法是把字符数组str里的内容以”%d”的格式写入n中，而sprintf是把n的内容写入str中，示例如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">50</span>],str1[<span class=\"number\">50</span>]=<span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">sscanf</span>(str1,<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(str,<span class=\"string\">&quot;%d&quot;</span>,m);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n%s&quot;</span>,n,str);   <span class=\"comment\">//n=123,str=&#x27;100&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"进阶用法\"><a href=\"#进阶用法\" class=\"headerlink\" title=\"进阶用法\"></a>进阶用法</h2><p>不仅如此，sscanf和sprintf还可以进行复杂的输入输出，如下列代码所示</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n;<span class=\"keyword\">double</span> db;</span><br><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">50</span>],str1[<span class=\"number\">50</span>]=<span class=\"string\">&quot;2020:3.14,sscanf&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">sscanf</span>(str1,<span class=\"string\">&quot;%d:%lf,%s&quot;</span>,&amp;n,&amp;db,&amp;str);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n%.2f\\n%s\\n&quot;</span>,n,db,str);    <span class=\"comment\">//n=2020,db=3.14,str=sscanf</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> b=<span class=\"number\">2020</span>;<span class=\"keyword\">double</span> db=<span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">100</span>],str1[<span class=\"number\">100</span>]=<span class=\"string\">&quot;sprintf&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(str,<span class=\"string\">&quot;%d:%.2f,%s&quot;</span>,b,db,str1);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,str);     <span class=\"comment\">//str=2020:3.14,sprintf</span></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "blog",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/09/19/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/",
            "url": "sunyuzero.top/2020/09/19/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/",
            "title": "BFS学习",
            "date_published": "2020-09-19T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> BFS学习 </font></center>\nBFS，广度优先搜索，也称深度优先搜索，即搜索每次可达的所有点并进行标记，直到搜索范围覆盖所需要寻找的点。下面我们从迷宫搜索来看看DFS的应用。\n\n<h2 id=\"迷宫搜索\"><a href=\"#迷宫搜索\" class=\"headerlink\" title=\"迷宫搜索\"></a>迷宫搜索</h2><p>寻找迷宫中从起点到终点的最短可行路径。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>用二维数组记录迷宫，并标记迷宫的障碍点，再通过DFS找出最短路径。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">note</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> next[<span class=\"number\">4</span>][<span class=\"number\">2</span>]=&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;,&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">note</span> <span class=\"title\">que</span>[2501];</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">51</span>][<span class=\"number\">51</span>]=&#123;<span class=\"number\">0</span>&#125;,book[<span class=\"number\">51</span>][<span class=\"number\">51</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m,n;<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i][j]); </span><br><span class=\"line\">    <span class=\"keyword\">int</span> startX,startY,endX,endY,tx,ty;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;startX,&amp;startY,&amp;endX,&amp;endY);</span><br><span class=\"line\">    book[startX][startY]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> head=<span class=\"number\">1</span>,tail=<span class=\"number\">2</span>;</span><br><span class=\"line\">    que[head].x=startX;que[head].y=startY;</span><br><span class=\"line\">    que[head].f=<span class=\"number\">0</span>;que[head].s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(head&lt;tail)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">            tx=que[head].x+next[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">            ty=que[head].y+next[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tx&lt;<span class=\"number\">1</span>||tx&gt;m||ty&lt;<span class=\"number\">1</span>||ty&gt;n)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[tx][ty]==<span class=\"number\">0</span>&amp;&amp;book[tx][ty]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                book[tx][ty]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                que[tail].x=tx;</span><br><span class=\"line\">                que[tail].y=ty;</span><br><span class=\"line\">                que[tail].f=head;</span><br><span class=\"line\">                que[tail].s=que[head].s+<span class=\"number\">1</span>;</span><br><span class=\"line\">                tail++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(que[tail].x==endX&amp;&amp;que[tail].y==endY)&#123;</span><br><span class=\"line\">                flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag==<span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        head++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,que[tail<span class=\"number\">-1</span>].s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "blog",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/09/16/csp%E5%88%9D%E4%BD%93%E9%AA%8C/",
            "url": "sunyuzero.top/2020/09/16/csp%E5%88%9D%E4%BD%93%E9%AA%8C/",
            "title": "csp初体验",
            "date_published": "2020-09-16T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 2020CSP第二场 </font></center>\n\n<p>趁着学校报团免费参加了2020csp第二场，被血虐而归。前2题属于签到题，题目本身并不难，主要是要慢慢分析。由于太弱，只能带来前2题的题解。</p>\n<h2 id=\"第一题题目大意\"><a href=\"#第一题题目大意\" class=\"headerlink\" title=\"第一题题目大意\"></a>第一题题目大意</h2><p>给定一个点，要求从输入众多的点中找出距离该点最近的3个点并依次输出编号。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这个题用数组记录然后排序会有点麻烦，因为可能存在距离相同的点。最简单的方式是直接搜索3次，每次找出最近的点。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,x,y,x1,y1;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[n]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;x1&gt;&gt;y1;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp=(x-x1)*(x-x1)+(y-y1)*(y-y1);</span><br><span class=\"line\">        a[i]=temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p&lt;<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans=<span class=\"number\">10000000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) ans=min(ans,a[i]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p&gt;=<span class=\"number\">3</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i]==ans)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span>&lt;&lt;i+<span class=\"number\">1</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                p++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i]==ans)&#123;</span><br><span class=\"line\">                a[i]=<span class=\"number\">10000000</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第二题题目大意\"><a href=\"#第二题题目大意\" class=\"headerlink\" title=\"第二题题目大意\"></a>第二题题目大意</h2><p>给定一连串的点的位置以代替行走路径，以及给定区域，判断行走路径是否经过该区域并且判断其是否在区域内逗留（即大于k个点在此区域中）</p>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>用2个数组分别记录点的横坐标和纵坐标，判断点是否在区域内，用变量记录即可。</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k,t,x1,y1,x2,y2;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;t&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;<span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>,p1=<span class=\"number\">0</span>,p3=<span class=\"number\">0</span>,p4=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[t]=&#123;<span class=\"number\">0</span>&#125;,b[t]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p1=<span class=\"number\">0</span>;ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;a[j]&gt;&gt;b[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> p2=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(a[j]&gt;=x1&amp;&amp;a[j]&lt;=x2&amp;&amp;b[j]&gt;=y1&amp;&amp;b[j]&lt;=y2)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                p1++;p2++;j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans=max(ans,p2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p1) p3++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans&gt;=k) p4++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;p3&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;p4&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "blog",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/09/11/%E7%BA%BF%E6%80%A7%E8%A1%A8/",
            "url": "sunyuzero.top/2020/09/11/%E7%BA%BF%E6%80%A7%E8%A1%A8/",
            "title": "线性表",
            "date_published": "2020-09-11T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 线性表学习 </font></center>\n\n<h1 id=\"顺序表\"><a href=\"#顺序表\" class=\"headerlink\" title=\"顺序表\"></a>顺序表</h1><p>顺序表，即线性表的顺序存储结构，采用结构体类型SqList表示为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sqList</span>&#123;</span></span><br><span class=\"line\">    ElementType data[maxSize];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"顺序表的实现\"><a href=\"#顺序表的实现\" class=\"headerlink\" title=\"顺序表的实现\"></a>顺序表的实现</h2><h3 id=\"建立顺序表\"><a href=\"#建立顺序表\" class=\"headerlink\" title=\"建立顺序表\"></a>建立顺序表</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqList *L=(sqList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(sqList));</span><br><span class=\"line\">L-&gt;length=<span class=\"number\">0</span>;<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i&lt;n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;L-&gt;data[i]);    </span><br><span class=\"line\">    L-&gt;length++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查找顺序表数据位置\"><a href=\"#查找顺序表数据位置\" class=\"headerlink\" title=\"查找顺序表数据位置\"></a>查找顺序表数据位置</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">search</span><span class=\"params\">(sqList* L,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;L-&gt;length&amp;&amp;L-&gt;data[i]！=e)</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&gt;L-length) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插入数据元素\"><a href=\"#插入数据元素\" class=\"headerlink\" title=\"插入数据元素\"></a>插入数据元素</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sert</span><span class=\"params\">(sqList *L,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j=L-&gt;length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&gt;i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        L-&gt;data[j]=L-&gt;data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;data[i<span class=\"number\">-1</span>]=e;</span><br><span class=\"line\">    L-&gt;length++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除顺序表\"><a href=\"#删除顺序表\" class=\"headerlink\" title=\"删除顺序表\"></a>删除顺序表</h3><p>free(L);</p>\n<h2 id=\"顺序表的应用\"><a href=\"#顺序表的应用\" class=\"headerlink\" title=\"顺序表的应用\"></a>顺序表的应用</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给定一个顺序表，删除其中所有值等于x的元素，要求时间复杂度O(N),空间复杂度O(1)</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteX</span><span class=\"params\">(sqList *L,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;L-&gt;length)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L-&gt;data[i]==x) i++;</span><br><span class=\"line\">        L-&gt;data[k]=L-&gt;data[i];</span><br><span class=\"line\">        k++;i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;length=k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L-&gt;length;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,L-&gt;data[i]);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表，即线性表的链式存储结构，采用结构体的表示方式为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nodeList</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    nodeList *next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表的实现\"><a href=\"#链表的实现\" class=\"headerlink\" title=\"链表的实现\"></a>链表的实现</h2><h3 id=\"链表的建立\"><a href=\"#链表的建立\" class=\"headerlink\" title=\"链表的建立\"></a>链表的建立</h3><p>1.头插法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodeList *p,*q;</span><br><span class=\"line\">p=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">p-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    q=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">    q-&gt;data=x;</span><br><span class=\"line\">    q-&gt;next=p-&gt;next;</span><br><span class=\"line\">    p-&gt;next=q;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.尾插法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodeList *head,*p,*q;</span><br><span class=\"line\">head=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">p=head;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    q=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">    q-&gt;data=x;</span><br><span class=\"line\">    p-&gt;next=q;</span><br><span class=\"line\">    p=q;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p-&gt;next=<span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"链表的插入元素与删除元素\"><a href=\"#链表的插入元素与删除元素\" class=\"headerlink\" title=\"链表的插入元素与删除元素\"></a>链表的插入元素与删除元素</h3><p>1.插入元素</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sertElement</span><span class=\"params\">(nodeList *L,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    nodeList *p=L;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&lt;i&amp;&amp;p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=p-&gt;next;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        nodeList *s=(nodeList*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">        s-&gt;data=e;</span><br><span class=\"line\">        s-&gt;next=p-&gt;next;</span><br><span class=\"line\">        p-&gt;next=s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.删除元素</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteElement</span><span class=\"params\">(nodeList *L,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    nodeList *p=L,*q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>&amp;&amp;p-&gt;data!=e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=p-&gt;next;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    q=p-&gt;next;</span><br><span class=\"line\">    p-&gt;next=p-&gt;next-&gt;next;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"链表的删除\"><a href=\"#链表的删除\" class=\"headerlink\" title=\"链表的删除\"></a>链表的删除</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">freeList</span><span class=\"params\">(nodeList *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    nodeList *q=L,*p=L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">        q=p;</span><br><span class=\"line\">        p=q-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表的应用\"><a href=\"#链表的应用\" class=\"headerlink\" title=\"链表的应用\"></a>链表的应用</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给定一个链表，设计一个算法使其元素递增。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sortList</span><span class=\"params\">(nodeList *head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    nodeList *q,*p,*s;</span><br><span class=\"line\">    q=head-&gt;next;p=head-&gt;next-&gt;next;</span><br><span class=\"line\">    s=head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q-&gt;data&gt;=p-&gt;data)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        q-&gt;next=p-&gt;next;p-&gt;next=q;</span><br><span class=\"line\">        p=head-&gt;next;</span><br><span class=\"line\">        q=q-&gt;next</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/09/03/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/",
            "url": "sunyuzero.top/2020/09/03/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/",
            "title": "初探DFS",
            "date_published": "2020-09-03T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> DFS入门 </font></center>\n\n<a id=\"more\"></a>\n<h2 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h2><p>DFS，即深度优先搜索，是最重要的搜索思想之一，其核心在于解决当下问题，而下一步的做法和当前一样。其基本模型如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> step)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    判断边界</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//解决当下问题    </span></span><br><span class=\"line\">        dfs(step+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"dfs之数的全排列\"><a href=\"#dfs之数的全排列\" class=\"headerlink\" title=\"dfs之数的全排列\"></a>dfs之数的全排列</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给定一个正整数n(n&lt;10),写出1~n的全排列</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>利用dfs基本模型来逐步解决</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">10</span>]=&#123;<span class=\"number\">0</span>&#125;,book[<span class=\"number\">10</span>]=&#123;<span class=\"number\">0</span>&#125;,n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> step)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(step&gt;=n+<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a[i]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(book[i]==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[m]=i;</span><br><span class=\"line\">            book[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs(step+<span class=\"number\">1</span>);</span><br><span class=\"line\">            book[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"dfs之迷宫搜索\"><a href=\"#dfs之迷宫搜索\" class=\"headerlink\" title=\"dfs之迷宫搜索\"></a>dfs之迷宫搜索</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给定一个n行m列迷宫，要求从寻找从起点到终点的最短路径</p>\n<h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>直接使用dfs搜索找出最短路径</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> startX,startY,endX,endY,min=<span class=\"number\">99999</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">51</span>][<span class=\"number\">51</span>]=&#123;<span class=\"number\">0</span>&#125;,book[<span class=\"number\">51</span>][<span class=\"number\">51</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> step)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==endX&amp;&amp;y==endY)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(step&lt;min) min=step;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> next[<span class=\"number\">4</span>][<span class=\"number\">2</span>]=&#123;</span><br><span class=\"line\">        &#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tx,ty;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">3</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tx=x+next[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        ty=y+next[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tx&lt;<span class=\"number\">1</span>||ty&lt;<span class=\"number\">1</span>||tx&gt;n||ty&gt;m)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[tx][ty]==<span class=\"number\">0</span>&amp;&amp;book[tx][ty]==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            book[tx][ty]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs(tx,ty,step+<span class=\"number\">1</span>);</span><br><span class=\"line\">            book[tx][ty]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;startX,&amp;startY,&amp;endX,&amp;endY);</span><br><span class=\"line\">    book[startX][startY]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    dfs(startX,startY,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s%d&quot;</span>,<span class=\"string\">&quot;最少步数为：&quot;</span>,min);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/09/01/%E6%9A%B4%E5%8A%9B%E6%9E%9A%E4%B8%BE/",
            "url": "sunyuzero.top/2020/09/01/%E6%9A%B4%E5%8A%9B%E6%9E%9A%E4%B8%BE/",
            "title": "暴力枚举",
            "date_published": "2020-09-01T10:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=7> 暴力枚举学习 </font></center>\n\n<a id=\"more\"></a>\n<h1 id=\"火柴棍游戏\"><a href=\"#火柴棍游戏\" class=\"headerlink\" title=\"火柴棍游戏\"></a>火柴棍游戏</h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>&emsp;给定确定的n(n&lt;=24)根火柴，要求全部使用并摆出A+B=C的等式，其中A,B,C均为整数，求问共有多少种摆法。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>&emsp;将0-9这10个数字所需要的火柴棍个数记录在数组当中，通过暴力枚举来找出其中符合的个数。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">10</span>]=&#123;<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fn</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">1000</span>) <span class=\"keyword\">return</span> f[(x/<span class=\"number\">1000</span>)]+f[x/<span class=\"number\">100</span>%<span class=\"number\">10</span>]+f[x/<span class=\"number\">10</span>%<span class=\"number\">10</span>]+f[x%<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">100</span>&amp;&amp;x&lt;<span class=\"number\">1000</span>) <span class=\"keyword\">return</span> f[x/<span class=\"number\">100</span>]+f[x/<span class=\"number\">10</span>%<span class=\"number\">10</span>]+f[x%<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>&amp;&amp;x&lt;<span class=\"number\">100</span>) <span class=\"keyword\">return</span> f[x/<span class=\"number\">10</span>]+f[x%<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> f[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,<span class=\"built_in\">abs</span>=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">1111</span>;i++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">1111</span>;j++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fn(i)+fn(j)+fn(i+j)==n<span class=\"number\">-4</span>) <span class=\"built_in\">abs</span>++;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s%d%s&quot;</span>,<span class=\"string\">&quot;情况共有&quot;</span>,<span class=\"built_in\">abs</span>,<span class=\"string\">&quot;种&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "学习",
                "算法"
            ]
        }
    ]
}