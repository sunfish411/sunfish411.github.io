{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sunyuzero-Blog • All posts by \"算法\" category",
    "description": "",
    "home_page_url": "sunyuzero.top",
    "items": [
        {
            "id": "sunyuzero.top/2021/10/01/LeetCode%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0%E2%80%94%E2%80%94%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/",
            "url": "sunyuzero.top/2021/10/01/LeetCode%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0%E2%80%94%E2%80%94%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/",
            "title": "LeetCode刷题笔记",
            "date_published": "2021-10-01T10:45:43.000Z",
            "content_html": "<h1 id=\"LeetCode刷题日记——初级算法\"><a href=\"#LeetCode刷题日记——初级算法\" class=\"headerlink\" title=\"LeetCode刷题日记——初级算法\"></a>LeetCode刷题日记——初级算法</h1><h3 id=\"1-买卖股票的最佳时机\"><a href=\"#1-买卖股票的最佳时机\" class=\"headerlink\" title=\"1.买卖股票的最佳时机\"></a>1.买卖股票的最佳时机</h3><blockquote>\n<p><strong>题目大意</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个数组 prices ，其中 prices[i] 是一支给定股票第 i 天的价格。</span><br><span class=\"line\">设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</span><br><span class=\"line\">注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</span><br><span class=\"line\"></span><br><span class=\"line\">示例:</span><br><span class=\"line\">输入: prices &#x3D; [7,1,5,3,6,4]</span><br><span class=\"line\">输出: 7</span><br><span class=\"line\">解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出, 这笔交易所能获得利润 &#x3D; 6-3 &#x3D; 3 。</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>动态规划解题</strong></p>\n</blockquote>\n<p>​    建立一个二维数组，<code>dp[i][0]</code>代表第i天手中没有股票时的现有利润，<code>dp[i][1]</code> 代表第i天手中有股票时的最大利润，则递推公式如下：<code>dp[i][0]=max(dp[i-1][0],dp[i-1][1]+prices[i])</code>,<code>dp[i][1]=max(dp[i-1][0]-prices[i],dp[i-1][1])</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = prices.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len][<span class=\"number\">2</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>]=-prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>],dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>]+prices[i]);</span><br><span class=\"line\">            dp[i][<span class=\"number\">1</span>] = Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>]-prices[i],dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[len-<span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>贪心算法解题</strong></p>\n</blockquote>\n<p>​    贪心算法，即局部最优，只需要在prices数组中从头开始遍历，找到开始上涨的最小值，然后这一上涨阶段的最大值，最小值买入，最大值卖出，就能获得最大利润</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> len = prices.length;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">          ans += Math.max(<span class=\"number\">0</span>,prices[i]-prices[i-<span class=\"number\">1</span>]);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-旋转数组\"><a href=\"#2-旋转数组\" class=\"headerlink\" title=\"2.旋转数组\"></a>2.旋转数组</h3><blockquote>\n<p>题目大意</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</span><br><span class=\"line\"></span><br><span class=\"line\">示例:</span><br><span class=\"line\">输入: nums &#x3D; [1,2,3,4,5,6,7], k &#x3D; 3</span><br><span class=\"line\">输出: [5,6,7,1,2,3,4]</span><br><span class=\"line\">解释:</span><br><span class=\"line\">向右旋转 1 步: [7,1,2,3,4,5,6]</span><br><span class=\"line\">向右旋转 2 步: [6,7,1,2,3,4,5]</span><br><span class=\"line\">向右旋转 3 步: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>题解</p>\n</blockquote>\n<p>以题目示例来说，旋转之后，左边的4个元素整体和右边的3个元素整体将会交换位置，可以先将整体交换，即直接反转元素，然后在每个部分中再反转即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;  </span><br><span class=\"line\">       <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">       k %= len;</span><br><span class=\"line\">       reverse(nums,<span class=\"number\">0</span>,len-<span class=\"number\">1</span>);</span><br><span class=\"line\">       reverse(nums,<span class=\"number\">0</span>,k-<span class=\"number\">1</span>);</span><br><span class=\"line\">       reverse(nums,k,len-<span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">           System.out.println(num);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums,<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (start&lt;end)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> temp = nums[start];</span><br><span class=\"line\">           nums[start++]=nums[end];</span><br><span class=\"line\">           nums[end--]=temp;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-存在重复元素\"><a href=\"#3-存在重复元素\" class=\"headerlink\" title=\"3.存在重复元素\"></a>3.存在重复元素</h3><blockquote>\n<p><strong>题目大意</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个整数数组，判断是否存在重复元素。</span><br><span class=\"line\">如果存在一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 1</span><br><span class=\"line\">输入: [1,2,3,1]</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>解题思路—set</strong></p>\n</blockquote>\n<p>直接暴力求解的话效率非常低，可以使用set的add方法一个特性：当添加的对象在set中已经存在，会add失败返回false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(!set.add(i)) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>解题思路—排序后比较</strong></p>\n</blockquote>\n<p>可以使用java内置的排序函数，先进行排序，在用O（n）的时间复杂度进行比较，最后的时间复杂度为排序的时间复杂度nlogn，使用leetcode发现这一种方法所使用的时间和空间要优于使用set</p>\n<h3 id=\"4-只出现一次的数字\"><a href=\"#4-只出现一次的数字\" class=\"headerlink\" title=\"4.只出现一次的数字\"></a>4.只出现一次的数字</h3><blockquote>\n<p><strong>题目大意</strong></p>\n</blockquote>\n<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>\n<blockquote>\n<p>解题思路—异或</p>\n</blockquote>\n<p>利用位运算符异或，相同的数字异或为0，然后任何数与0异或为本身，所以直接将所有数字进行异或即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            ans=ans^nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>解题思路—set</p>\n</blockquote>\n<p>使用set的add特性，当添加失败时说明其为重复元素，直接将它移除，最后set只剩下一个不重复的元素，这个的效率不如上一种方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">         Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!set.add(nums[i]))&#123;</span><br><span class=\"line\">                set.remove(nums[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)set.toArray()[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-字符串中的第一个唯一字符\"><a href=\"#5-字符串中的第一个唯一字符\" class=\"headerlink\" title=\"5.字符串中的第一个唯一字符\"></a>5.字符串中的第一个唯一字符</h3><blockquote>\n<p>题目大意</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</span><br><span class=\"line\"></span><br><span class=\"line\">示例：</span><br><span class=\"line\">s &#x3D; &quot;leetcode&quot;</span><br><span class=\"line\">返回 0</span><br><span class=\"line\"></span><br><span class=\"line\">s &#x3D; &quot;loveleetcode&quot;</span><br><span class=\"line\">返回 2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>解题思路</p>\n</blockquote>\n<p>关于字符串的问题要善于运用一个一维数组a[26]，来记录每一个字符的出现次数。遍历给定字符串的每一个字符，出现一次便在数组中加一，最后按顺序遍历找出值为一的元素索引返回，不存在即返回-1。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">firstUniqChar</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">           a[s.charAt(i)-<span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(a[s.charAt(i)-<span class=\"string\">&#x27;a&#x27;</span>]==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n",
            "tags": [
                "blog",
                "学习",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/12/10/%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/",
            "url": "sunyuzero.top/2020/12/10/%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/",
            "title": "网络编程",
            "date_published": "2020-12-10T05:45:43.000Z",
            "content_html": "<h2 id=\"关于求解字符串中出现的次数最多的子序列问题\"><a href=\"#关于求解字符串中出现的次数最多的子序列问题\" class=\"headerlink\" title=\"关于求解字符串中出现的次数最多的子序列问题\"></a>关于求解字符串中出现的次数最多的子序列问题</h2><p>关于这类题目有一个简单求解算法，大概思路如下：</p>\n<p>首先来看看一个题目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">【问题描述】</span><br><span class=\"line\"></span><br><span class=\"line\">NOIP 复赛之前，HSD 桑进行了一项研究，发现人某条染色体上的一段 DNA 序列中连续的  个碱基组成的碱基序列与做题的 AC 率有关！于是他想研究一下这种关系。</span><br><span class=\"line\">现在给出一段 DNA 序列，请帮他求出这段 DNA 序列中所有连续  个碱基形成的碱基序列中，出现最多的一种的出现次数。</span><br><span class=\"line\"></span><br><span class=\"line\">【输入形式】</span><br><span class=\"line\"></span><br><span class=\"line\">两行，第一行为一段 DNA 序列，保证 DNA 序列合法，即只含有 A, G, C, T 四种碱基；</span><br><span class=\"line\">第二行为一个正整数 ，意义与题目描述相同。</span><br><span class=\"line\"></span><br><span class=\"line\">【输出形式】</span><br><span class=\"line\"></span><br><span class=\"line\">一行，一个正整数，为题目描述中所求答案。</span><br><span class=\"line\"></span><br><span class=\"line\">【样例输入】</span><br><span class=\"line\"></span><br><span class=\"line\">ACTCACTC</span><br><span class=\"line\">4</span><br><span class=\"line\"></span><br><span class=\"line\">【样例输出】</span><br><span class=\"line\"></span><br><span class=\"line\">2</span><br><span class=\"line\">【样例说明】</span><br><span class=\"line\"></span><br><span class=\"line\">对于这段 DNA 序列，连续的  个碱基组成的碱基序列为：ACTC, CTCA, TCAC 与 CACT。其中 ACTC 出现  次，其余均出现  次，所以出现最多的次数为 ，即为答案。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3>",
            "tags": [
                "blog",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/09/23/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/",
            "url": "sunyuzero.top/2020/09/23/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/",
            "title": "算法学习",
            "date_published": "2020-09-23T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 算法学习 </font></center>\n\n<h1 id=\"getchar和putchar\"><a href=\"#getchar和putchar\" class=\"headerlink\" title=\"getchar和putchar\"></a>getchar和putchar</h1><p>getchar用于输入单个字符，putchar用于输出单个字符</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> c;</span><br><span class=\"line\">c=getchar();</span><br><span class=\"line\"><span class=\"built_in\">putchar</span>(c);</span><br></pre></td></tr></table></figure>\n<h1 id=\"常见的math函数\"><a href=\"#常见的math函数\" class=\"headerlink\" title=\"常见的math函数\"></a>常见的math函数</h1><p>使用math内置函数需要添加头文件<cmath></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">fabs</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//取x的绝对值</span></span><br><span class=\"line\"><span class=\"built_in\">floor</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//向上取整</span></span><br><span class=\"line\"><span class=\"built_in\">ceil</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//向下取整</span></span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"keyword\">double</span> r,<span class=\"keyword\">double</span> p) <span class=\"comment\">//返回r的p次方</span></span><br><span class=\"line\"><span class=\"built_in\">sqrt</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//返回x的算术平方根</span></span><br><span class=\"line\"><span class=\"built_in\">log</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//返回ln(x)</span></span><br><span class=\"line\"><span class=\"built_in\">sin</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//返回正弦值，要求x为弧度制</span></span><br><span class=\"line\"><span class=\"built_in\">acos</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//返回反余弦值，pi=acos(-1);</span></span><br><span class=\"line\">round(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//对x进行四舍五入取整</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"memset函数\"><a href=\"#memset函数\" class=\"headerlink\" title=\"memset函数\"></a>memset函数</h1><p>memset用于对数组中的每一个元素赋予相同的值（0或-1）,下面的这个函数即是对数组a的元素全部赋予0的操作<br>memset(a,0,sizeof(a));</p>\n<h1 id=\"对字符数组的输入输出\"><a href=\"#对字符数组的输入输出\" class=\"headerlink\" title=\"对字符数组的输入输出\"></a>对字符数组的输入输出</h1><h2 id=\"scanf和printf\"><a href=\"#scanf和printf\" class=\"headerlink\" title=\"scanf和printf\"></a>scanf和printf</h2><p>scanf(“%c”,&amp;c)用于输入单个字符,scanf(“%s”,s)用于输入字符数组，%s识别空格作为字符串的结尾</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,str);   <span class=\"comment\">//输入TAT TAT</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,str);  <span class=\"comment\">//输出TAT</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"gets和puts\"><a href=\"#gets和puts\" class=\"headerlink\" title=\"gets和puts\"></a>gets和puts</h2><p>gets用于输入一行字符串，以’\\n’作为识别结尾,puts用于输出一行字符串并自动换行</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">10</span>];</span><br><span class=\"line\">gets(str);</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(str);</span><br></pre></td></tr></table></figure>\n<h1 id=\"cstring的使用\"><a href=\"#cstring的使用\" class=\"headerlink\" title=\"cstring的使用\"></a>cstring的使用</h1><p>使用string类的内置函数需要包含头文件<cstring></p>\n<h2 id=\"strlen\"><a href=\"#strlen\" class=\"headerlink\" title=\"strlen()\"></a>strlen()</h2><p>strlen()函数用于获取字符串的长度</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">10</span>];</span><br><span class=\"line\">gets(str)</span><br><span class=\"line\"><span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(str);  <span class=\"comment\">//获取字符串的长度</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"strcmp\"><a href=\"#strcmp\" class=\"headerlink\" title=\"strcmp()\"></a>strcmp()</h2><p>strcmp(str1,str2)函数用于比较2个字符串的大小（按照字典序），返回一个整数，若str1&gt;str2，则返回一个正整数，若str1&lt;str2，则返回一个负整数,若str1=str2,则返回0。示例如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str1[<span class=\"number\">10</span>],str2[<span class=\"number\">10</span>];</span><br><span class=\"line\">gets(str1);    <span class=\"comment\">//Dear</span></span><br><span class=\"line\">gets(str2);       <span class=\"comment\">//Cat</span></span><br><span class=\"line\"><span class=\"built_in\">strcmp</span>(str1,str2)  <span class=\"comment\">//返回一个正整数</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"strcpy\"><a href=\"#strcpy\" class=\"headerlink\" title=\"strcpy()\"></a>strcpy()</h2><p>strcpy(str1,str2)函数可以把str2复制给str1</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str1[<span class=\"number\">50</span>],str2[<span class=\"number\">50</span>];</span><br><span class=\"line\">gets(str1);   <span class=\"comment\">//Hello</span></span><br><span class=\"line\">gets(str2);   <span class=\"comment\">//World</span></span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str1,str2);</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(str1);   <span class=\"comment\">//World</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"strcat\"><a href=\"#strcat\" class=\"headerlink\" title=\"strcat()\"></a>strcat()</h2><p>strcat(str1,str2)函数可以将str2接到str1后面</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str1[<span class=\"number\">50</span>],str2[<span class=\"number\">50</span>];</span><br><span class=\"line\">gets(str1);   <span class=\"comment\">//Hello</span></span><br><span class=\"line\">gets(str2);   <span class=\"comment\">//World</span></span><br><span class=\"line\"><span class=\"built_in\">strcat</span>(str1,str2);</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(str1);   <span class=\"comment\">//HelloWorld</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"sscanf和sprintf\"><a href=\"#sscanf和sprintf\" class=\"headerlink\" title=\"sscanf和sprintf\"></a>sscanf和sprintf</h1><p>sscanf和sprintf是处理字符串的利器，可以理解为string+scanf(printf),其基本格式为：sscanf(str,”%d”,&amp;n);sprinf(str,”%d”,n);</p>\n<h2 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h2><p>sscanf的用法是把字符数组str里的内容以”%d”的格式写入n中，而sprintf是把n的内容写入str中，示例如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">50</span>],str1[<span class=\"number\">50</span>]=<span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">sscanf</span>(str1,<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(str,<span class=\"string\">&quot;%d&quot;</span>,m);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n%s&quot;</span>,n,str);   <span class=\"comment\">//n=123,str=&#x27;100&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"进阶用法\"><a href=\"#进阶用法\" class=\"headerlink\" title=\"进阶用法\"></a>进阶用法</h2><p>不仅如此，sscanf和sprintf还可以进行复杂的输入输出，如下列代码所示</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n;<span class=\"keyword\">double</span> db;</span><br><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">50</span>],str1[<span class=\"number\">50</span>]=<span class=\"string\">&quot;2020:3.14,sscanf&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">sscanf</span>(str1,<span class=\"string\">&quot;%d:%lf,%s&quot;</span>,&amp;n,&amp;db,&amp;str);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n%.2f\\n%s\\n&quot;</span>,n,db,str);    <span class=\"comment\">//n=2020,db=3.14,str=sscanf</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> b=<span class=\"number\">2020</span>;<span class=\"keyword\">double</span> db=<span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">100</span>],str1[<span class=\"number\">100</span>]=<span class=\"string\">&quot;sprintf&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(str,<span class=\"string\">&quot;%d:%.2f,%s&quot;</span>,b,db,str1);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,str);     <span class=\"comment\">//str=2020:3.14,sprintf</span></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "blog",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/09/19/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/",
            "url": "sunyuzero.top/2020/09/19/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/",
            "title": "BFS学习",
            "date_published": "2020-09-19T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> BFS学习 </font></center>\nBFS，广度优先搜索，也称深度优先搜索，即搜索每次可达的所有点并进行标记，直到搜索范围覆盖所需要寻找的点。下面我们从迷宫搜索来看看DFS的应用。\n\n<h2 id=\"迷宫搜索\"><a href=\"#迷宫搜索\" class=\"headerlink\" title=\"迷宫搜索\"></a>迷宫搜索</h2><p>寻找迷宫中从起点到终点的最短可行路径。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>用二维数组记录迷宫，并标记迷宫的障碍点，再通过DFS找出最短路径。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">note</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> next[<span class=\"number\">4</span>][<span class=\"number\">2</span>]=&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;,&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">note</span> <span class=\"title\">que</span>[2501];</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">51</span>][<span class=\"number\">51</span>]=&#123;<span class=\"number\">0</span>&#125;,book[<span class=\"number\">51</span>][<span class=\"number\">51</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m,n;<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i][j]); </span><br><span class=\"line\">    <span class=\"keyword\">int</span> startX,startY,endX,endY,tx,ty;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;startX,&amp;startY,&amp;endX,&amp;endY);</span><br><span class=\"line\">    book[startX][startY]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> head=<span class=\"number\">1</span>,tail=<span class=\"number\">2</span>;</span><br><span class=\"line\">    que[head].x=startX;que[head].y=startY;</span><br><span class=\"line\">    que[head].f=<span class=\"number\">0</span>;que[head].s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(head&lt;tail)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">            tx=que[head].x+next[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">            ty=que[head].y+next[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tx&lt;<span class=\"number\">1</span>||tx&gt;m||ty&lt;<span class=\"number\">1</span>||ty&gt;n)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[tx][ty]==<span class=\"number\">0</span>&amp;&amp;book[tx][ty]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                book[tx][ty]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                que[tail].x=tx;</span><br><span class=\"line\">                que[tail].y=ty;</span><br><span class=\"line\">                que[tail].f=head;</span><br><span class=\"line\">                que[tail].s=que[head].s+<span class=\"number\">1</span>;</span><br><span class=\"line\">                tail++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(que[tail].x==endX&amp;&amp;que[tail].y==endY)&#123;</span><br><span class=\"line\">                flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag==<span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        head++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,que[tail<span class=\"number\">-1</span>].s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "blog",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/09/16/csp%E5%88%9D%E4%BD%93%E9%AA%8C/",
            "url": "sunyuzero.top/2020/09/16/csp%E5%88%9D%E4%BD%93%E9%AA%8C/",
            "title": "csp初体验",
            "date_published": "2020-09-16T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 2020CSP第二场 </font></center>\n\n<p>趁着学校报团免费参加了2020csp第二场，被血虐而归。前2题属于签到题，题目本身并不难，主要是要慢慢分析。由于太弱，只能带来前2题的题解。</p>\n<h2 id=\"第一题题目大意\"><a href=\"#第一题题目大意\" class=\"headerlink\" title=\"第一题题目大意\"></a>第一题题目大意</h2><p>给定一个点，要求从输入众多的点中找出距离该点最近的3个点并依次输出编号。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这个题用数组记录然后排序会有点麻烦，因为可能存在距离相同的点。最简单的方式是直接搜索3次，每次找出最近的点。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,x,y,x1,y1;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[n]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;x1&gt;&gt;y1;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp=(x-x1)*(x-x1)+(y-y1)*(y-y1);</span><br><span class=\"line\">        a[i]=temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p&lt;<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans=<span class=\"number\">10000000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) ans=min(ans,a[i]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p&gt;=<span class=\"number\">3</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i]==ans)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span>&lt;&lt;i+<span class=\"number\">1</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                p++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i]==ans)&#123;</span><br><span class=\"line\">                a[i]=<span class=\"number\">10000000</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第二题题目大意\"><a href=\"#第二题题目大意\" class=\"headerlink\" title=\"第二题题目大意\"></a>第二题题目大意</h2><p>给定一连串的点的位置以代替行走路径，以及给定区域，判断行走路径是否经过该区域并且判断其是否在区域内逗留（即大于k个点在此区域中）</p>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>用2个数组分别记录点的横坐标和纵坐标，判断点是否在区域内，用变量记录即可。</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k,t,x1,y1,x2,y2;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;t&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;<span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>,p1=<span class=\"number\">0</span>,p3=<span class=\"number\">0</span>,p4=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[t]=&#123;<span class=\"number\">0</span>&#125;,b[t]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p1=<span class=\"number\">0</span>;ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;a[j]&gt;&gt;b[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> p2=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(a[j]&gt;=x1&amp;&amp;a[j]&lt;=x2&amp;&amp;b[j]&gt;=y1&amp;&amp;b[j]&lt;=y2)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                p1++;p2++;j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans=max(ans,p2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p1) p3++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans&gt;=k) p4++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;p3&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;p4&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "blog",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/09/11/%E7%BA%BF%E6%80%A7%E8%A1%A8/",
            "url": "sunyuzero.top/2020/09/11/%E7%BA%BF%E6%80%A7%E8%A1%A8/",
            "title": "线性表",
            "date_published": "2020-09-11T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 线性表学习 </font></center>\n\n<h1 id=\"顺序表\"><a href=\"#顺序表\" class=\"headerlink\" title=\"顺序表\"></a>顺序表</h1><p>顺序表，即线性表的顺序存储结构，采用结构体类型SqList表示为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sqList</span>&#123;</span></span><br><span class=\"line\">    ElementType data[maxSize];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"顺序表的实现\"><a href=\"#顺序表的实现\" class=\"headerlink\" title=\"顺序表的实现\"></a>顺序表的实现</h2><h3 id=\"建立顺序表\"><a href=\"#建立顺序表\" class=\"headerlink\" title=\"建立顺序表\"></a>建立顺序表</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqList *L=(sqList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(sqList));</span><br><span class=\"line\">L-&gt;length=<span class=\"number\">0</span>;<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i&lt;n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;L-&gt;data[i]);    </span><br><span class=\"line\">    L-&gt;length++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查找顺序表数据位置\"><a href=\"#查找顺序表数据位置\" class=\"headerlink\" title=\"查找顺序表数据位置\"></a>查找顺序表数据位置</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">search</span><span class=\"params\">(sqList* L,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;L-&gt;length&amp;&amp;L-&gt;data[i]！=e)</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&gt;L-length) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插入数据元素\"><a href=\"#插入数据元素\" class=\"headerlink\" title=\"插入数据元素\"></a>插入数据元素</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sert</span><span class=\"params\">(sqList *L,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j=L-&gt;length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&gt;i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        L-&gt;data[j]=L-&gt;data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;data[i<span class=\"number\">-1</span>]=e;</span><br><span class=\"line\">    L-&gt;length++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除顺序表\"><a href=\"#删除顺序表\" class=\"headerlink\" title=\"删除顺序表\"></a>删除顺序表</h3><p>free(L);</p>\n<h2 id=\"顺序表的应用\"><a href=\"#顺序表的应用\" class=\"headerlink\" title=\"顺序表的应用\"></a>顺序表的应用</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给定一个顺序表，删除其中所有值等于x的元素，要求时间复杂度O(N),空间复杂度O(1)</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteX</span><span class=\"params\">(sqList *L,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;L-&gt;length)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L-&gt;data[i]==x) i++;</span><br><span class=\"line\">        L-&gt;data[k]=L-&gt;data[i];</span><br><span class=\"line\">        k++;i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;length=k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L-&gt;length;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,L-&gt;data[i]);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表，即线性表的链式存储结构，采用结构体的表示方式为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nodeList</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    nodeList *next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表的实现\"><a href=\"#链表的实现\" class=\"headerlink\" title=\"链表的实现\"></a>链表的实现</h2><h3 id=\"链表的建立\"><a href=\"#链表的建立\" class=\"headerlink\" title=\"链表的建立\"></a>链表的建立</h3><p>1.头插法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodeList *p,*q;</span><br><span class=\"line\">p=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">p-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    q=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">    q-&gt;data=x;</span><br><span class=\"line\">    q-&gt;next=p-&gt;next;</span><br><span class=\"line\">    p-&gt;next=q;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.尾插法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodeList *head,*p,*q;</span><br><span class=\"line\">head=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">p=head;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    q=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">    q-&gt;data=x;</span><br><span class=\"line\">    p-&gt;next=q;</span><br><span class=\"line\">    p=q;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p-&gt;next=<span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"链表的插入元素与删除元素\"><a href=\"#链表的插入元素与删除元素\" class=\"headerlink\" title=\"链表的插入元素与删除元素\"></a>链表的插入元素与删除元素</h3><p>1.插入元素</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sertElement</span><span class=\"params\">(nodeList *L,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    nodeList *p=L;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&lt;i&amp;&amp;p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=p-&gt;next;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        nodeList *s=(nodeList*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">        s-&gt;data=e;</span><br><span class=\"line\">        s-&gt;next=p-&gt;next;</span><br><span class=\"line\">        p-&gt;next=s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.删除元素</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteElement</span><span class=\"params\">(nodeList *L,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    nodeList *p=L,*q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>&amp;&amp;p-&gt;data!=e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=p-&gt;next;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    q=p-&gt;next;</span><br><span class=\"line\">    p-&gt;next=p-&gt;next-&gt;next;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"链表的删除\"><a href=\"#链表的删除\" class=\"headerlink\" title=\"链表的删除\"></a>链表的删除</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">freeList</span><span class=\"params\">(nodeList *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    nodeList *q=L,*p=L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">        q=p;</span><br><span class=\"line\">        p=q-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表的应用\"><a href=\"#链表的应用\" class=\"headerlink\" title=\"链表的应用\"></a>链表的应用</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给定一个链表，设计一个算法使其元素递增。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sortList</span><span class=\"params\">(nodeList *head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    nodeList *q,*p,*s;</span><br><span class=\"line\">    q=head-&gt;next;p=head-&gt;next-&gt;next;</span><br><span class=\"line\">    s=head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q-&gt;data&gt;=p-&gt;data)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        q-&gt;next=p-&gt;next;p-&gt;next=q;</span><br><span class=\"line\">        p=head-&gt;next;</span><br><span class=\"line\">        q=q-&gt;next</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/09/03/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/",
            "url": "sunyuzero.top/2020/09/03/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/",
            "title": "初探DFS",
            "date_published": "2020-09-03T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> DFS入门 </font></center>\n\n<a id=\"more\"></a>\n<h2 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h2><p>DFS，即深度优先搜索，是最重要的搜索思想之一，其核心在于解决当下问题，而下一步的做法和当前一样。其基本模型如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> step)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    判断边界</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//解决当下问题    </span></span><br><span class=\"line\">        dfs(step+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"dfs之数的全排列\"><a href=\"#dfs之数的全排列\" class=\"headerlink\" title=\"dfs之数的全排列\"></a>dfs之数的全排列</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给定一个正整数n(n&lt;10),写出1~n的全排列</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>利用dfs基本模型来逐步解决</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">10</span>]=&#123;<span class=\"number\">0</span>&#125;,book[<span class=\"number\">10</span>]=&#123;<span class=\"number\">0</span>&#125;,n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> step)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(step&gt;=n+<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a[i]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(book[i]==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[m]=i;</span><br><span class=\"line\">            book[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs(step+<span class=\"number\">1</span>);</span><br><span class=\"line\">            book[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"dfs之迷宫搜索\"><a href=\"#dfs之迷宫搜索\" class=\"headerlink\" title=\"dfs之迷宫搜索\"></a>dfs之迷宫搜索</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给定一个n行m列迷宫，要求从寻找从起点到终点的最短路径</p>\n<h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>直接使用dfs搜索找出最短路径</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> startX,startY,endX,endY,min=<span class=\"number\">99999</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">51</span>][<span class=\"number\">51</span>]=&#123;<span class=\"number\">0</span>&#125;,book[<span class=\"number\">51</span>][<span class=\"number\">51</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> step)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==endX&amp;&amp;y==endY)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(step&lt;min) min=step;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> next[<span class=\"number\">4</span>][<span class=\"number\">2</span>]=&#123;</span><br><span class=\"line\">        &#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tx,ty;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">3</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tx=x+next[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        ty=y+next[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tx&lt;<span class=\"number\">1</span>||ty&lt;<span class=\"number\">1</span>||tx&gt;n||ty&gt;m)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[tx][ty]==<span class=\"number\">0</span>&amp;&amp;book[tx][ty]==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            book[tx][ty]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs(tx,ty,step+<span class=\"number\">1</span>);</span><br><span class=\"line\">            book[tx][ty]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;startX,&amp;startY,&amp;endX,&amp;endY);</span><br><span class=\"line\">    book[startX][startY]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    dfs(startX,startY,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s%d&quot;</span>,<span class=\"string\">&quot;最少步数为：&quot;</span>,min);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/09/01/%E6%9A%B4%E5%8A%9B%E6%9E%9A%E4%B8%BE/",
            "url": "sunyuzero.top/2020/09/01/%E6%9A%B4%E5%8A%9B%E6%9E%9A%E4%B8%BE/",
            "title": "暴力枚举",
            "date_published": "2020-09-01T10:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=7> 暴力枚举学习 </font></center>\n\n<a id=\"more\"></a>\n<h1 id=\"火柴棍游戏\"><a href=\"#火柴棍游戏\" class=\"headerlink\" title=\"火柴棍游戏\"></a>火柴棍游戏</h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>&emsp;给定确定的n(n&lt;=24)根火柴，要求全部使用并摆出A+B=C的等式，其中A,B,C均为整数，求问共有多少种摆法。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>&emsp;将0-9这10个数字所需要的火柴棍个数记录在数组当中，通过暴力枚举来找出其中符合的个数。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">10</span>]=&#123;<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fn</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">1000</span>) <span class=\"keyword\">return</span> f[(x/<span class=\"number\">1000</span>)]+f[x/<span class=\"number\">100</span>%<span class=\"number\">10</span>]+f[x/<span class=\"number\">10</span>%<span class=\"number\">10</span>]+f[x%<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">100</span>&amp;&amp;x&lt;<span class=\"number\">1000</span>) <span class=\"keyword\">return</span> f[x/<span class=\"number\">100</span>]+f[x/<span class=\"number\">10</span>%<span class=\"number\">10</span>]+f[x%<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>&amp;&amp;x&lt;<span class=\"number\">100</span>) <span class=\"keyword\">return</span> f[x/<span class=\"number\">10</span>]+f[x%<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> f[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,<span class=\"built_in\">abs</span>=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">1111</span>;i++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">1111</span>;j++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fn(i)+fn(j)+fn(i+j)==n<span class=\"number\">-4</span>) <span class=\"built_in\">abs</span>++;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s%d%s&quot;</span>,<span class=\"string\">&quot;情况共有&quot;</span>,<span class=\"built_in\">abs</span>,<span class=\"string\">&quot;种&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "学习",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/08/30/%E9%93%BE%E8%A1%A8/",
            "url": "sunyuzero.top/2020/08/30/%E9%93%BE%E8%A1%A8/",
            "title": "链表",
            "date_published": "2020-08-30T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 链表学习(一) </font></center>\n\n<a id=\"more\"></a>\n\n<h2 id=\"链表结构\"><a href=\"#链表结构\" class=\"headerlink\" title=\"链表结构\"></a>链表结构</h2><p>1.创建结构体</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.建立链表</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">head</span>,*<span class=\"title\">p</span>,*<span class=\"title\">q</span>;</span></span><br><span class=\"line\">head=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,x))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    p=(struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node));</span><br><span class=\"line\">    p-&gt;data=x;</span><br><span class=\"line\">    p-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head==<span class=\"literal\">NULL</span>) head=p;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> q-&gt;next=p;</span><br><span class=\"line\">    q=p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.输出链表</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">t</span>;</span></span><br><span class=\"line\">t=head;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(t!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,t-&gt;data);</span><br><span class=\"line\">    t=t-&gt;next;</span><br><span class=\"line\">&#125;        </span><br></pre></td></tr></table></figure>\n<p>4.插入链表</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">r</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(r!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-&gt;next==<span class=\"literal\">NULL</span>||r-&gt;data&gt;a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=(struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node));</span><br><span class=\"line\">        p-&gt;next=r-&gt;next;</span><br><span class=\"line\">        p-&gt;data=a;</span><br><span class=\"line\">        r-&gt;next=p;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r=r-&gt;next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5.删除链表</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">f</span>;</span></span><br><span class=\"line\">f=head;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(f!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(f);</span><br><span class=\"line\">    f=f-&gt;next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"模拟链表\"><a href=\"#模拟链表\" class=\"headerlink\" title=\"模拟链表\"></a>模拟链表</h2><p>&emsp;模拟链表，即通过2个数组来模拟动态链表，一个数组存放数据，另一个数组记录数据的位置。<br>1.模拟链表结构</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> data[<span class=\"number\">100</span>],right[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;data[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i!=n) right[i]=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> right[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>2.插入数据操作</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x;<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\"><span class=\"keyword\">int</span> t=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(t!=<span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(data[right[t]&gt;data[n])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        data[n+<span class=\"number\">1</span>]=x;</span><br><span class=\"line\">        right[t]=n+<span class=\"number\">1</span>;</span><br><span class=\"line\">        right[n+<span class=\"number\">1</span>]=t+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t=right[t];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "算法"
            ]
        },
        {
            "id": "sunyuzero.top/2020/08/27/%E5%88%9D%E8%AF%86%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/",
            "url": "sunyuzero.top/2020/08/27/%E5%88%9D%E8%AF%86%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/",
            "title": "初识队列和栈",
            "date_published": "2020-08-27T10:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=10> 初识队列和栈 </font></center>\n\n<a id=\"more\"></a>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>&emsp;<font size=3>队列，作为一种比较简单的数据结构，其在算法中有着非常多的应用。其类似于一条单行道，先进先出，后进后出，每次需要记录头指针和尾指针。接下来我将从一个简单的例子出发渗透队列的思想。</p>\n<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>&emsp;n 个人围成一圈，从第一个人开始报数,数到m的人出列，再由下一个人重新从1开始报数，数到m的人再出圈，依次类推，直到所有的人都出圈，输出依次出圈人的编号。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>&emsp;构建一个含有n个元素的队列，进行n次循环，在每次循环中将队列前m-1个元素依次放置队尾，然后将第m个元素出队并输出，这样每次循环之后形成新的队列重复以上操作即可。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">1000005</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> head=<span class=\"number\">1</span>,tail=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[++tail]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(tail&gt;=head)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[++tail]=a[head++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,a[head++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><p>&emsp;栈，原理类似于队列，如同一个死胡同，出口和入口为同一个，先进后出，每次只需记录尾指针即可。话不多说，再看一个小例子来了解栈的应用。</p>\n<h2 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>&emsp;判断一个数是否为回文数</p>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>&emsp;直接利用栈存储前一半的字符串，然后将后一半字符串与栈中字符对比判断即可</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">char</span> t[<span class=\"number\">10005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> top=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> a[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> dg=<span class=\"number\">0</span>;</span><br><span class=\"line\">    gets(a);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(a);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=len/<span class=\"number\">2</span><span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=mid;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t[++top]=a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len%<span class=\"number\">2</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=mid+<span class=\"number\">1</span>;i&lt;len;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t[top--]!=a[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dg=<span class=\"number\">1</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">             &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=mid+<span class=\"number\">2</span>;i&lt;len;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t[top--]!=a[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dg=<span class=\"number\">1</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dg) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;不是回文数&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;是回文数&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"混合运用\"><a href=\"#混合运用\" class=\"headerlink\" title=\"混合运用\"></a>混合运用</h1><p>&emsp;接下来就轮到队列和栈的混合双打了,没错，就是传说中的经典纸牌游戏</p>\n<h2 id=\"题目大意-2\"><a href=\"#题目大意-2\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>&emsp;双方按照发牌的原本顺序轮流出牌放置桌面，出牌时，若一方打出的牌与桌面上某张牌相同，则可取走这两张牌之间的所有牌（包括这两张）依次放置牌的最后，当一方牌全出完时则失败，</p>\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>&emsp;开始时双方手中的牌可用队列存储，出牌即使出队，赢牌则是入队。而桌面上的牌则可用栈存储，每打出一张牌即入栈。最后判断队列是否为空即可。</p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">queue</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data[<span class=\"number\">1000</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tail;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">queue</span> <span class=\"title\">q1</span>, <span class=\"title\">q2</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stack</span> <span class=\"title\">s</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> book[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, t;</span><br><span class=\"line\">    q1.head = <span class=\"number\">1</span>; q1.tail = <span class=\"number\">1</span>;</span><br><span class=\"line\">    q2.head = <span class=\"number\">1</span>; q2.tail = <span class=\"number\">1</span>;</span><br><span class=\"line\">    s.top = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">9</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        book[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        scanf_s(<span class=\"string\">&quot;%d&quot;</span>, &amp;q1.data[q1.tail]);</span><br><span class=\"line\">        q1.tail++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        scanf_s(<span class=\"string\">&quot;%d&quot;</span>, &amp;q2.data[q2.tail]);</span><br><span class=\"line\">        q2.tail++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q1.head &lt; q1.tail &amp;&amp; q2.head &lt; q2.tail)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t = q1.data[q1.head];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (book[t] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q1.head++;</span><br><span class=\"line\">            s.top++;</span><br><span class=\"line\">            s.data[s.top] = t;</span><br><span class=\"line\">            book[t] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q1.head++;</span><br><span class=\"line\">            q1.data[q1.tail] = t;</span><br><span class=\"line\">            q1.tail++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (s.data[s.top] != t)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                book[s.data[s.top]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                q1.data[q1.tail] = s.data[s.top];</span><br><span class=\"line\">                q1.tail++;</span><br><span class=\"line\">                s.top--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            book[s.data[s.top]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            q1.data[q1.tail] = s.data[s.top];</span><br><span class=\"line\">            q1.tail++;</span><br><span class=\"line\">            s.top--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q1.head == q1.tail) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        t= q2.data[q2.head];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (book[t] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q2.head++;</span><br><span class=\"line\">            s.top++;</span><br><span class=\"line\">            s.data[s.top] = t;</span><br><span class=\"line\">            book[t] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q2.head++;</span><br><span class=\"line\">            q2.data[q2.tail] = t;</span><br><span class=\"line\">            q2.tail++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (s.data[s.top] != t)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                book[s.data[s.top]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                q2.data[q2.tail] = s.data[s.top];</span><br><span class=\"line\">                q2.tail++;</span><br><span class=\"line\">                s.top--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            book[s.data[s.top]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            q2.data[q2.tail] = s.data[s.top];</span><br><span class=\"line\">            q2.tail++;</span><br><span class=\"line\">            s.top--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q2.head == q2.tail) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q1.head == q1.tail) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;B WIN&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A WIN&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</font>\n\n<br/>\n\n",
            "tags": [
                "blog",
                "算法"
            ]
        }
    ]
}